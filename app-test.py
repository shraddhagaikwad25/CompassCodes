from flask import (
    Flask,
    g,
    redirect,
    render_template,
    flash,
    request,
    session,
    url_for
)
from nltk import FreqDist
from bson.regex import Regex
from textblob import TextBlob
import pandas as pd
from flask import Flask,json
from datetime import datetime
from pandas.io.json import json_normalize
import pandas as pd
import pycountry
# import mysql.connector
from nltk.tokenize import word_tokenize
import numpy as np
from flask_cors import CORS
from geolite2 import geolite2
import time
from datetime import timedelta
import pymongo
from pymongo import MongoClient
from pprint import pprint
import urllib.parse
from pandas import DataFrame
from bson.objectid import ObjectId
import datetime
import dateutil.parser
from datetime import date
import calendar
import re
import json
from urllib.request import urlopen
from sort_dataframeby_monthorweek import *
from pytz import timezone
from six.moves import urllib
from numpyencoder import NumpyEncoder
from flask import Flask, make_response
import pyexcel as pe
from flask import Response
import io
import nltk
from textblob import TextBlob
from nltk.corpus import stopwords
from dateutil.relativedelta import relativedelta
import math
# stop = stopwords.words('english')

app = Flask(__name__)
CORS(app)




def csy_first_date():
        date_today =datetime.date.today()
    #     print(date_today)
    #     date_today='2024-07-01'
    #     day_end=datetime.datetime.strptime(date_today, '%Y-%m-%d').date()
        initial_date='2020-08-01'
        day1=datetime.datetime.strptime(initial_date, '%Y-%m-%d').date()
        # Check if leap year in the calculation
        if ((day1.year+1) % 4) == 0:
            if ((day1.year+1) % 100) == 0:
                if ((day1.year+1) % 400) == 0:
                    days_diff=1
                else:
                    days_diff=1
            else:
                days_diff=1
        else:
            days_diff=0
        if ((date_today-day1).days<(365+days_diff)):
            day_1=day1
        else:
            day1=day1+timedelta(days=(365+days_diff))
            day_1=day1

        csy_date=datetime.datetime.strptime((day_1.strftime('%Y-%m-%d')), '%Y-%m-%d')
        

        return csy_date
    
    
def LSY_Date():

    LSY_Date=csy_first_date()-relativedelta(years=1)
    return LSY_Date




disdic={
    '620f3d6132c6d4813f4c9887':'Jackson County Schools',
    '6045e4d007ead7744b125848':'Adams 12 Five Star Schools',
    '616d2865c35ee7525fb145d9':'Addison Northwest School District',
    '6167fe41282c502e1077c12f':'Anchorage',
    '6045e4d707ead7744b125854':'Adams County School District 14',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '6045e4c907ead7744b12583d':'Apple Valley Unified School District',
    '619268dd81f00a4319a65a52':'Access Community',
    '789':'Attendance works',
    '6045e4d707ead7744b125855':'Aurora Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '6045e4d107ead7744b125849':'Berkeley Public Schools',
    '5fe2e25d4d0ca68d7baf889d':'BGCA',
    '6045e4ca07ead7744b12583e':'Bishop Unified School District',
    '6045e4d107ead7744b12584a':'Bismarck Public Schools',
    '5fe318b14d0ca68d7baf889e':'BLUE',
    '6045e4c807ead7744b12583b':'Boston Public Schools',
    '6023a6d79e8e623753fc305c':'Boulder Valley School District',
    '60f7bf747cc8db72d772e465':'Bright Horizons Early Learning Centers',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '617949a0fc72b63e0d1dc7d3':'Burlington School District',
    '6045e4ca07ead7744b12583f':'Canyons School District',
    '60473f8823e88e242074ebd2':'Champlain Valley School District',
    '6045e4d907ead7744b125858':'Chicago Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '6045e4d907ead7744b125857':'Colton Joint Unified School District',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '6045e4da07ead7744b125859':'Dennis-Yarmouth Regional School District',
    '6045e4cb07ead7744b125840':'Denver Public Schools',
    '5f2609807a1c0000950bb46e':'District 25 New York Schools',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '6045e4c707ead7744b12583a':'Durham Public Schools',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb464':'Equity Education',
    '6045e4cc07ead7744b125841':'Fairfax County Public Schools',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '6045e4cd07ead7744b125843':'Falmouth Public Schools',
    '6045e4da07ead7744b12585a':'FITCHBURG PUBLIC SCHOOLS',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '6023a7269e8e623753fc305e':'Fulton County School System',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '617fae53ccd2dd76541ed5e7':'Glasgow Independent Schools',
    '6045e4d207ead7744b12584b':'Glenbard District 87',
    '5f2609807a1c0000950bb450':'Goleta District',
    '6045e4cd07ead7744b125844':'Granite School District',
    '5f2609807a1c0000950bb474':'Greenburgh North Castle Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '60cb8971c5b0e89ed7ac0aa1':'Hall County School District',
    '5f9aa5e526edbed399d56c92':'Hamilton-Wenham Regional School District',
    '6045e4c707ead7744b125839':'Hartford Public Schools',
    '5f2609807a1c0000950bb47c':'Hawaii Public Schools',
    '6045e4ce07ead7744b125845':'Helena Public Schools',
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '6045e4db07ead7744b12585b':'HidalgoIndependent School district',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '6045e4db07ead7744b12585c':'Hopedale Public Schools',
    '6045e4cc07ead7744b125842':'Houston Independent School District',
    '60b872ce826cab06ebdf044e':'Kalamazoo Public Schools',
    '6045e4dc07ead7744b12585d':'Kearsarge Regional School District',
    '6045e4d307ead7744b12584d':'KIPP Public Schools',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '6045e4cf07ead7744b125846':'Lamar Consolidated Independent School District',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '6045e4dc07ead7744b12585e':'Littleton Public Schools',
    '5fe2e1ee4d0ca68d7baf889c':'LSF-Head Start',
    '6023a7499e8e623753fc305f':'Manatee County School District',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '6077e1b5eaa8bae0e2e04a64':'Medfield School District',
    '6023a7019e8e623753fc305d':'Miami-Dade County Public Schools',
    '5f2609807a1c0000950bb465':'Middleton-Cross Plains Area School District',
    '6045e4d407ead7744b12584f':'Mill Valley School District',
    '6045e4d307ead7744b12584e':'Millard School District',
    '610d0837931db8cfdf500fef':'Mission Consolidated Independent School District',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '6045e4cf07ead7744b125847':'Muscatine Community School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f2609807a1c0000950bb459':'North Special School District',
    '6045e4c907ead7744b12583c':'Northside Independent School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '6017ab3043ca9c39151838d4':'Oswego School District',
    '6045e4dd07ead7744b12585f':'Palm Beach County School District',
    '60913aaea5fd4b56a4bafa70':'Palm Springs Unified',
    '5f2609807a1c0000950bb479':'Panorama Education',
    '5f2609807a1c0000950bb46f':'Paradise Schools',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '6045e4de07ead7744b125860':'Paterson School District',
    '6177e72d108b6ebefcfc1014':'Pasco County Schools',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '6045e4d507ead7744b125850':'Rich School District',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '6045e4d507ead7744b125851':'San Francisco Unified School District',
    '6023a76f9e8e623753fc3060':'San Jose Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '6045e4df07ead7744b125862':'San Marcos Unified School District',
    '6045e4df07ead7744b125863':'San Marino Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '602e60e567d3e6c0a4eb4d99':'School District of Palm Beach County',
    '6045e4d807ead7744b125856':'School District of the Chathams',
    '6045e4de07ead7744b125861':'Sevier School District',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    '617fc552ccd2dd76541ed5eb': 'Shah Family Foundation & BPS',
    '123':'Skillman',
    '6045e4e007ead7744b125864':'South Summit School District',
    '60eea965ae7de54f57abf234':'Southfield Public Schools',
    '5f2609807a1c0000950bb46a':'Springfield Public School',
    '6045e4e007ead7744b125865':'Sudbury Public Schools',
    '6045e4e107ead7744b125866':'Tooele County School District',
    '60a7b03831afdba383052726':'United Way Of Santa Barbara',
    '6045e4d607ead7744b125852':'Upland Unified School District',
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '456':'UWBA',
    '6023a7949e8e623753fc3061':'Wasatch County School District',
    '6045e4e207ead7744b125867':'Washoe County School District',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '6045e4d607ead7744b125853':'West Contra Costa Unified School District',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '6045e4e207ead7744b125868':'Westford Public Schools',
    '6045e4d207ead7744b12584c':'White River School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5f2609807a1c0000950bb45d':'Youngstown'}


@app.route('/word_cloud_chart/<product>/<rating>/<startdate>/<enddate>')
def word_freq(product,rating,startdate,enddate):
    clean_list=[]
    news_headlines_senti = []
    news_headlines_dict = {}
    pnews_headlines=0
    nnews_headlines=0
    nenews_headlines = 0
    date1=startdate
    date2=enddate
    today = date.today()
    d1 = today.strftime("%Y-%m-%d")
    if product == "all": 
        product=["IE Home App","Community","Explorer","Cloud","IE School App"]
    else : 
        product=[product]
    if date1 == "all": 
        date1='2020-07-01'
    else : 
        date1=date1
    if date2 == "all":
        date2=d1
    else : 
        date2=date2
    if rating == "all":
        rating=[0,1,2,3,4,5]
    else : 
        rating=[int(rating)]
    myDatetimestrt = dateutil.parser.parse(date1)
    myDatetimeend = dateutil.parser.parse(date2)
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    collection = db.audio_feedback
    user=[
    {"$match":{'$and':[ {"USER.USER_NAME": { "$not": { "$regex": "test",'$options':'i'}}},
                {"USER.USER_NAME":{ "$ne": ""}},
                {"USER.EMAIL_ID":{ "$not": { "$regex": "test",'$options':'i'}}},
                {"USER.EMAIL_ID":{ "$not": { "$regex": "1gen",'$options':'i'}}},
                {"USER.EMAIL_ID":{ "$ne": ""}},  
                {'USER.IS_BLOCKED':{"$ne":'Y'}}, 
                {'USER.IS_DISABLED':{"$ne":'Y'}},
                {'MODIFIED_DATE':{'$gte': myDatetimestrt, '$lt':myDatetimeend}},
                  {'RATING':{'$in':rating}},     
                {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
    #                   {"COMMENT":{"$exists":1 }} 
                        ]}},
    { "$project": { "USER_ID": "$USER._id", "USER_NAME": "$USER.USER_NAME","_id":0, "EMAIL": "$USER.EMAIL_ID", "RATING":1,
    "LAST_COMMENT_DATE": "$MODIFIED_DATE", "AUDIO_NAME": "$AUDIO_ID.AUDIO_NAME", "NARRATOR_NAME": "$AUDIO_ID.NARRATEDBY",
    "COMMENT":1, "PROGRAM_NAME": "$AUDIO_ID.PROGRAM_ID.PROGRAM_NAME"}}
    ]
    update=list(collection.aggregate(user))
    df=pd.DataFrame(update).fillna("no info")
    list_of_names=df["USER_ID"].to_list()
    print(1)
    collection = db.user_master
    user=[
    {"$match":{'$and':[ {"USER_NAME": { "$not": { "$regex": "test",'$options':'i'}}},
                {"USER_NAME":{ "$ne": ""}},
                {"EMAIL_ID":{ "$not": { "$regex": "test",'$options':'i'}}},
                {"EMAIL_ID":{ "$not": { "$regex": "1gen",'$options':'i'}}},
                {"EMAIL_ID":{ "$ne": ""}},  
                {'IS_BLOCKED':{"$ne":'Y'}}, 
                {'IS_DISABLED':{"$ne":'Y'}}, 
                {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
                {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                {"_id":{"$in":list_of_names}}   
                        ]}},
    { "$project": {"SCHOOL_NAME":"$schoolId.NAME", "CITY":"$schoolId.CITY","STATE":"$schoolId.STATE",
          "USER_ID":"$_id","_id":0}}
    ]
    update=list(collection.aggregate(user))
    df1=pd.DataFrame(update).fillna("no info")
    print(2)
    df01=pd.merge(df,df1,on="USER_ID",how="left")
    collection = db.subscription_master
    user=[
    {"$match":{'$and':[{"USER_ID.USER_NAME": { "$not": { "$regex": "test",'$options':'i'}}},
                {"USER_ID.USER_NAME":{ "$ne": ""}},
                {"USER_ID.EMAIL_ID":{ "$not": { "$regex": "test",'$options':'i'}}},
                {"USER_ID.EMAIL_ID":{ "$not": { "$regex": "1gen",'$options':'i'}}},
                {"USER_ID.EMAIL_ID":{ "$ne": ""}},  
                {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
                {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, 
                {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
                {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                {'PLAN_ID.PLAN_NAME':{"$in":product}},
                {"USER_ID._id":{"$in":list_of_names}}
                  ]}},
    { "$project": {"RENEWAL_DATE":"$SUBSCRIPTION_EXPIRE_DATE","PLAN_NAME":"$PLAN_ID.PLAN_NAME",  
           "USER_ID":"$USER_ID._id","_id":0}}
    ]
    update=list(collection.aggregate(user))
    df2=pd.DataFrame(update).fillna("no info")
    print(3)
    df12=pd.merge(df01,df2,on="USER_ID",how="left")
    collection = db.audio_track_master
    user=[
    {"$match":{'$and':[ {"USER_ID.USER_NAME": { "$not": { "$regex": "test",'$options':'i'}}},
                {"USER_ID.USER_NAME":{ "$ne": ""}},
                {"USER_ID.EMAIL_ID":{ "$not": { "$regex": "test",'$options':'i'}}},
                {"USER_ID.EMAIL_ID":{ "$not": { "$regex": "1gen",'$options':'i'}}},
                {"USER_ID.EMAIL_ID":{ "$ne": ""}},  
                {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
                {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, 
                {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
                {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                { "USER_ID._id":{"$in":list_of_names}},
    ]}},
    {"$group":{"_id": "$USER_ID._id","PRACTICE_COUNT":{"$sum":1}, 
        "LAST_PRACTICE_DATE": {"$last": "$MODIFIED_DATE"},
                    }},
    { "$project": {"PRACTICE_COUNT":1,"_id":0,"USER_ID":"$_id","LAST_PRACTICE_DATE":1}}
    ]
    update=list(collection.aggregate(user))
    df3=pd.DataFrame(update)
    print(4)
    df123=pd.merge(df12,df3,on="USER_ID",how="left")
    xxt=df123[df123.PLAN_NAME.isin(product)]
    df123=xxt
    def Average(lst):
        return sum(lst) / len(lst)

    # Driver Code
    lst =df123["RATING"].to_list()
    average = Average(lst)


    #     print(df123["COMMENT"],"lola")
    xx=df123[df123["COMMENT"]!="no info"]
    xxc=xx[xx["COMMENT"]!=""]

    comment_list=xxc["COMMENT"].to_list()

    newtexttoken=[]
    for i in comment_list:
        text_tokens = word_tokenize(i)
        newtexttoken.append(text_tokens)
    newlist=[]
    for i in newtexttoken:
        for z in i:
            newlist.append(z.lower())
    st_word=stopwords.words('english')
    tokens_without_sw= [word for word in newlist if not word in st_word]
    token5=[]
    for sentence in tokens_without_sw:
    #     print(sentence)
        text3 = sentence.split('ing')
    #     print(text3,"text3")
        for i in text3:
    #         print(i)
            token5.append(i)
    words = [w.replace('liked', 'like') for w in token5]
    words2 = [w.replace('relaxed', 'relax') for w in words]
    words3 = [w.replace('relaxing', 'relax') for w in words2]
    words4 = [w.replace('excitinging', 'excited') for w in words3]
    #     print(words4)
    zxc=""
    name=""
    count=""
    try:
        xcvv=[x for x in words4 if len(x)>3]
        fdist=FreqDist(xcvv)
        df_fdist = pd.DataFrame.from_dict(fdist, orient='index')
    #         print(df_fdist)
        df_fdist.columns = ['Frequency']
        df_fdist.index.name = 'Term'
        xc=df_fdist.sort_values(by='Frequency', ascending=False, na_position='first')
        #     tt=xc.drop(["i","it","we","made","us","the","feeling","some","students"])
        cc=xc[0:10]
        name=cc.index.to_list()
        count=cc["Frequency"].to_list()
        zxc=' '.join(word for word in xcvv)
    except:
        pass
    for item in comment_list:
        # trim
        item = item.strip()
        # Removing RT
        item = item.replace('RT', '')
        # Removing new line character
        item = item.replace('\\n', '')
        # Replace #word with word
        news_headlines = re.sub(r'#([^\s]+)', r'\1', item)
        # Convert @username to username
        news_headlines = re.sub(r'@([^\s]+)', r'\1', item)
        item = " ".join(re.findall("[a-zA-Z]+", item))
        tmp_var = re.sub(r'^\S*\s', '', item)
        clean_list.append(tmp_var)
    for item in clean_list:
            #print(item)
            # create TextBlob object of passed news_headlines text
            analysis = TextBlob(item)
            # set sentiment
            if analysis.sentiment.polarity > 0:
                # saving sentiment of news_headlines
                news_headlines_score = 'positive'
                pnews_headlines = pnews_headlines + 1
                news_headlines_dict[item] = news_headlines_score
            elif analysis.sentiment.polarity == 0:
                # saving sentiment of news_headlines
                news_headlines_score = 'neutral'
                nenews_headlines = nenews_headlines + 1
                news_headlines_dict[item] = news_headlines_score
            else:
                # saving sentiment of news_headlines
                news_headlines_score = 'negative'
                nnews_headlines = nnews_headlines + 1
                news_headlines_dict[item] = news_headlines_score
    # print(clean_list)
    newssentiment=[]
    # for k, v in news_headlines_dict.items():
    #     print(k,':',v)
    for k, v in news_headlines_dict.items():

        if v == "positive":
            newssentiment.append({"sentiment":int(1),"text":k})
        elif v == "negative":
            newssentiment.append({"sentiment":int(-1),"text":k})
        else:
            newssentiment.append({"sentiment":int(0),"text":k})

    #print(newssentiment)
    newssentiment_dataframe=pd.DataFrame.from_dict(newssentiment)
    # newssentiment_dataframe.to_csv("news_headlines_sentiment.csv", encoding='utf-8', index=False)
    neg = 100 * (nnews_headlines) / ((nnews_headlines) + (pnews_headlines))
    pos = 100 * (pnews_headlines) / ((nnews_headlines) + (pnews_headlines))
    # print(len(clean_list))
    # print("\nNegative news_headliness percentage: {} %".format(neg))
    # print("Positive news_headliness percentage: {} %".format(pos))
    df123["SCORE"]=""

    for i in range(len(df123)):
        try:
            analysis = TextBlob(df123["COMMENT"][i])
            if analysis.sentiment.polarity > 0:

                df123.at[i,"SCORE"]= 1
    #             

            elif analysis.sentiment.polarity == 0:

                df123.at[i,"SCORE"]= 0

            else:

                df123.at[i,"SCORE"]= -1
        except:
            df123.at[i,"SCORE"]= 0

    df123['just_date'] = df123['LAST_COMMENT_DATE'].dt.date
    xccx=df123.sort_values(by='just_date')
    xccx=df123.dropna()
    negdf=xccx[xccx["SCORE"]==-1]
    posdf=xccx[xccx["SCORE"]==1]
    
    df123['LAST_COMMENT_DATE']=pd.to_datetime(df123["LAST_COMMENT_DATE"]).dt.strftime('%Y-%m-%d')
    positivep=df123[df123["SCORE"]==1]
    df1234=positivep.groupby(["LAST_COMMENT_DATE"])["SCORE"].count().reset_index()
    df14i=df1234[["LAST_COMMENT_DATE","SCORE"]]
    df14i['LAST_COMMENT_DATE'] = pd.to_datetime(df14i['LAST_COMMENT_DATE'])
    df15i=df14i.sort_values(by='LAST_COMMENT_DATE')
    df15i['LAST_COMMENT_DATE']=df15i['LAST_COMMENT_DATE'].astype(np.int64)/int(1e6)
    shp1=df15i[["LAST_COMMENT_DATE","SCORE"]].values.tolist()
    negativen=df123[df123["SCORE"]==-1]
    df12345=negativen.groupby(["LAST_COMMENT_DATE"])["SCORE"].count().reset_index()
    df14ii=df12345[["LAST_COMMENT_DATE","SCORE"]]
    df14ii['LAST_COMMENT_DATE'] = pd.to_datetime(df14ii['LAST_COMMENT_DATE'])
    df15ii=df14ii.sort_values(by='LAST_COMMENT_DATE')
    df15ii['LAST_COMMENT_DATE']=df15ii['LAST_COMMENT_DATE'].astype(np.int64)/int(1e6)
    shp2=df15ii[["LAST_COMMENT_DATE","SCORE"]].values.tolist()
    df123['LAST_COMMENT_DATE']=pd.to_datetime(df123["LAST_COMMENT_DATE"]).dt.strftime('%Y-%m-%d')
    negtable=negativen[["SCHOOL_NAME","STATE","CITY","USER_NAME","EMAIL","COMMENT","AUDIO_NAME","NARRATOR_NAME","PROGRAM_NAME","just_date","LAST_PRACTICE_DATE","PRACTICE_COUNT"]]   
    negtable["just_date"]=negtable["just_date"].apply(lambda x: x.strftime('%d %b %Y'))
    negtable["LAST_PRACTICE_DATE"]=negtable["LAST_PRACTICE_DATE"].dt.strftime('%d %b %Y')
    negtable1=negtable.fillna(" ")
    negtablef=pd.DataFrame(negtable1)
    postable=positivep[["SCHOOL_NAME","STATE","CITY","USER_NAME","EMAIL","COMMENT","AUDIO_NAME","NARRATOR_NAME","PROGRAM_NAME","just_date","LAST_PRACTICE_DATE","PRACTICE_COUNT"]]   
    postable["just_date"]=postable["just_date"].apply(lambda x: x.strftime('%d %b %Y'))
    postable["LAST_PRACTICE_DATE"]=postable["LAST_PRACTICE_DATE"].dt.strftime('%d %b %Y')
    postable1=postable.fillna(" ")
    postablef=pd.DataFrame(postable1)
    overalltable=df123[["SCHOOL_NAME","STATE","CITY","USER_NAME","EMAIL","COMMENT","AUDIO_NAME","NARRATOR_NAME","PROGRAM_NAME","just_date","LAST_PRACTICE_DATE","PRACTICE_COUNT"]]
    overalltable1=overalltable.dropna()
    overalltable1["just_date"]=overalltable1["just_date"].apply(lambda x: x.strftime('%d %b %Y'))
    overalltable1["LAST_PRACTICE_DATE"]=overalltable1["LAST_PRACTICE_DATE"].dt.strftime('%d %b %Y')
    overalltable11=overalltable1.fillna(" ")
    overalltable1f=pd.DataFrame(overalltable1)
    word_chart={'positivetable':postablef.values.tolist(),'negtable':negtablef.values.tolist(),'overalltable':overalltable1f.values.tolist(),'positive':shp1,'negative':shp2,"word_cloud":zxc,"label":name,"count":count,"avg_rating":round(average, 2),"donut":{"pos":round(pos, 2),"neg":round(neg, 2)}}

    return json.dumps(word_chart)


@app.route('/user_stats/<email>/<cemail>')
def com_user_stat(email,cemail):
    # mongo_uri = "mongodb://admin:" + urllib.parse.quote("F5tMazRj47cYqm33e") + "@52.41.36.115:27017/"
    # client = pymongo.MongoClient(mongo_uri)
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    collection = db.audio_track_master
    dateStr = "2020-08-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    ID=ObjectId(email)
    CID=ObjectId(cemail)
#     print(ID)
    ######################  SCHOOL PRACTICE CSY ############################################
    df1 = DataFrame(list(collection.aggregate([{
            '$match':{"$and" :[{'USER_ID.IS_DISABLED':{'$ne':'Y'}},
                   { 'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                   { 'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
                   { 'USER_ID.EMAIL_ID':{'$ne':""}},
                   { 'USER_ID._id':{"$in":[ID]}},
                   { 'CLASS_ID._id':{"$in":[CID]}},
                    {'MODIFIED_DATE':{"$gte":csy_first_date()}}
                              ]}},

            {"$match":
            {"$and" :[{'USER_ID.USER_NAME':{"$not": {'$regex' : 'test', '$options' : 'i'}}},
                    {'USER_ID.EMAIL_ID':{"$not": {'$regex' : 'test', '$options' : 'i'}}},
                    {'USER_ID.EMAIL_ID':{"$not": {'$regex' : '1gen', '$options' : 'i'}}},
                    {'USER_ID.schoolId.NAME':{"$not":{"$regex":'blocked', '$options':'i'}}}]}},
            {'$group':{'_id':{'day':{'$dayOfMonth':'$MODIFIED_DATE'}, 
                            'month':{'$month':'$MODIFIED_DATE'}},
                    'date':{'$first':'$MODIFIED_DATE'}, 
                    'Users_Practice_CSY':{'$sum':1},
                      'Mindful_Minutes':{'$sum':{'$round':
                      [{'$divide':[{'$subtract':
                          ['$CURSOR_END','$cursorStart']},60]},0]}}
                      }},
            {'$project':{'_id':0, 'Practice_date':{"$dateToString":{"format":"%Y-%m-%d","date":'$date'}}, 
                        'Users_Practice_CSY':'$Users_Practice_CSY','Mindful_Minutes':'$Mindful_Minutes'}}, 
            {"$sort":{'Practice_date':1}}])))
    
    #school_practice_history
    shp =0
    shhp2=0
    avg=0
    totalprac=0
    totalmm=0
    current_streak=0
    avg_sch_prac="0"
    max_streak=0
    daily_freq=0
    if df1.empty:
        shp =0
        shhp2=0
        avg=0
        totalprac=0
        totalmm=0
    else:
        
        df1['Practice_date'] = pd.to_datetime(df1['Practice_date'], format='%Y-%m-%d')
        r = pd.date_range(start=pd.Timestamp('2020-08-01'), end=pd.Timestamp.now())
        df22=df1.set_index('Practice_date').reindex(r).fillna(0.0).rename_axis('Practice_date').reset_index()
        df22['stt'] = np.where(df22['Users_Practice_CSY']!= 0.0,"win","loss")
        df22['Streak'] = df22['stt'].groupby((df22['stt'] != df22['stt'].shift()).cumsum()).cumcount() + 1
        xcvb=df22[df22["stt"]!="loss"]
        max_streak=max(xcvb["Streak"])
        last=df22.iloc[-1,:]
        current_streak=0
        avg_sch_prac="0"
        if last["stt"]=="loss" :
            current_streak=0
        else :
            current_streak=last["Streak"]
        daily_freq=last["Users_Practice_CSY"]
        
        df22['Practice_date'] = pd.to_datetime(df22['Practice_date'])
        df5=df22.sort_values(by='Practice_date')
        df5['Practice_date']=df5['Practice_date'].astype(np.int64)/int(1e6)
        shp=df5[["Practice_date","Users_Practice_CSY"]].values.tolist()
        shhp2=df5[["Practice_date","Mindful_Minutes"]].values.tolist()
        avg=str(round(df1["Mindful_Minutes"].mean()))
        totalmm=str(sum(df1["Mindful_Minutes"]))
        totalprac=str(sum(df1["Users_Practice_CSY"]))
    temp={'data':{"current_streak":str(current_streak),"max_streak":str(max_streak),"avg_sch_prac":str(avg_sch_prac),"daily_freq":str(daily_freq),'prac_chart':shp,"mm_chart":shhp2,"average_daily_min":avg,"total_prac":totalprac,"total_mm":totalmm}}
    return json.dumps(temp)



#=======mobileappapi_sadhna

@app.route('/userpracticecards',methods=['GET'])
def User_practice_cards():
    import flask
    from flask import request    
    userid = flask.request.args.get('userid')
    duration = flask.request.args.get('duration')
    
    # username = urllib.parse.quote_plus('adminIE')
    # password = urllib.parse.quote_plus('CtZh5Nqp8Qn9LHUDx2GH')
    # client = MongoClient("mongodb://%s:%s@54.184.165.106:27017/" % (username, password))
    # db=client.compass_beta

    client = MongoClient('mongodb://admin:F5tMazRj47cYqm33e@52.41.36.115:27017/')
    db=client.compass

    collection = db.audio_track_master
    from datetime import datetime
    from datetime import timedelta

    today1= datetime.utcnow()
#     tod1= today1- timedelta(hours=6)
    
    duration=duration.lower()
    if duration == 'week':

        d=7
    elif duration=='month':
        
        d=30
    else:
        d=365
     
    start1= today1-timedelta(days=d)
   

    df=DataFrame(list(collection.aggregate([
        {"$match":{"$and":[
    #              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
#                 { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
#                 { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

             
            {'USER_ID._id':{'$eq':ObjectId(""+userid+"")}},
            
                        {'MODIFIED_DATE':{'$gte':start1}}, 
                 {'USER_ID.EMAIL_ID':{'$ne':''}},        
            #  {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            #  {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
#                            {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
#                              {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
        ]}},

      { "$project": { '_id':1,'USER_ID':'$USER_ID._id','CURSOR_END':1,'cursorStart':1,
#                      'status':{'$cond':{'if':{'$match':{'input':'$cursorStart','exists':False}},'then':0,
#                                     'else':1 }}}},

        "status": {
          "$cond": { "if": { "$regexMatch": { 
                                    "input": "$PROGRAM_AUDIO_ID.AUDIO_DAY",
                                    "regex": 'bonus','options': "i"  }}


              , 
          "then": 'Bonus', "else": {
             "$cond": { "if": { "$regexMatch": { 
                                    "input": "$PROGRAM_AUDIO_ID.AUDIO_DAY",
                                    "regex": "sound",'options': "i" }}, 
             "then": 'Sound', "else": 'Daily'
             }}}}}}  ,
#         {'$group':{'_id':'$status','count':{'$sum':1},'CEND':{'$first':'$CURSOR_END'},'CSTART':{'$first':'$cursorStart'},'MINDFUL_MINUTES':{'$sum':{'$round':[{'$divide':[{'$subtract':['$CURSOR_END','$cursorStart']}, 60]},0]}} }} ,
#         {'$project':{'_id':1, 'practice_sessions':'$count','CEND':1,'CSTART':1,'MINDFUL_MINUTES':'$MINDFUL_MINUTES'}}

    ])))
    if df.empty is True:
        data={'Result':0}
    else:
        df
        df=df.fillna(0)
        columns=df.columns
    #     print(columns)
        if not 'cursorStart' in columns :
            df['cursorStart']=0
        else:
            df
        df['MINDFUL_MINUTES']=round((df['CURSOR_END']-df['cursorStart'])/60)
        df=df.groupby('status').agg(MINDFUL_MINUTES=('MINDFUL_MINUTES', 'sum'),practice_sessions =('USER_ID', 'count')).reset_index()

        df.rename(columns = { 'status': '_id'}, inplace = True)





        if ((d==7) and (df.empty)):
            sdate = start1   # start date
            edate = today1 
            delta = edate - sdate       # as timedelta

            days=[]
            dates=[]

            for i in range(delta.days):
                day = sdate + timedelta(days=i)            
                dates.append(day)
                days.append(day.strftime('%A'))
            days={'day_of_week':days,'Dates':dates,'MINDFUL_MINUTES':0,
                 'Practice':0
                 }
            df=pd.DataFrame(days)

            df['Dates'] = df['Dates'].dt.strftime('%Y-%m-%d')
        #     dff=pd.merge(df_chart,df,on='day_of_week', how= 'outer')
        #     dff=dff.fillna(0)
            dff=df.copy()
            dff = dff.astype({"Practice": int, "MINDFUL_MINUTES": int})
            dff=dff.sort_values(by=['Dates'])
            dff['Date'] = pd.to_datetime(dff['Dates'], errors='coerce')
            days_name=dff['day_of_week'].tolist()
            Sessions=dff['Practice'].tolist()
            Mindfulmin=dff['MINDFUL_MINUTES'].tolist()
            dataa={'Label':days_name, 'Sessions':Sessions, 'Mindful_Minutes':Mindfulmin}


            temp={'Total_Session': '0', 'Mindful_Minutes':'0','Daily_Practices':'0','Transition_Practices':'0',
                      'Sound_Practices':'0','Daily_mindful':'0','Transition_mindful':'0','Sound_mindful':'0','Daily_Average':'0',
                     'Daily_Average_mindful':'0','chart_data':dataa}
            return json.dumps(temp)

    #     #<<<<<<<<<<<<--------------------->>>>>>>>>>>>>>

        elif ((d==30) and (df.empty)):        
            sdate = start1   # start date
            edate = today1 
            delta = edate - sdate       # as timedelta
            days=[]
            dates=[]
            for i in range(delta.days):
                day = sdate + timedelta(days=i)            
                dates.append(day)
                days.append(day.strftime('%A'))
            days={'Date':dates,'MINDFUL_MINUTES':0,'Practice':0}
            df=pd.DataFrame(days)
            df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')
            df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
            # dff=pd.merge(df_chart,df,on='Date', how= 'outer')
            # dff=dff.fillna(0)
            dff=df
            dff = dff.astype({"Practice": int, "MINDFUL_MINUTES": int})
            dff=dff.sort_values(by=['Date'])
            dff['Date'] = pd.to_datetime(dff['Date'], errors='coerce')
            dff['Date'] = dff['Date'].astype(str)
            days_name=dff['Date'].tolist()
            Sessions=dff['Practice'].tolist()
            Mindfulmin=dff['MINDFUL_MINUTES'].tolist()
            dataa={'Label':days_name, 'Sessions':Sessions, 'Mindful_Minutes':Mindfulmin}

            temp={'Total_Session': '0', 'Mindful_Minutes':'0','Daily_Practices':'0','Transition_Practices':'0',
                      'Sound_Practices':'0','Daily_mindful':'0','Transition_mindful':'0','Sound_mindful':'0','Daily_Average':'0',
                     'Daily_Average_mindful':'0','chart_data':dataa}

            return json.dumps(temp)

        #<<<<<<<<<<<<<------------------------->>>>>>>>>>>>>>>>>>>>>

        elif ((d!=30) and (d!=7) and (df.empty)):
            sdate = start1   # start date
            edate = today1 
            delta = edate - sdate       # as timedelta
            yesturday= today1-timedelta(days=1)
    #         print(yesturday)
            days=[]
            dates=[]

            for i in range(delta.days):
                day = sdate + timedelta(days=i)            
                dates.append(day)
                days.append(day.strftime('%B'))

            daysss={'Month':days,'Date':dates,'MINDFUL_MINUTES':0,'Practice':0}
            df=pd.DataFrame(daysss)
    #         df1=df.groupby['Month'].count()
            df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')
            df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
            dff=df
    #         dff=pd.merge(df_chart,df,on='Date', how= 'outer')
    #         dff=dff.fillna(0)
            dff = dff.astype({"Practice": int, "MINDFUL_MINUTES": int})

            dff['Date'] = pd.to_datetime(dff['Date'], errors='coerce')
            dff=dff.sort_values(by=['Date'])
            dff=dff.groupby(['Month']).sum()
            dff=dff.reset_index()
            months=pd.date_range(start1,yesturday ,
                  freq='MS').strftime("%B").tolist()

    #         df1=pd.DataFrame({'Month_y':months})
    #         dff=pd.merge(df1,dff, on='Month_y', how='left')


            days_name=dff['Month'].tolist()
            Sessions=dff['Practice'].tolist()
            Mindfulmin=dff['MINDFUL_MINUTES'].tolist()
            dataa={'Label':days_name, 'Sessions':Sessions, 'Mindful_Minutes':Mindfulmin}

            temp={'Total_Session': '0', 'Mindful_Minutes':'0','Daily_Practices':'0','Transition_Practices':'0',
                      'Sound_Practices':'0','Daily_mindful':'0','Transition_mindful':'0','Sound_mindful':'0','Daily_Average':'0',
                     'Daily_Average_mindful':'0','chart_data':dataa}

            return json.dumps(temp)


        else:        
            df = df.rename(columns={"_id": "Type"})
            Type=['Daily','Transitions','Sound']
            df1=pd.DataFrame(Type)
            df1.columns =['Type']
            dataframe=pd.merge(df,df1, on='Type',how='outer')
            dff=dataframe.fillna(0)
            dff = dff.astype({"practice_sessions": int, "MINDFUL_MINUTES": int})
            dff=dff.set_index('Type')
            dff=dff.T
    #         dff=dff.reset_index()
            df_total=DataFrame(list(collection.aggregate([
                {"$match":{"$and":[
        #              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
    #                     { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
    #                     { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

                        {'USER_ID._id':{'$eq':ObjectId(""+userid+"")}},
                            {'MODIFIED_DATE':{'$gte':start1}}, 
                         {'USER_ID.EMAIL_ID':{'$ne':''}},        
                    #  {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    #  {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
    #                                {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
    #                                  {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
                ]}},
                { "$project": { '_id':1,'USER_ID':'$USER_ID._id','CURSOR_END':1,'cursorStart':1}}


    #            {'$group':{'_id':{},'pc':{'$sum':1},'MINDFUL_MINUTES':{'$sum':{'$round':[{'$divide':[{'$subtract':['$CURSOR_END','$cursorStart']}, 60]},0]}} ,
    #                     }} ,
    #             {'$project':{'_id':'','Practice':'$pc','MINDFUL_MINUTES':'$MINDFUL_MINUTES'}}
            ])))

            df_total=df_total.fillna(0)
            columns=df_total.columns
        #     print(columns)
            if not 'cursorStart' in columns :
                df_total['cursorStart']=0
            else:
                df_total
            df_total['MINDFUL_MINUTES']=round((df_total['CURSOR_END']-df_total['cursorStart'])/60)
            df_total=df_total.groupby('USER_ID').agg(MINDFUL_MINUTES=('MINDFUL_MINUTES', 'sum'),Practice =('USER_ID', 'count')).reset_index()


            Average = round(df_total['Practice']/d)
            df__=df_total.assign(Average = Average)
            Average_mindful = round(df_total['MINDFUL_MINUTES']/d)
            df_f=df__.assign(Average_mindful = Average_mindful)
            df_total = df_f.astype({"Practice": int, "MINDFUL_MINUTES": int,"Average_mindful":int,"Average":int})


            Session=0
            try:
                Session=df_total['Practice'][0]
            except:
                Session=0

            Average=0
            try:
                Average=df_total['Average'][0]
            except:
                Average=0



            Average_mindful=0
            try:
                Average_mindful=df_total['Average_mindful'][0]
            except:
                Average_mindful=0

            Mindful=0
            try:
                Mindful=df_total['MINDFUL_MINUTES'][0]
            except:
                Mindful=0

            Daily=0
            try:
                Daily=dff['Daily'][1]
            except:
                Daily=0

            Bonus=0
            try:
                Bonus=dff['Bonus'][1]
            except:
                Bonus=0

            Sound=0
            try:
                Sound=dff['Sound'][1]
            except:
                Sound=0

            Daily_m=0
            try:
                Daily_m=dff['Daily'][0]
            except:
                Daily_m=0

            Bonus_m=0
            try:
                Bonus_m=dff['Bonus'][0]
            except:
                Bonus_m=0

            Sound_m=0
            try:
                Sound_m=dff['Sound'][0]
            except:
                Sound_m=0


            df_chart=DataFrame(list(collection.aggregate([
                {"$match":{"$and":[
        #              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
    #                     { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
    #                     { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

                       {'USER_ID._id':{'$eq':ObjectId(""+userid+"")}},
                            {'MODIFIED_DATE':{'$gte':start1}}, 
                         {'USER_ID.EMAIL_ID':{'$ne':''}},        
                    #  {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    #  {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
    #                                {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
    #                                  {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
                ]}},
               { "$project": { '_id':1,'Date':{"$dateToString": { "format": "%Y-%m-%d", "date": '$MODIFIED_DATE'}},'USER_ID':'$USER_ID._id','CURSOR_END':1,'cursorStart':1}}

    #            {'$group':{'_id':{"$dateToString": { "format": "%Y-%m-%d", "date": "$MODIFIED_DATE"}},'pc':{'$sum':1},'MINDFUL_MINUTES':{'$sum':{'$round':[{'$divide':[{'$subtract':['$CURSOR_END','$cursorStart']}, 60]},0]}} }} ,
    #             {'$project':{'_id':1,'Practice':'$pc','MINDFUL_MINUTES':'$MINDFUL_MINUTES'}}
            ])))

            df_chart=df_chart.fillna(0)
            columns=df_chart.columns
        #     print(columns)
            if not 'cursorStart' in columns :
                df_chart['cursorStart']=0
            else:
                df_chart
            df_chart['MINDFUL_MINUTES']=round((df_chart['CURSOR_END']-df_chart['cursorStart'])/60)
            df_chart=df_chart.groupby('Date').agg(MINDFUL_MINUTES=('MINDFUL_MINUTES', 'sum'),Practice =('USER_ID', 'count')).reset_index()

            df_chart.rename(columns = { 'status': '_id'}, inplace = True)


            df_chart=df_chart.rename(columns={'_id':'Date'})
            df_chart['Date'] = pd.to_datetime(df_chart.Date, format='%Y-%m-%d')
            df_chart['Date'] = df_chart['Date'].dt.strftime('%Y-%m-%d')
            df_chart['Date'] = pd.to_datetime(df_chart['Date'], errors='coerce')
            df_chart['day_of_week'] = df_chart['Date'].dt.day_name()
            df_chart['Month'] = df_chart['Date'].dt.month_name()
            df_chart = df_chart.astype({"Practice": int, "MINDFUL_MINUTES": int})


            if duration== 'week':

                sdate = start1   # start date
                edate = today1 
                delta = edate - sdate       # as timedelta

                days=[]
                dates=[]

                for i in range(delta.days):
                    day = sdate + timedelta(days=i)            
                    dates.append(day)
                    days.append(day.strftime('%A'))
                days={'day_of_week':days,'Dates':dates}
                df=pd.DataFrame(days)
                df['Dates'] = df['Dates'].dt.strftime('%Y-%m-%d')
                dff=pd.merge(df_chart,df,on='day_of_week', how= 'outer')
                dff.Date.fillna(dff.Dates, inplace=True)
                dff=dff.fillna(0)
                
#     #             dff = dff.astype({"Practice": int, "MINDFUL_MINUTES": int})
                dff['Date'] = pd.to_datetime(dff['Date'], errors='coerce')
                dff=dff.sort_values(by=['Date'])
                days_name=dff['day_of_week'].tolist()
                Sessions=dff['Practice'].tolist()
                Mindfulmin=dff['MINDFUL_MINUTES'].tolist()
                dataa={'Label':days_name, 'Sessions':Sessions, 'Mindful_Minutes':Mindfulmin}


            elif duration == 'month':

                sdate = start1   # start date
                edate = today1 
                delta = edate - sdate       # as timedelta

                days=[]
                dates=[]

                for i in range(delta.days):
                    day = sdate + timedelta(days=i)            
                    dates.append(day)
                    days.append(day.strftime('%A'))
                days={'Date':dates}
                df=pd.DataFrame(days)


                df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')
                df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
                dff=pd.merge(df_chart,df,on='Date', how= 'outer')
                dff=dff.fillna(0)
    #             dff = dff.astype({"Practice": int, "MINDFUL_MINUTES": int})
                dff['Date'] = pd.to_datetime(dff['Date'], errors='coerce')
                dff=dff.sort_values(by=['Date'])
                dff['Date'] = dff['Date'].astype(str)
                days_name=dff['Date'].tolist()
                Sessions=dff['Practice'].tolist()
                Mindfulmin=dff['MINDFUL_MINUTES'].tolist()
                dataa={'Label':days_name, 'Sessions':Sessions, 'Mindful_Minutes':Mindfulmin}

            else:

                sdate = start1   # start date
                edate = today1 
                delta = edate - sdate       # as timedelta
                yesturday= today1-timedelta(days=1)
                print(yesturday)
                days=[]
                dates=[]

                for i in range(delta.days):
                    day = sdate + timedelta(days=i)            
                    dates.append(day)
                    days.append(day.strftime('%B'))

                daysss={'Month':days,'Date':dates}
                df=pd.DataFrame(daysss)
        #         df1=df.groupby['Month'].count()
                df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')
                df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
                dff=pd.merge(df_chart,df,on='Date', how= 'outer')
                dff=dff.fillna(0)
    #             dff = dff.astype({"Practice": int, "MINDFUL_MINUTES": int})

                dff['Date'] = pd.to_datetime(dff['Date'], errors='coerce')
                dff=dff.sort_values(by=['Date'])
                dff=dff.groupby(['Month_x']).sum()
                dff=dff.reset_index()
                months=pd.date_range(start1,yesturday ,
                      freq='MS').strftime("%B").tolist()

                df1=pd.DataFrame({'Month_x':months})
                dff=pd.merge(df1,dff, on='Month_x', how='left')
                dff=dff.fillna(0)

                days_name=dff['Month_x'].tolist()
                Sessions=dff['Practice'].tolist()
                Mindfulmin=dff['MINDFUL_MINUTES'].tolist()
                dataa={'Label':days_name, 'Sessions':Sessions, 'Mindful_Minutes':Mindfulmin}


        data={'Result':'1','Total_Session': str(Session), 'Mindful_Minutes':str(Mindful),'Daily_Practices':str(Daily),'Transition_Practices':str(Bonus),
                  'Sound_Practices':str(Sound),'Daily_mindful':str(Daily_m),'Transition_mindful':str(Bonus_m),'Sound_mindful':str(Sound_m),'Daily_Average':str(Average),
                 'Daily_Average_mindful':str(Average_mindful),'chart_data':dataa}



    return json.dumps(data)

    
    



@app.route('/bubble_dataframe.csv')
def buble_district12():
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.user_master
    qraaa=[
        {"$match":{'$and':[
        {'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" } )}},
        {'DISTRICT_ID':{'$exists':1}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'CREATED_DATE':{"$gte":myDatetime}},
        {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'IS_DISABLED':{"$ne":'Y'}}, {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$DISTRICT_ID._id',"month":{"$month": "$CREATED_DATE"}},
        'NAME_DISTRICT':{'$first':'$DISTRICT_ID.DISTRICT_NAME'},
        'usercount':{'$sum':1}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","MONTH":"$_id.month","NAME_DISTRICT":1,"usercount":1,
                        }}]
    merge11=list(collection.aggregate(qraaa))
    df1=pd.DataFrame(merge11)
    #######################################################
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.user_master
    qra=[
        {"$match":{'$and':[
        {'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" } )}},
        {'DISTRICT_ID':{'$exists':1}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'CREATED_DATE':{"$lt":myDatetime}},
        {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'IS_DISABLED':{"$ne":'Y'}}, {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$DISTRICT_ID._id'},
        'NAME_DISTRICT':{'$first':'$DISTRICT_ID.DISTRICT_NAME'},
        'usercount':{'$sum':1}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"usercount":1,
                        }}]
    merge11233=list(collection.aggregate(qra))
    dfCV=pd.DataFrame(merge11233)
    #########################################################################
    df1=df1.sort_values(by=['NAME_DISTRICT'], ascending=True)
    x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    x["usercount"].sum()
    dislist=list(set(df1["NAME_DISTRICT"]))
    df2=df1[["NAME_DISTRICT","MONTH","usercount"]]
    overall=pd.DataFrame(columns=["NAME_DISTRICT","MONTH","usercount"])
    # dislist
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["NAME_DISTRICT"]==k]
        df45.reset_index()
        for i in range(1,13):
            if i in list(df45["MONTH"]):
                pass
    #              print("month_present",i)
            else:
                df45.loc[i+len(df45)] = [k] +[i]+[0]
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).reset_index()
        df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).sum().groupby(level=0).cumsum().reset_index()
    #     print(df46)
        sorted_df =df46.sort_values(by=['MONTH'], ascending=True)
        sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
    buubleusercount = pd.concat(result)
    ######family ########
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.user_master
    qraaa=[
        {"$match":{'$and':[
        {'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" } )}},
        {'DISTRICT_ID':{'$exists':1}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'CREATED_DATE':{"$gte":myDatetime}},
        {'ROLE_ID._id':{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'IS_DISABLED':{"$ne":'Y'}}, {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$DISTRICT_ID._id',"month":{"$month": "$CREATED_DATE"}},
        'NAME_DISTRICT':{'$first':'$DISTRICT_ID.DISTRICT_NAME'},
        'famcount':{'$sum':1}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","MONTH":"$_id.month","NAME_DISTRICT":1,"famcount":1,
                        }}]
    merge11=list(collection.aggregate(qraaa))
    df1=pd.DataFrame(merge11)
    #######################################################
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.user_master
    qra=[
        {"$match":{'$and':[
        {'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" } )}},
        {'DISTRICT_ID':{'$exists':1}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'CREATED_DATE':{"$lt":myDatetime}},
        {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'IS_DISABLED':{"$ne":'Y'}}, {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$DISTRICT_ID._id'},
        'NAME_DISTRICT':{'$first':'$DISTRICT_ID.DISTRICT_NAME'},
        'usercount19':{'$sum':1}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"usercount19":1,
                        }}]
    merge11233=list(collection.aggregate(qra))
    dfCV=pd.DataFrame(merge11233)
    #########################################################################
    df1=df1.sort_values(by=['NAME_DISTRICT'], ascending=True)
    x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    x["famcount"].sum()
    dislist=list(set(df1["NAME_DISTRICT"]))
    df2=df1[["NAME_DISTRICT","MONTH","famcount"]]
    overall=pd.DataFrame(columns=["NAME_DISTRICT","MONTH","famcount"])
    # dislist
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["NAME_DISTRICT"]==k]
        df45.reset_index()
        for i in range(1,13):
            if i in list(df45["MONTH"]):
                pass
    #              print("month_present",i)
            else:
                df45.loc[i+len(df45)] = [k] +[i]+[0]
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).reset_index()
        df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).sum().groupby(level=0).cumsum().reset_index()
    #     print(df46)
        sorted_df =df46.sort_values(by=['MONTH'], ascending=True)
        sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
    buublefamily = pd.concat(result)
    buubleusercount["idu"]=buubleusercount["NAME_DISTRICT"]+buubleusercount["MONTH"].map(str)
    buublefamily["idf"]=buublefamily["NAME_DISTRICT"]+buublefamily["MONTH"].map(str)
    mergeucfc=pd.merge(buubleusercount, buublefamily, how='left', left_on='idu', right_on='idf')
    mergeucfc=mergeucfc.fillna(0)
    mergeucfc1=pd.merge(mergeucfc, dfCV, how='left', left_on='NAME_DISTRICT_x', right_on='NAME_DISTRICT')
    mergeucfc12=mergeucfc1.fillna(0)
    mergeucfc12["totaluser"]=mergeucfc12["usercount"]+mergeucfc12["usercount19"]
    finmerge=mergeucfc12[["NAME_DISTRICT_x","MONTH_x","idu","totaluser","famcount"]]
    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$gte":myDatetime}},
        {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.DISTRICT_ID._id',"year":{"$year": "$MODIFIED_DATE"},"month":{"$month": "$MODIFIED_DATE"}},
        'NAME_DISTRICT':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'},
        'PRACTICE':{'$sum':1},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},
        'Mindful_Minutes':{"$sum":{"$round":[{"$divide":[{"$subtract":['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","MONTH":"$_id.month","YEAR":"$_id.year","NAME_DISTRICT":1,"PRACTICE":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"},
                       "Mindful_Minutes":1 }}]
    merge121=list(collection.aggregate(qra12))
    df1=pd.DataFrame(merge121)
    df1=df1.sort_values(by=['NAME_DISTRICT'], ascending=True)
    # print(df1)
    # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    dislist=list(set(df1["NAME_DISTRICT"]))
    df2=df1[["NAME_DISTRICT","MONTH","ACTIVE_USER"]]
    overall=pd.DataFrame(columns=["NAME_DISTRICT","MONTH","ACTIVE_USER"])
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["NAME_DISTRICT"]==k]
        df45.reset_index()
        for i in range(1,13):
            if i in list(df45["MONTH"]):
                pass
    #              print("month_present",i)
            else:
                df45.loc[i+len(df45)] = [k] +[i]+[0]
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).reset_index()
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).sum().groupby(level=0).cumsum().reset_index()
    #     print(df46)
        sorted_df =df45.sort_values(by=['MONTH'], ascending=True)
        sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
    buubleactuser = pd.concat(result)
    buubleactuser["acuid"]=buubleactuser["NAME_DISTRICT"]+buubleactuser["MONTH"].map(str)
    # buubleactuser
    finmergeu=pd.merge(finmerge, buubleactuser, how='left', left_on='idu', right_on='acuid')
    ###ACTIVE FAMILY
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$gte":myDatetime}},
        {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.DISTRICT_ID._id',"year":{"$year": "$MODIFIED_DATE"},"month":{"$month": "$MODIFIED_DATE"}},
        'NAME_DISTRICT':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'},
        'PRACTICE':{'$sum':1},
        "ACTIVE_FAM":{'$addToSet':"$USER_ID._id"},
        'Mindful_Minutes':{"$sum":{"$round":[{"$divide":[{"$subtract":['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","MONTH":"$_id.month","YEAR":"$_id.year","NAME_DISTRICT":1,"PRACTICE":1,"ACTIVE_FAM":{"$size":"$ACTIVE_FAM"},
                       "Mindful_Minutes":1 }}]
    merge121=list(collection.aggregate(qra12))
    df1=pd.DataFrame(merge121)
    df1=df1.sort_values(by=['NAME_DISTRICT'], ascending=True)
    # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    dislist=list(set(df1["NAME_DISTRICT"]))
    df2=df1[["NAME_DISTRICT","MONTH","ACTIVE_FAM"]]
    overall=pd.DataFrame(columns=["NAME_DISTRICT","MONTH","ACTIVE_FAM"])
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["NAME_DISTRICT"]==k]
        df45.reset_index()
        for i in range(1,13):
            if i in list(df45["MONTH"]):
                pass
    #              print("month_present",i)
            else:
                df45.loc[i+len(df45)] = [k] +[i]+[0]
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).reset_index()
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).sum().groupby(level=0).cumsum().reset_index()
    #     print(df46)
        sorted_df =df45.sort_values(by=['MONTH'], ascending=True)
        sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
    buubleactfam = pd.concat(result)
    buubleactfam["acuidf"]=buubleactfam["NAME_DISTRICT"]+buubleactfam["MONTH"].map(str)
    finmergeuf=pd.merge(finmergeu, buubleactfam, how='left', left_on='idu', right_on='acuidf')
    finmergeuf["USER ENGAGEMENT"]=round((finmergeuf["ACTIVE_USER"]/finmergeuf["totaluser"])*100)
    finmergeuf["FAMILY ENGAGEMENT"]=round((finmergeuf["ACTIVE_FAM"]/finmergeuf["famcount"])*100)
    finmergeufo=finmergeuf[["NAME_DISTRICT_x","MONTH_x","USER ENGAGEMENT","FAMILY ENGAGEMENT"]]
    finmergeufo=finmergeufo.fillna(0)
    finmergeufo=finmergeufo.loc[:,~finmergeufo.columns.duplicated()]
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    # dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
    #     {'MODIFIED_DATE':{"$gte":myDatetime}},
    #     {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.DISTRICT_ID._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'},
        'PRACTICE':{'$sum':1},
                  }},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"PRACTICE":1 }}]
    merge1211=list(collection.aggregate(qra12))
    df1111=pd.DataFrame(merge1211)
    df1111=df1111.sort_values(by=['NAME_DISTRICT'], ascending=True)
    DISPRACTO=df1111[["NAME_DISTRICT","PRACTICE"]]
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    # dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.user_master
    qra12=[
        {"$match":{'$and':[{'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" } )}},
        {'DISTRICT_ID':{'$exists':1}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
    #     {'MODIFIED_DATE':{"$gte":myDatetime}},
    #     {'ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'IS_DISABLED':{"$ne":'Y'}}, {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$DISTRICT_ID._id'},
        'NAME_DISTRICT':{'$first':'$DISTRICT_ID.DISTRICT_NAME'},
        "SCHOOL COUNT":{'$addToSet':"$schoolId._id"},
                  }},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"SCHOOL COUNT":{"$size":"$SCHOOL COUNT"} }}]
    merge1211=list(collection.aggregate(qra12))
    df1111=pd.DataFrame(merge1211)
    df1111=df1111.sort_values(by=['NAME_DISTRICT'], ascending=True)
    DISSCHOOL=df1111[["NAME_DISTRICT","SCHOOL COUNT"]]
    finmergeufosch=pd.merge(finmergeufo, DISSCHOOL, how='left', left_on='NAME_DISTRICT_x', right_on='NAME_DISTRICT')
    finmergeufoschprac=pd.merge(finmergeufosch, DISPRACTO, how='left', left_on='NAME_DISTRICT_x', right_on='NAME_DISTRICT')
    final_buuble_data=finmergeufoschprac[["NAME_DISTRICT_x","MONTH_x","USER ENGAGEMENT","FAMILY ENGAGEMENT","SCHOOL COUNT","PRACTICE"]]
    finaldata=final_buuble_data.rename(columns={"NAME_DISTRICT_x": "DISTRICT_NAME","USER ENGAGEMENT":"USER_ENGAGEMENT","SCHOOL COUNT":"SCHOOL_COUNT", "FAMILY ENGAGEMENT":"FAMILY_ENGAGEMENT","MONTH_x": "MONTH"})
    finaldata=finaldata.loc[:,~finaldata.columns.duplicated()]
    # findict=finaldata.T.to_dict().values()
    # response = make_response(finaldata.to_csv())
    # response.headers['Content-Type'] = 'text/csv'
    li = [finaldata.columns.values.tolist()] + finaldata.values.tolist() 
    sheet = pe.Sheet(li)
    print(sheet,"sheet")
    print(type(sheet),"sheet type")
    ioO = io.StringIO()
    sheet.save_to_memory("csv", ioO)
    output = make_response(ioO.getvalue())
    # output.headers["Content-Disposition"] = "attachment; filename=export.csv"
    output.headers["Content-type"] = "text/csv"
    return output

@app.route('/campaignstatapi')
def campaignapi():
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    collection = db.campaign_data
    query=[{'$match':{'$and':[
    # //     { 'FIRST_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
    # //                    {'EMAIL':{"$not":{"$regex":"test",'$options':'i'}}},
    # //                      {'EMAIL':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //                      {'CAMPAIGN_ID.CAMPAIGN_DESC':{"$not":{"$regex":"1gen",'$options':'i'}}},
                         {'CAMPAIGN_ID.CAMPAIGN_DESC':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'IS_PAYMENT_SUCCESS':'Y'}        
          ]}},
          {'$group':{
              '_id':'$CAMPAIGN_ID._id',
              'CAMPAIGN_NAME':{'$first':'$CAMPAIGN_ID.H_TEXT'},
              'CREATED_DATE':{'$first':'$CAMPAIGN_ID.CREATED_DATE'},
                  'RAISED_AMOUNT':{'$sum':'$AMOUNT'},
                  'TARGET_AMOUNT':{'$first':'$CAMPAIGN_ID.TOTAL_TARGET_AMOUNT'},
              }}]
    campaign_data=list(collection.aggregate(query))
    campaign_data_df=pd.DataFrame(campaign_data)
    collection2 = db.campaign_detail
    query2=[{"$match":{
             '$and':[{ 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
              {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
              {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
              {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
              {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
              {'USER_ID.DEVICE_USED':{"$regex":'webapp','$options':'i'}},
              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
              {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
              {'CAMPAIGN_DESC':{"$not":{"$regex":"test",'$options':'i'}}},
              {'CAMPAIGN_DESC':{"$not":{"$regex":"test",'$options':'i'}}}
              ]}},
              {'$project':{
                  'RAISED_AMOUNT':'$RAISED_AMOUNT',
                  'SCHOOL_ID':'$SCHOOL_ID._id',
                  'SCHOOL_NAME':'$SCHOOL_ID.NAME',
                  'CITY':'$SCHOOL_ID.CITY',
                  'STATE':'$SCHOOL_ID.STATE',
                  'USER_ID':'$USER_ID._id',
                  'USER_NAME':'$USER_ID.USER_NAME',
                  'USER_EMAIL':'$USER_ID.EMAIL_ID',
                  "IMAGE_NAME":"$IMAGE_NAME"
                  }
                  }]
    campaign_detail=list(collection2.aggregate(query2))
    campaign_detail_df=pd.DataFrame(campaign_detail)
    collection3 = db.subscription_master
    query3=[{"$match":{
             '$and':[{ 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
              {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
              {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
              {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
              {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
              {'USER_ID.DEVICE_USED':{"$regex":'webapp','$options':'i'}},
              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
              {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
              {'IS_PAYMENT_SUCCESS':'Y'},
              {'USER_ID._id':{
                  '$in':
                  db.campaign_detail.distinct('USER_ID._id')
                  }}
              ]}},
              {'$project':{
                  '_id':0,
                  'SCHOOL_ID':'$USER_ID.schoolId._id',
                  'LAST_PAYMENT_AMOUNT':'$LAST_PAYMENT_AMOUNT',
                  "LOGO":"$USER_ID.schoolId.LOGO"
                 }}]
    already_paid=list(collection3.aggregate(query3))
    already_paid_amount_df=pd.DataFrame(already_paid)
    #     print(already_paid_amount_df)

    table1=campaign_data_df.merge(campaign_detail_df,on='_id',how='inner')
    table2=table1.merge(already_paid_amount_df,how='left',on='SCHOOL_ID')
    table2['TOTAL_RAISED_AMOUNT']=table2.RAISED_AMOUNT_x+table2.LAST_PAYMENT_AMOUNT
    table2['LEFT_AMOUNT']=table2.TARGET_AMOUNT-table2.TOTAL_RAISED_AMOUNT
    final_table=table2.copy()
    final_table['_id']=final_table['_id'].astype('str')
    final_table2=final_table[["_id","CAMPAIGN_NAME","TOTAL_RAISED_AMOUNT","SCHOOL_NAME","LEFT_AMOUNT","TARGET_AMOUNT","IMAGE_NAME","LOGO"]]
    final_table3=final_table2.fillna("no info available")
    asd=[]
    for i in range(len(final_table3)):
        asd.append({"CAMPAIGN_ID":[final_table3["_id"][i]],
                    "CAMPAIGN_NAME":[final_table3["CAMPAIGN_NAME"][i]],
                     "RAISED_AMOUNT":[final_table3["TOTAL_RAISED_AMOUNT"][i]],
                     "LEFT_AMOUNT":[final_table3["LEFT_AMOUNT"][i]],
                     "TARGET_AMOUNT":[final_table3["TARGET_AMOUNT"][i]],
                     "IMAGE_NAME":[final_table3["IMAGE_NAME"][i]],
                     "LOGO":[final_table3["LOGO"][i]],
                   "SCHOOL_NAME":[final_table3["SCHOOL_NAME"][i]]})
    return json.dumps({'data':asd})



@app.route('/school_search_id')

def school_search_id():
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    collection = db.user_master
    query=[
    {"$match":{
             '$and':[{ 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
              {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
              {'IS_DISABLED':{"$ne":'Y'}},
              {'IS_BLOCKED':{"$ne":'Y'}},
#               {'IS_ADMIN':'Y'},
    # //           {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
    # //           {'DEVICE_USED':{"$regex":'webapp','$options':'i'}},
              {'schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
              {'schoolId.BLOCKED_BY_CAP':{'$exists':0}}]}},
     {'$group':{
         '_id':'$schoolId._id',
         'NAME':{'$first':'$schoolId.NAME'},
         'CITY':{'$first':'$schoolId.CITY'},
         'STATE':{'$first':'$schoolId.STATE'},
         'COUNTRY':{'$first':'$schoolId.COUNTRY'}
         }}]
    schools=list(collection.aggregate(query))
    schools_info=pd.DataFrame(schools)
    dffinalnew=schools_info.copy()
    dffinalnew['CITY']=dffinalnew['CITY'].str.upper()
    dffinalnew['STATE']=dffinalnew['STATE'].str.upper()
    dffinalnew['concatenate']=dffinalnew['NAME'].map(str)+' , '+dffinalnew['CITY'].map(str)+' , '+dffinalnew['STATE'].map(str)
    dffinalnew['_id']=dffinalnew['_id'].astype('str')
    d=[]  
    for i in range(len(dffinalnew['_id'])):

        x={ "value":dffinalnew['concatenate'][i],"label":dffinalnew['concatenate'][i],"desc":dffinalnew['_id'][i]}
#        print(x,"hello")
        d.append(x)
    
    return json.dumps({'data':d})


@app.route('/school_search_name/')
def school_search_():
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    collection = db.user_master
    query=[
    {"$match":{
             '$and':[{ 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
              {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
              {'IS_DISABLED':{"$ne":'Y'}},
              {'IS_BLOCKED':{"$ne":'Y'}},
#               {'IS_ADMIN':'Y'},
    # //           {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
    # //           {'DEVICE_USED':{"$regex":'webapp','$options':'i'}},
              {'schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
              {'schoolId.BLOCKED_BY_CAP':{'$exists':0}}]}},
     {'$group':{
         '_id':'$schoolId._id',
         'NAME':{'$first':'$schoolId.NAME'},
         'CITY':{'$first':'$schoolId.CITY'},
         'STATE':{'$first':'$schoolId.STATE'},
         'COUNTRY':{'$first':'$schoolId.COUNTRY'},
         }}]
    schools=list(collection.aggregate(query))
    schools_info=pd.DataFrame(schools)
    dffinalnew=schools_info.copy()
    dffinalnew['concatenate']=dffinalnew['NAME'].map(str)+','+dffinalnew['CITY'].map(str)+','+dffinalnew['STATE'].map(str)
    dffinalnew['_id']=dffinalnew['_id'].astype('str')
    d={}    
    for i, j in zip(dffinalnew['concatenate'].tolist(), dffinalnew['_id'].tolist()):
        d.setdefault(i,j)
        
    return json.dumps({'data':d})

@app.route('/_executive_dashbaord_')
def _excecutivecount_():
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    collection = db["school_master"]
    query = {}
    query["CATEGORY"] = Regex(u".*LAUSD.*", "i")
    query["_id"]={"$in":db.user_master.distinct('schoolId._id')}
    projection = {}
    projection["_id"] = 1.0
    cursor = collection.find(query, projection = projection)
    dfum=(list(cursor))
    dfum1=pd.DataFrame(dfum)
    comadd=1299-len(dfum1)
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))

    database = client["compass"]

    collection1 = database["user_master"]


    df1=DataFrame(list(collection1.aggregate([{"$match":
         {'$and': [

                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

    # //               {'IS_ADMIN':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

            {'$group':{'_id':{},'ID':{'$addToSet':'$schoolId._id'}}},
                  {'$project':{'_id':0,'schools':{'$size':'$ID'}}},

                  ])))
    total_school=df1['schools'][0]+comadd
    df = DataFrame(list(collection1.aggregate([{"$match":
    {'$and':[{"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

    # //               {'IS_ADMIN':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},



     {"$group":{'_id':{},'distincts': {'$addToSet': "$_id"}}},
        {"$project":{'_id':0,'Total_user':{'$size':'$distincts'}}}])))

    Total_user=df['Total_user'][0]

    # print(Total_user)

    Total_classroom=Total_user+total_school
    # print(Total_classroom)
    Total_students=Total_classroom*26
    # print(Total_students)
    Total_mindful_minutes=Total_students*8
    # print(Total_mindful_minutes)


    df2 = DataFrame(list(collection1.aggregate([{"$match":
        {'$and':[ {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

    # //               {'IS_ADMIN':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
    {"_id":{"$nin":database.audio_track_master.distinct("USER_ID._id")}}                       
                                 ]}},
    {"$group":{'_id':{},'distincts': {'$addToSet': "$_id"}}},
    {"$project":{'_id':0,'never_loggedin':{'$size':'$distincts'}}}])))

    Never_logged_in=df2['never_loggedin'][0]
    # print(Never_logged_in)

    collection2 = database["audio_track_master"]


    df3 = DataFrame(list(collection2.aggregate([
    {"$match":
     {
        '$and':[
            {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
         {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
            {'EMAIL_ID':{'$ne':''}},
             {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
         { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
     { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]

     }},
    {'$group':{'_id':{},'auc':{'$addToSet':'$USER_ID.schoolId._id'}}},
    {'$project':{'_id':0, 'active_schools':{'$size':'$auc'}}}

    ])))

    active_school=df3['active_schools'][0]
    # print(active_school)




    temp={"total_school":str(total_school),
         "user_count":str(Total_user),
        "total_classrooms":str(Total_classroom),
          "total_students":str(Total_students),
          "mindful_minutes":str(Total_mindful_minutes),
          "active_school":str(active_school),
         "never_logged_in":str(Never_logged_in)}

    # print(temp)
    return json.dumps(temp)



# =====================districtreport===========================
@app.route('/schoolwisefamilycount/<districtid>')
def schpuc(districtid):
    disdic={
    '620f3d6132c6d4813f4c9887':'Jackson County Schools',
    "5f2609807a1c0000950bb459":"North Special School District",    
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',    
    '6045e4d007ead7744b125848':'Adams 12 Five Star Schools',
    '619268dd81f00a4319a65a52':'Access Community',
    '6045e4d707ead7744b125854':'Adams County School District 14',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '6045e4c907ead7744b12583d':'Apple Valley Unified School District',
    '789':'Attendance works',
    '6045e4d707ead7744b125855':'Aurora Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '6045e4d107ead7744b125849':'Berkeley Public Schools',
    '5fe2e25d4d0ca68d7baf889d':'BGCA',
    '6045e4ca07ead7744b12583e':'Bishop Unified School District',
    '6045e4d107ead7744b12584a':'Bismarck Public Schools',
    '5fe318b14d0ca68d7baf889e':'BLUE',
    '6045e4c807ead7744b12583b':'Boston Public Schools',
    '6023a6d79e8e623753fc305c':'Boulder Valley School District',
    '60f7bf747cc8db72d772e465':'Bright Horizons Early Learning Centers',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '6045e4ca07ead7744b12583f':'Canyons School District',
    '60473f8823e88e242074ebd2':'Champlain Valley School District',
    '6045e4d907ead7744b125858':'Chicago Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '6045e4d907ead7744b125857':'Colton Joint Unified School District',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '6045e4da07ead7744b125859':'Dennis-Yarmouth Regional School District',
    '6045e4cb07ead7744b125840':'Denver Public Schools',
    '5f2609807a1c0000950bb46e':'District 25 New York Schools',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '6045e4c707ead7744b12583a':'Durham Public Schools',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb464':'Equity Education',
    '6045e4cc07ead7744b125841':'Fairfax County Public Schools',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '6045e4cd07ead7744b125843':'Falmouth Public Schools',
    '6045e4da07ead7744b12585a':'FITCHBURG PUBLIC SCHOOLS',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '6023a7269e8e623753fc305e':'Fulton County School System',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '6045e4d207ead7744b12584b':'Glenbard District 87',
    '5f2609807a1c0000950bb450':'Goleta District',
    '6045e4cd07ead7744b125844':'Granite School District',
    '5f2609807a1c0000950bb474':'Greenburgh North Castle Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '60cb8971c5b0e89ed7ac0aa1':'Hall County School District',
    '5f9aa5e526edbed399d56c92':'Hamilton-Wenham Regional School District',
    '6045e4c707ead7744b125839':'Hartford Public Schools',
    '5f2609807a1c0000950bb47c':'Hawaii Public Schools',
    '6045e4ce07ead7744b125845':'Helena Public Schools',
    '6045e4db07ead7744b12585b':'HidalgoIndependent School district',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '6045e4db07ead7744b12585c':'Hopedale Public Schools',
    '6045e4cc07ead7744b125842':'Houston Independent School District',
    '60b872ce826cab06ebdf044e':'Kalamazoo Public Schools',
    '6045e4dc07ead7744b12585d':'Kearsarge Regional School District',
    '6045e4d307ead7744b12584d':'KIPP Public Schools',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '6045e4cf07ead7744b125846':'Lamar Consolidated Independent School District',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '6045e4dc07ead7744b12585e':'Littleton Public Schools',
    '5fe2e1ee4d0ca68d7baf889c':'LSF-Head Start',
    '6023a7499e8e623753fc305f':'Manatee County School District',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '6077e1b5eaa8bae0e2e04a64':'Medfield School District',
    '6023a7019e8e623753fc305d':'Miami-Dade County Public Schools',
    '5f2609807a1c0000950bb465':'Middleton-Cross Plains Area School District',
    '6045e4d407ead7744b12584f':'Mill Valley School District',
    '6045e4d307ead7744b12584e':'Millard School District',
    '610d0837931db8cfdf500fef':'Mission Consolidated Independent School District',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '6045e4cf07ead7744b125847':'Muscatine Community School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f2609807a1c0000950bb459':'North Special School District',
    '6045e4c907ead7744b12583c':'Northside Independent School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '6017ab3043ca9c39151838d4':'Oswego School District',
    '6045e4dd07ead7744b12585f':'Palm Beach County School District',
    '60913aaea5fd4b56a4bafa70':'Palm Springs Unified',
    '5f2609807a1c0000950bb479':'Panorama Education',
    '5f2609807a1c0000950bb46f':'Paradise Schools',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '6045e4de07ead7744b125860':'Paterson School District',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '6045e4d507ead7744b125850':'Rich School District',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '6045e4d507ead7744b125851':'San Francisco Unified School District',
    '6023a76f9e8e623753fc3060':'San Jose Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '6045e4df07ead7744b125862':'San Marcos Unified School District',
    '6045e4df07ead7744b125863':'San Marino Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '602e60e567d3e6c0a4eb4d99':'School District of Palm Beach County',
    '6045e4d807ead7744b125856':'School District of the Chathams',
    '6045e4de07ead7744b125861':'Sevier School District',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    '123':'Skillman',
    '6045e4e007ead7744b125864':'South Summit School District',
    '60eea965ae7de54f57abf234':'Southfield Public Schools',
    '5f2609807a1c0000950bb46a':'Springfield Public School',
    '6045e4e007ead7744b125865':'Sudbury Public Schools',
    '6045e4e107ead7744b125866':'Tooele County School District',
    '60a7b03831afdba383052726':'United Way Of Santa Barbara',
    '6045e4d607ead7744b125852':'Upland Unified School District',
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '456':'UWBA',
    '6023a7949e8e623753fc3061':'Wasatch County School District',
    '6045e4e207ead7744b125867':'Washoe County School District',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '6045e4d607ead7744b125853':'West Contra Costa Unified School District',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '6045e4e207ead7744b125868':'Westford Public Schools',
    '6045e4d207ead7744b12584c':'White River School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5f2609807a1c0000950bb45d':'Youngstown'}
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.user_master
    district=disdic[districtid]
    df = DataFrame(list(collection.aggregate([
    {"$match":
         {'$and': [
             {'ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //               {'IS_ADMIN':'Y'},
#                 {'IS_PORTAL':'Y'},
                      {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
                 {'EMAIL_ID':{'$ne':''}},
#                    {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#                  {'DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$_id'},'NAME':{'$first':'$schoolId.NAME'},'district':{'$first':'$DISTRICT_ID.DISTRICT_NAME'}}},
                  {'$project':{'_id':1,'user_count':{'$size':'$ID'},'name':'$NAME','district':'$district'}},
                   { '$sort' : { 'user_count' : -1}}
    # //               {'$count':'count'}
                  ])))

    # df['SCH_CREATED_DATE']=pd.to_datetime(df['SCH_CREATED_DATE'])

#     df=df.nlargest(20,'user_count')
#     df= df.groupby(df['district'])
#     df= df.get_group(''+district+'')


    if df.empty == True:
        
        schname=[]
        uc=[]
      
    else:
        schname=df['name'].tolist()
        uc=df['user_count'].tolist()
    # sc
    

    data={'schname':schname[0:20],'Familycount':uc[0:20]}
    
    return json.dumps(data)


@app.route('/schoolwisefamilypracticecount/<districtid>')
def schppcfamily(districtid):
    disdic={
    '620f3d6132c6d4813f4c9887':'Jackson County Schools',
    "5f2609807a1c0000950bb459":"North Special School District",    
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',    
    '6045e4d007ead7744b125848':'Adams 12 Five Star Schools',
    '619268dd81f00a4319a65a52':'Access Community',
    '6045e4d707ead7744b125854':'Adams County School District 14',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '6045e4c907ead7744b12583d':'Apple Valley Unified School District',
    '789':'Attendance works',
    '6045e4d707ead7744b125855':'Aurora Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '6045e4d107ead7744b125849':'Berkeley Public Schools',
    '5fe2e25d4d0ca68d7baf889d':'BGCA',
    '6045e4ca07ead7744b12583e':'Bishop Unified School District',
    '6045e4d107ead7744b12584a':'Bismarck Public Schools',
    '5fe318b14d0ca68d7baf889e':'BLUE',
    '6045e4c807ead7744b12583b':'Boston Public Schools',
    '6023a6d79e8e623753fc305c':'Boulder Valley School District',
    '60f7bf747cc8db72d772e465':'Bright Horizons Early Learning Centers',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '6045e4ca07ead7744b12583f':'Canyons School District',
    '60473f8823e88e242074ebd2':'Champlain Valley School District',
    '6045e4d907ead7744b125858':'Chicago Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '6045e4d907ead7744b125857':'Colton Joint Unified School District',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '6045e4da07ead7744b125859':'Dennis-Yarmouth Regional School District',
    '6045e4cb07ead7744b125840':'Denver Public Schools',
    '5f2609807a1c0000950bb46e':'District 25 New York Schools',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '6045e4c707ead7744b12583a':'Durham Public Schools',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb464':'Equity Education',
    '6045e4cc07ead7744b125841':'Fairfax County Public Schools',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '6045e4cd07ead7744b125843':'Falmouth Public Schools',
    '6045e4da07ead7744b12585a':'FITCHBURG PUBLIC SCHOOLS',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '6023a7269e8e623753fc305e':'Fulton County School System',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '6045e4d207ead7744b12584b':'Glenbard District 87',
    '5f2609807a1c0000950bb450':'Goleta District',
    '6045e4cd07ead7744b125844':'Granite School District',
    '5f2609807a1c0000950bb474':'Greenburgh North Castle Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '60cb8971c5b0e89ed7ac0aa1':'Hall County School District',
    '5f9aa5e526edbed399d56c92':'Hamilton-Wenham Regional School District',
    '6045e4c707ead7744b125839':'Hartford Public Schools',
    '5f2609807a1c0000950bb47c':'Hawaii Public Schools',
    '6045e4ce07ead7744b125845':'Helena Public Schools',
    '6045e4db07ead7744b12585b':'HidalgoIndependent School district',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '6045e4db07ead7744b12585c':'Hopedale Public Schools',
    '6045e4cc07ead7744b125842':'Houston Independent School District',
    '60b872ce826cab06ebdf044e':'Kalamazoo Public Schools',
    '6045e4dc07ead7744b12585d':'Kearsarge Regional School District',
    '6045e4d307ead7744b12584d':'KIPP Public Schools',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '6045e4cf07ead7744b125846':'Lamar Consolidated Independent School District',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '6045e4dc07ead7744b12585e':'Littleton Public Schools',
    '5fe2e1ee4d0ca68d7baf889c':'LSF-Head Start',
    '6023a7499e8e623753fc305f':'Manatee County School District',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '6077e1b5eaa8bae0e2e04a64':'Medfield School District',
    '6023a7019e8e623753fc305d':'Miami-Dade County Public Schools',
    '5f2609807a1c0000950bb465':'Middleton-Cross Plains Area School District',
    '6045e4d407ead7744b12584f':'Mill Valley School District',
    '6045e4d307ead7744b12584e':'Millard School District',
    '610d0837931db8cfdf500fef':'Mission Consolidated Independent School District',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '6045e4cf07ead7744b125847':'Muscatine Community School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f2609807a1c0000950bb459':'North Special School District',
    '6045e4c907ead7744b12583c':'Northside Independent School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '6017ab3043ca9c39151838d4':'Oswego School District',
    '6045e4dd07ead7744b12585f':'Palm Beach County School District',
    '60913aaea5fd4b56a4bafa70':'Palm Springs Unified',
    '5f2609807a1c0000950bb479':'Panorama Education',
    '5f2609807a1c0000950bb46f':'Paradise Schools',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '6045e4de07ead7744b125860':'Paterson School District',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '6045e4d507ead7744b125850':'Rich School District',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '6045e4d507ead7744b125851':'San Francisco Unified School District',
    '6023a76f9e8e623753fc3060':'San Jose Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '6045e4df07ead7744b125862':'San Marcos Unified School District',
    '6045e4df07ead7744b125863':'San Marino Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '602e60e567d3e6c0a4eb4d99':'School District of Palm Beach County',
    '6045e4d807ead7744b125856':'School District of the Chathams',
    '6045e4de07ead7744b125861':'Sevier School District',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    '123':'Skillman',
    '6045e4e007ead7744b125864':'South Summit School District',
    '60eea965ae7de54f57abf234':'Southfield Public Schools',
    '5f2609807a1c0000950bb46a':'Springfield Public School',
    '6045e4e007ead7744b125865':'Sudbury Public Schools',
    '6045e4e107ead7744b125866':'Tooele County School District',
    '60a7b03831afdba383052726':'United Way Of Santa Barbara',
    '6045e4d607ead7744b125852':'Upland Unified School District',
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '456':'UWBA',
    '6023a7949e8e623753fc3061':'Wasatch County School District',
    '6045e4e207ead7744b125867':'Washoe County School District',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '6045e4d607ead7744b125853':'West Contra Costa Unified School District',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '6045e4e207ead7744b125868':'Westford Public Schools',
    '6045e4d207ead7744b12584c':'White River School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5f2609807a1c0000950bb45d':'Youngstown'}
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    collection1 = db.user_master
    district=disdic[districtid]
    df1 = DataFrame(list(collection.aggregate([
    {"$match":
         {'$and': [
              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                {'USER_ID.schoolId._id':{'$ne':None}},
                      {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    # //               {'IS_ADMIN':'Y'},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#               {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#                  {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},

    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$USER_ID.schoolId._id','pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
                  {'$project':{'_id':1,'practice_count':'$pc'}},
            { '$sort' : { 'practice_count' : -1}}
    # //               {'$count':'count'}
                  ])))
    if df1.empty == True:
        
        schname=[]
        pc=[]
        data={'schname':schname,'Familypracticecount':pc}
    else:
        df1
        df2=DataFrame(list(collection1.aggregate([{"$match":
         {'$and': [
               {'ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        #                  {'_id':{'$in':user}},
        # //               {'IS_ADMIN':'Y'},

                 {'EMAIL_ID':{'$ne':''}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

            {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$schoolId._id'},'name':{'$first':'$schoolId.NAME'},'user_name':{'$first':'$USER_NAME'}
                      }},


            {'$project':{'_id':1,'name':1}},])))

        df=pd.merge(df1,df2, how='left', on='_id')

        if df.empty == True:

            schname=[]
            pc=[]

        else:
            schname=df['name'].tolist()
            pc=df['practice_count'].tolist()
        data={'schname':schname[0:20],'Familypracticecount':pc[0:20]}

    return json.dumps(data)

@app.route('/schoolwisepracticecounttop20/<districtid>')
def schwisepc(districtid):
    disdic={       
    '620f3d6132c6d4813f4c9887':'Jackson County Schools', 
    "5f2609807a1c0000950bb459":"North Special School District",
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',    
    '6045e4d007ead7744b125848':'Adams 12 Five Star Schools',
    '619268dd81f00a4319a65a52':'Access Community',
    '6045e4d707ead7744b125854':'Adams County School District 14',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '6045e4c907ead7744b12583d':'Apple Valley Unified School District',
    '789':'Attendance works',
    '6045e4d707ead7744b125855':'Aurora Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '6045e4d107ead7744b125849':'Berkeley Public Schools',
    '5fe2e25d4d0ca68d7baf889d':'BGCA',
    '6045e4ca07ead7744b12583e':'Bishop Unified School District',
    '6045e4d107ead7744b12584a':'Bismarck Public Schools',
    '5fe318b14d0ca68d7baf889e':'BLUE',
    '6045e4c807ead7744b12583b':'Boston Public Schools',
    '6023a6d79e8e623753fc305c':'Boulder Valley School District',
    '60f7bf747cc8db72d772e465':'Bright Horizons Early Learning Centers',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '6045e4ca07ead7744b12583f':'Canyons School District',
    '60473f8823e88e242074ebd2':'Champlain Valley School District',
    '6045e4d907ead7744b125858':'Chicago Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '6045e4d907ead7744b125857':'Colton Joint Unified School District',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '6045e4da07ead7744b125859':'Dennis-Yarmouth Regional School District',
    '6045e4cb07ead7744b125840':'Denver Public Schools',
    '5f2609807a1c0000950bb46e':'District 25 New York Schools',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '6045e4c707ead7744b12583a':'Durham Public Schools',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb464':'Equity Education',
    '6045e4cc07ead7744b125841':'Fairfax County Public Schools',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '6045e4cd07ead7744b125843':'Falmouth Public Schools',
    '6045e4da07ead7744b12585a':'FITCHBURG PUBLIC SCHOOLS',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '6023a7269e8e623753fc305e':'Fulton County School System',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '6045e4d207ead7744b12584b':'Glenbard District 87',
    '5f2609807a1c0000950bb450':'Goleta District',
    '6045e4cd07ead7744b125844':'Granite School District',
    '5f2609807a1c0000950bb474':'Greenburgh North Castle Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '60cb8971c5b0e89ed7ac0aa1':'Hall County School District',
    '5f9aa5e526edbed399d56c92':'Hamilton-Wenham Regional School District',
    '6045e4c707ead7744b125839':'Hartford Public Schools',
    '5f2609807a1c0000950bb47c':'Hawaii Public Schools',
    '6045e4ce07ead7744b125845':'Helena Public Schools',
    '6045e4db07ead7744b12585b':'HidalgoIndependent School district',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '6045e4db07ead7744b12585c':'Hopedale Public Schools',
    '6045e4cc07ead7744b125842':'Houston Independent School District',
    '60b872ce826cab06ebdf044e':'Kalamazoo Public Schools',
    '6045e4dc07ead7744b12585d':'Kearsarge Regional School District',
    '6045e4d307ead7744b12584d':'KIPP Public Schools',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '6045e4cf07ead7744b125846':'Lamar Consolidated Independent School District',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '6045e4dc07ead7744b12585e':'Littleton Public Schools',
    '5fe2e1ee4d0ca68d7baf889c':'LSF-Head Start',
    '6023a7499e8e623753fc305f':'Manatee County School District',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '6077e1b5eaa8bae0e2e04a64':'Medfield School District',
    '6023a7019e8e623753fc305d':'Miami-Dade County Public Schools',
    '5f2609807a1c0000950bb465':'Middleton-Cross Plains Area School District',
    '6045e4d407ead7744b12584f':'Mill Valley School District',
    '6045e4d307ead7744b12584e':'Millard School District',
    '610d0837931db8cfdf500fef':'Mission Consolidated Independent School District',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '6045e4cf07ead7744b125847':'Muscatine Community School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f2609807a1c0000950bb459':'North Special School District',
    '6045e4c907ead7744b12583c':'Northside Independent School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '6017ab3043ca9c39151838d4':'Oswego School District',
    '6045e4dd07ead7744b12585f':'Palm Beach County School District',
    '60913aaea5fd4b56a4bafa70':'Palm Springs Unified',
    '5f2609807a1c0000950bb479':'Panorama Education',
    '5f2609807a1c0000950bb46f':'Paradise Schools',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '6045e4de07ead7744b125860':'Paterson School District',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '6045e4d507ead7744b125850':'Rich School District',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '6045e4d507ead7744b125851':'San Francisco Unified School District',
    '6023a76f9e8e623753fc3060':'San Jose Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '6045e4df07ead7744b125862':'San Marcos Unified School District',
    '6045e4df07ead7744b125863':'San Marino Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '602e60e567d3e6c0a4eb4d99':'School District of Palm Beach County',
    '6045e4d807ead7744b125856':'School District of the Chathams',
    '6045e4de07ead7744b125861':'Sevier School District',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    '123':'Skillman',
    '6045e4e007ead7744b125864':'South Summit School District',
    '60eea965ae7de54f57abf234':'Southfield Public Schools',
    '5f2609807a1c0000950bb46a':'Springfield Public School',
    '6045e4e007ead7744b125865':'Sudbury Public Schools',
    '6045e4e107ead7744b125866':'Tooele County School District',
    '60a7b03831afdba383052726':'United Way Of Santa Barbara',
    '6045e4d607ead7744b125852':'Upland Unified School District',
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '456':'UWBA',
    '6023a7949e8e623753fc3061':'Wasatch County School District',
    '6045e4e207ead7744b125867':'Washoe County School District',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '6045e4d607ead7744b125853':'West Contra Costa Unified School District',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '6045e4e207ead7744b125868':'Westford Public Schools',
    '6045e4d207ead7744b12584c':'White River School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5f2609807a1c0000950bb45d':'Youngstown'}
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    collection1 = db.user_master
    district=disdic[districtid]
    df1 = DataFrame(list(collection.aggregate([
    {"$match":
         {'$and': [
              {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                {'USER_ID.schoolId._id':{'$ne':None}},
                      {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    # //               {'IS_ADMIN':'Y'},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#               {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#                  {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},

    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$USER_ID.schoolId._id','pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
                  {'$project':{'_id':1,'practice_count':'$pc'}},
            { '$sort' : { 'practice_count' : -1}}
    # //               {'$count':'count'}
                  ])))
    if df1.empty == True:
        
        schname=[]
        pc=[]
        data={'schname':schname,'top20practicecount':pc}
    else:
      
        df2=DataFrame(list(collection1.aggregate([{"$match":
         {'$and': [
               {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        #                  {'_id':{'$in':user}},
        # //               {'IS_ADMIN':'Y'},

                 {'EMAIL_ID':{'$ne':''}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

            {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$schoolId._id'},'name':{'$first':'$schoolId.NAME'},'user_name':{'$first':'$USER_NAME'}
                      }},


            {'$project':{'_id':1,'name':1}},])))

        df=pd.merge(df1,df2, how='left', on='_id')
    #     print(df)
        if df.empty == True:

            schname=[]
            pc=[]

        else:
            schname=df['name'].tolist()
            pc=df['practice_count'].tolist()
        data={'schname':schname[0:20],'top20practicecount':pc[0:20]}

    return json.dumps(data)


@app.route('/schoolwiseusercounttop20/<districtid>')
def schwiseuc(districtid):
    disdic={
    '620f3d6132c6d4813f4c9887':'Jackson County Schools',
    "5f2609807a1c0000950bb459":"North Special School District",
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',    
    '6045e4d007ead7744b125848':'Adams 12 Five Star Schools',
    '619268dd81f00a4319a65a52':'Access Community',
    '6045e4d707ead7744b125854':'Adams County School District 14',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '6045e4c907ead7744b12583d':'Apple Valley Unified School District',
    '789':'Attendance works',
    '6045e4d707ead7744b125855':'Aurora Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '6045e4d107ead7744b125849':'Berkeley Public Schools',
    '5fe2e25d4d0ca68d7baf889d':'BGCA',
    '6045e4ca07ead7744b12583e':'Bishop Unified School District',
    '6045e4d107ead7744b12584a':'Bismarck Public Schools',
    '5fe318b14d0ca68d7baf889e':'BLUE',
    '6045e4c807ead7744b12583b':'Boston Public Schools',
    '6023a6d79e8e623753fc305c':'Boulder Valley School District',
    '60f7bf747cc8db72d772e465':'Bright Horizons Early Learning Centers',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '6045e4ca07ead7744b12583f':'Canyons School District',
    '60473f8823e88e242074ebd2':'Champlain Valley School District',
    '6045e4d907ead7744b125858':'Chicago Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '6045e4d907ead7744b125857':'Colton Joint Unified School District',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '6045e4da07ead7744b125859':'Dennis-Yarmouth Regional School District',
    '6045e4cb07ead7744b125840':'Denver Public Schools',
    '5f2609807a1c0000950bb46e':'District 25 New York Schools',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '6045e4c707ead7744b12583a':'Durham Public Schools',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb464':'Equity Education',
    '6045e4cc07ead7744b125841':'Fairfax County Public Schools',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '6045e4cd07ead7744b125843':'Falmouth Public Schools',
    '6045e4da07ead7744b12585a':'FITCHBURG PUBLIC SCHOOLS',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '6023a7269e8e623753fc305e':'Fulton County School System',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '6045e4d207ead7744b12584b':'Glenbard District 87',
    '5f2609807a1c0000950bb450':'Goleta District',
    '6045e4cd07ead7744b125844':'Granite School District',
    '5f2609807a1c0000950bb474':'Greenburgh North Castle Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '60cb8971c5b0e89ed7ac0aa1':'Hall County School District',
    '5f9aa5e526edbed399d56c92':'Hamilton-Wenham Regional School District',
    '6045e4c707ead7744b125839':'Hartford Public Schools',
    '5f2609807a1c0000950bb47c':'Hawaii Public Schools',
    '6045e4ce07ead7744b125845':'Helena Public Schools',
    '6045e4db07ead7744b12585b':'HidalgoIndependent School district',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '6045e4db07ead7744b12585c':'Hopedale Public Schools',
    '6045e4cc07ead7744b125842':'Houston Independent School District',
    '60b872ce826cab06ebdf044e':'Kalamazoo Public Schools',
    '6045e4dc07ead7744b12585d':'Kearsarge Regional School District',
    '6045e4d307ead7744b12584d':'KIPP Public Schools',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '6045e4cf07ead7744b125846':'Lamar Consolidated Independent School District',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '6045e4dc07ead7744b12585e':'Littleton Public Schools',
    '5fe2e1ee4d0ca68d7baf889c':'LSF-Head Start',
    '6023a7499e8e623753fc305f':'Manatee County School District',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '6077e1b5eaa8bae0e2e04a64':'Medfield School District',
    '6023a7019e8e623753fc305d':'Miami-Dade County Public Schools',
    '5f2609807a1c0000950bb465':'Middleton-Cross Plains Area School District',
    '6045e4d407ead7744b12584f':'Mill Valley School District',
    '6045e4d307ead7744b12584e':'Millard School District',
    '610d0837931db8cfdf500fef':'Mission Consolidated Independent School District',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '6045e4cf07ead7744b125847':'Muscatine Community School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f2609807a1c0000950bb459':'North Special School District',
    '6045e4c907ead7744b12583c':'Northside Independent School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '6017ab3043ca9c39151838d4':'Oswego School District',
    '6045e4dd07ead7744b12585f':'Palm Beach County School District',
    '60913aaea5fd4b56a4bafa70':'Palm Springs Unified',
    '5f2609807a1c0000950bb479':'Panorama Education',
    '5f2609807a1c0000950bb46f':'Paradise Schools',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '6045e4de07ead7744b125860':'Paterson School District',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '6045e4d507ead7744b125850':'Rich School District',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '6045e4d507ead7744b125851':'San Francisco Unified School District',
    '6023a76f9e8e623753fc3060':'San Jose Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '6045e4df07ead7744b125862':'San Marcos Unified School District',
    '6045e4df07ead7744b125863':'San Marino Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '602e60e567d3e6c0a4eb4d99':'School District of Palm Beach County',
    '6045e4d807ead7744b125856':'School District of the Chathams',
    '6045e4de07ead7744b125861':'Sevier School District',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    '123':'Skillman',
    '6045e4e007ead7744b125864':'South Summit School District',
    '60eea965ae7de54f57abf234':'Southfield Public Schools',
    '5f2609807a1c0000950bb46a':'Springfield Public School',
    '6045e4e007ead7744b125865':'Sudbury Public Schools',
    '6045e4e107ead7744b125866':'Tooele County School District',
    '60a7b03831afdba383052726':'United Way Of Santa Barbara',
    '6045e4d607ead7744b125852':'Upland Unified School District',
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '456':'UWBA',
    '6023a7949e8e623753fc3061':'Wasatch County School District',
    '6045e4e207ead7744b125867':'Washoe County School District',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '6045e4d607ead7744b125853':'West Contra Costa Unified School District',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '6045e4e207ead7744b125868':'Westford Public Schools',
    '6045e4d207ead7744b12584c':'White River School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5f2609807a1c0000950bb45d':'Youngstown'}
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.user_master
    district=disdic[districtid]
    df = DataFrame(list(collection.aggregate([
    {"$match":
         {'$and': [
             {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //               {'IS_ADMIN':'Y'},
#                 {'IS_PORTAL':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
                      {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#                    {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#                  {'DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$_id'},'NAME':{'$first':'$schoolId.NAME'},'district':{'$first':'$DISTRICT_ID.DISTRICT_NAME'}}},
                  {'$project':{'_id':1,'user_count':{'$size':'$ID'},'name':'$NAME','district':'$district'}},
                   { '$sort' : { 'user_count' : -1}}
    # //               {'$count':'count'}
                  ])))

    # df['SCH_CREATED_DATE']=pd.to_datetime(df['SCH_CREATED_DATE'])

#     df=df.nlargest(20,'user_count')
#     df= df.groupby(df['district'])
#     df= df.get_group(''+district+'')

    if df.empty == True:
        
        schname=[]
        uc=[]
      
    else:
        schname=df['name'].tolist()
        uc=df['user_count'].tolist()
   
    data={'schname':schname[0:20],'usercount':uc[0:20]}
    
    return json.dumps(data)


@app.route('/monthwisepracticedistrict/<districtid>')
def monthwisepc(districtid):
    disdic={
    '620f3d6132c6d4813f4c9887':'Jackson County Schools',
    "5f2609807a1c0000950bb459":"North Special School District",
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',
    '6045e4d007ead7744b125848':'Adams 12 Five Star Schools',
    '619268dd81f00a4319a65a52':'Access Community',
    '6045e4d707ead7744b125854':'Adams County School District 14',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '6045e4c907ead7744b12583d':'Apple Valley Unified School District',
    '789':'Attendance works',
    '6045e4d707ead7744b125855':'Aurora Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '6045e4d107ead7744b125849':'Berkeley Public Schools',
    '5fe2e25d4d0ca68d7baf889d':'BGCA',
    '6045e4ca07ead7744b12583e':'Bishop Unified School District',
    '6045e4d107ead7744b12584a':'Bismarck Public Schools',
    '5fe318b14d0ca68d7baf889e':'BLUE',
    '6045e4c807ead7744b12583b':'Boston Public Schools',
    '6023a6d79e8e623753fc305c':'Boulder Valley School District',
    '60f7bf747cc8db72d772e465':'Bright Horizons Early Learning Centers',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '6045e4ca07ead7744b12583f':'Canyons School District',
    '60473f8823e88e242074ebd2':'Champlain Valley School District',
    '6045e4d907ead7744b125858':'Chicago Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '6045e4d907ead7744b125857':'Colton Joint Unified School District',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '6045e4da07ead7744b125859':'Dennis-Yarmouth Regional School District',
    '6045e4cb07ead7744b125840':'Denver Public Schools',
    '5f2609807a1c0000950bb46e':'District 25 New York Schools',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '6045e4c707ead7744b12583a':'Durham Public Schools',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb464':'Equity Education',
    '6045e4cc07ead7744b125841':'Fairfax County Public Schools',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '6045e4cd07ead7744b125843':'Falmouth Public Schools',
    '6045e4da07ead7744b12585a':'FITCHBURG PUBLIC SCHOOLS',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '6023a7269e8e623753fc305e':'Fulton County School System',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '6045e4d207ead7744b12584b':'Glenbard District 87',
    '5f2609807a1c0000950bb450':'Goleta District',
    '6045e4cd07ead7744b125844':'Granite School District',
    '5f2609807a1c0000950bb474':'Greenburgh North Castle Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '60cb8971c5b0e89ed7ac0aa1':'Hall County School District',
    '5f9aa5e526edbed399d56c92':'Hamilton-Wenham Regional School District',
    '6045e4c707ead7744b125839':'Hartford Public Schools',
    '5f2609807a1c0000950bb47c':'Hawaii Public Schools',
    '6045e4ce07ead7744b125845':'Helena Public Schools',
    '6045e4db07ead7744b12585b':'HidalgoIndependent School district',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '6045e4db07ead7744b12585c':'Hopedale Public Schools',
    '6045e4cc07ead7744b125842':'Houston Independent School District',
    '60b872ce826cab06ebdf044e':'Kalamazoo Public Schools',
    '6045e4dc07ead7744b12585d':'Kearsarge Regional School District',
    '6045e4d307ead7744b12584d':'KIPP Public Schools',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '6045e4cf07ead7744b125846':'Lamar Consolidated Independent School District',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '6045e4dc07ead7744b12585e':'Littleton Public Schools',
    '5fe2e1ee4d0ca68d7baf889c':'LSF-Head Start',
    '6023a7499e8e623753fc305f':'Manatee County School District',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '6077e1b5eaa8bae0e2e04a64':'Medfield School District',
    '6023a7019e8e623753fc305d':'Miami-Dade County Public Schools',
    '5f2609807a1c0000950bb465':'Middleton-Cross Plains Area School District',
    '6045e4d407ead7744b12584f':'Mill Valley School District',
    '6045e4d307ead7744b12584e':'Millard School District',
    '610d0837931db8cfdf500fef':'Mission Consolidated Independent School District',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '6045e4cf07ead7744b125847':'Muscatine Community School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f2609807a1c0000950bb459':'North Special School District',
    '6045e4c907ead7744b12583c':'Northside Independent School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '6017ab3043ca9c39151838d4':'Oswego School District',
    '6045e4dd07ead7744b12585f':'Palm Beach County School District',
    '60913aaea5fd4b56a4bafa70':'Palm Springs Unified',
    '5f2609807a1c0000950bb479':'Panorama Education',
    '5f2609807a1c0000950bb46f':'Paradise Schools',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '6045e4de07ead7744b125860':'Paterson School District',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '6045e4d507ead7744b125850':'Rich School District',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '6045e4d507ead7744b125851':'San Francisco Unified School District',
    '6023a76f9e8e623753fc3060':'San Jose Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '6045e4df07ead7744b125862':'San Marcos Unified School District',
    '6045e4df07ead7744b125863':'San Marino Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '602e60e567d3e6c0a4eb4d99':'School District of Palm Beach County',
    '6045e4d807ead7744b125856':'School District of the Chathams',
    '6045e4de07ead7744b125861':'Sevier School District',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    '123':'Skillman',
    '6045e4e007ead7744b125864':'South Summit School District',
    '60eea965ae7de54f57abf234':'Southfield Public Schools',
    '5f2609807a1c0000950bb46a':'Springfield Public School',
    '6045e4e007ead7744b125865':'Sudbury Public Schools',
    '6045e4e107ead7744b125866':'Tooele County School District',
    '60a7b03831afdba383052726':'United Way Of Santa Barbara',
    '6045e4d607ead7744b125852':'Upland Unified School District',
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '456':'UWBA',
    '6023a7949e8e623753fc3061':'Wasatch County School District',
    '6045e4e207ead7744b125867':'Washoe County School District',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '6045e4d607ead7744b125853':'West Contra Costa Unified School District',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '6045e4e207ead7744b125868':'Westford Public Schools',
    '6045e4d207ead7744b12584c':'White River School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5f2609807a1c0000950bb45d':'Youngstown'}
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    district=disdic[districtid]
    df = DataFrame(list(collection.aggregate([
    {"$match":
    {'$and': [
    #           {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.schoolId._id':{'$ne':None}},
    # //               {'IS_ADMIN':'Y'},
    # //             {'USER_ID.IS_PORTAL':'Y'},
         {'USER_ID.EMAIL_ID':{'$ne':''}},
                 {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#                {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
          {'MODIFIED_DATE':{'$gte':csy_first_date()}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
    {'$group':{'_id':{'$month':'$MODIFIED_DATE'},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
          {'$project':{'_id':1,'practice_count':'$pc'}},
    { '$sort' : { '_id' : 1} }
              ])))
    if df.empty == True:
        
        Month=['Aug','Sep','Oct','Nov','Dec','Jan','Feb','Mar','Apr','May','Jun','Jul',]

        pc=[0,0,0,0,0,0,0,0,0,0,0,0]
        data={'monthname':Month,'practice_count':pc}
    else:

        df.rename(columns = { '_id': 'Month'}, inplace = True)

        data = [['Aug', 8], ['Sep', 9], ['Oct', 10],['Nov', 11], ['Dec', 12], ['Jan', 1],['Feb', 2], ['Mar', 3], ['Apr', 4],['May', 5], ['Jun', 6], ['Jul', 7]] 


    # Create the pandas DataFrame 
        df1 = pd.DataFrame(data, columns = ['Monthname', 'Month']) 

        DF=pd.merge(df1,df, on='Month',how='left')
        DF=DF.fillna(0)

    #         d = dict(enumerate(calendar.month_abbr))    # to convert monthnumber of dataframe into monthname

    #         try:
    #             df['Month'] = df['Month'].map(d)
    #         except:
    #             pass

    #         if df.empty == True:
    #             Month=['Aug','Sep','Oct','Nov','Dec','Jan','Feb','Mar','Apr','May','Jun','Jul',]

    #             pc=[0,0,0,0,0,0,0,0,0,0,0,0]
    #         else:
        Month=DF['Monthname'].tolist()

        pc=DF['practice_count'].tolist()


        data={'monthname':Month,'practice_count':pc}
    return json.dumps(data)


@app.route('/90daysuserpractising/<districtid>')
def user_practice_90days(districtid):
    disdic={
    '620f3d6132c6d4813f4c9887':'Jackson County Schools',
    "5f2609807a1c0000950bb459":"North Special School District",
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',
    '6045e4d007ead7744b125848':'Adams 12 Five Star Schools',
    '619268dd81f00a4319a65a52':'Access Community',
    '6045e4d707ead7744b125854':'Adams County School District 14',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '6045e4c907ead7744b12583d':'Apple Valley Unified School District',
    '789':'Attendance works',
    '6045e4d707ead7744b125855':'Aurora Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '6045e4d107ead7744b125849':'Berkeley Public Schools',
    '5fe2e25d4d0ca68d7baf889d':'BGCA',
    '6045e4ca07ead7744b12583e':'Bishop Unified School District',
    '6045e4d107ead7744b12584a':'Bismarck Public Schools',
    '5fe318b14d0ca68d7baf889e':'BLUE',
    '6045e4c807ead7744b12583b':'Boston Public Schools',
    '6023a6d79e8e623753fc305c':'Boulder Valley School District',
    '60f7bf747cc8db72d772e465':'Bright Horizons Early Learning Centers',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '6045e4ca07ead7744b12583f':'Canyons School District',
    '60473f8823e88e242074ebd2':'Champlain Valley School District',
    '6045e4d907ead7744b125858':'Chicago Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '6045e4d907ead7744b125857':'Colton Joint Unified School District',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '6045e4da07ead7744b125859':'Dennis-Yarmouth Regional School District',
    '6045e4cb07ead7744b125840':'Denver Public Schools',
    '5f2609807a1c0000950bb46e':'District 25 New York Schools',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '6045e4c707ead7744b12583a':'Durham Public Schools',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb464':'Equity Education',
    '6045e4cc07ead7744b125841':'Fairfax County Public Schools',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '6045e4cd07ead7744b125843':'Falmouth Public Schools',
    '6045e4da07ead7744b12585a':'FITCHBURG PUBLIC SCHOOLS',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '6023a7269e8e623753fc305e':'Fulton County School System',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '6045e4d207ead7744b12584b':'Glenbard District 87',
    '5f2609807a1c0000950bb450':'Goleta District',
    '6045e4cd07ead7744b125844':'Granite School District',
    '5f2609807a1c0000950bb474':'Greenburgh North Castle Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '60cb8971c5b0e89ed7ac0aa1':'Hall County School District',
    '5f9aa5e526edbed399d56c92':'Hamilton-Wenham Regional School District',
    '6045e4c707ead7744b125839':'Hartford Public Schools',
    '5f2609807a1c0000950bb47c':'Hawaii Public Schools',
    '6045e4ce07ead7744b125845':'Helena Public Schools',
    '6045e4db07ead7744b12585b':'HidalgoIndependent School district',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '6045e4db07ead7744b12585c':'Hopedale Public Schools',
    '6045e4cc07ead7744b125842':'Houston Independent School District',
    '60b872ce826cab06ebdf044e':'Kalamazoo Public Schools',
    '6045e4dc07ead7744b12585d':'Kearsarge Regional School District',
    '6045e4d307ead7744b12584d':'KIPP Public Schools',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '6045e4cf07ead7744b125846':'Lamar Consolidated Independent School District',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '6045e4dc07ead7744b12585e':'Littleton Public Schools',
    '5fe2e1ee4d0ca68d7baf889c':'LSF-Head Start',
    '6023a7499e8e623753fc305f':'Manatee County School District',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '6077e1b5eaa8bae0e2e04a64':'Medfield School District',
    '6023a7019e8e623753fc305d':'Miami-Dade County Public Schools',
    '5f2609807a1c0000950bb465':'Middleton-Cross Plains Area School District',
    '6045e4d407ead7744b12584f':'Mill Valley School District',
    '6045e4d307ead7744b12584e':'Millard School District',
    '610d0837931db8cfdf500fef':'Mission Consolidated Independent School District',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '6045e4cf07ead7744b125847':'Muscatine Community School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f2609807a1c0000950bb459':'North Special School District',
    '6045e4c907ead7744b12583c':'Northside Independent School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '6017ab3043ca9c39151838d4':'Oswego School District',
    '6045e4dd07ead7744b12585f':'Palm Beach County School District',
    '60913aaea5fd4b56a4bafa70':'Palm Springs Unified',
    '5f2609807a1c0000950bb479':'Panorama Education',
    '5f2609807a1c0000950bb46f':'Paradise Schools',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '6045e4de07ead7744b125860':'Paterson School District',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '6045e4d507ead7744b125850':'Rich School District',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '6045e4d507ead7744b125851':'San Francisco Unified School District',
    '6023a76f9e8e623753fc3060':'San Jose Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '6045e4df07ead7744b125862':'San Marcos Unified School District',
    '6045e4df07ead7744b125863':'San Marino Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '602e60e567d3e6c0a4eb4d99':'School District of Palm Beach County',
    '6045e4d807ead7744b125856':'School District of the Chathams',
    '6045e4de07ead7744b125861':'Sevier School District',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    '123':'Skillman',
    '6045e4e007ead7744b125864':'South Summit School District',
    '60eea965ae7de54f57abf234':'Southfield Public Schools',
    '5f2609807a1c0000950bb46a':'Springfield Public School',
    '6045e4e007ead7744b125865':'Sudbury Public Schools',
    '6045e4e107ead7744b125866':'Tooele County School District',
    '60a7b03831afdba383052726':'United Way Of Santa Barbara',
    '6045e4d607ead7744b125852':'Upland Unified School District',
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '456':'UWBA',
    '6023a7949e8e623753fc3061':'Wasatch County School District',
    '6045e4e207ead7744b125867':'Washoe County School District',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '6045e4d607ead7744b125853':'West Contra Costa Unified School District',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '6045e4e207ead7744b125868':'Westford Public Schools',
    '6045e4d207ead7744b12584c':'White River School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5f2609807a1c0000950bb45d':'Youngstown'}
    from datetime import datetime
    from datetime import timedelta
    
    today1= datetime.utcnow()
    tod1= today1+ timedelta(hours=4)
    start1= tod1-timedelta(days=90)
    
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    district=disdic[districtid]
    df = DataFrame(list(collection.aggregate([
    {"$match":
     {'$and': [
#           {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
              {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            {'USER_ID.schoolId._id':{'$ne':None}},
# //               {'IS_ADMIN':'Y'},
# //             {'USER_ID.IS_PORTAL':'Y'},
             {'USER_ID.EMAIL_ID':{'$ne':''}},
                  {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#              {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
             {'MODIFIED_DATE':{'$gte':start1}},
# //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
         {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
        {'$group':{'_id':{"$dateToString": { "format": "%Y-%m-%d", "date": "$MODIFIED_DATE"}},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
              {'$project':{'_id':1,'user_count':'$pc','district':'$district'}},
    { '$sort' : { '_id' : 1} }
    

# //               {'$count':'count'}
              ])))
    # df['SCH_CREATED_DATE']=pd.to_datetime(df['SCH_CREATED_DATE'])
    df.rename(columns = { '_id': 'date'}, inplace = True)
    
    if df.empty == True:
        
        date=[]
        uc=[]
      
    else:
        date=df['date'].tolist()
        uc=df['user_count'].tolist()
#     df=df.nlargest(20,'user_count')
#     df= df.groupby(df['district'])
#     df= df.get_group(''+district+'')

    
#     data=[]    
#     for i,k in zip(schname,uc):

#         data.append([i,k])
    
#     for i in range(len(schname)):
#             schname[i] = schname[i]
    data={'date':date,'daysuserpractising':uc}
    
    return json.dumps(data)



@app.route('/90daysuserloggedindetail/<districtid>')
def user_logins_90days(districtid):
    disdic={
    '620f3d6132c6d4813f4c9887':'Jackson County Schools',
    "5f2609807a1c0000950bb459":"North Special School District",
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',
    '6045e4d007ead7744b125848':'Adams 12 Five Star Schools',
    '619268dd81f00a4319a65a52':'Access Community',
    '6045e4d707ead7744b125854':'Adams County School District 14',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '6045e4c907ead7744b12583d':'Apple Valley Unified School District',
    '789':'Attendance works',
    '6045e4d707ead7744b125855':'Aurora Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '6045e4d107ead7744b125849':'Berkeley Public Schools',
    '5fe2e25d4d0ca68d7baf889d':'BGCA',
    '6045e4ca07ead7744b12583e':'Bishop Unified School District',
    '6045e4d107ead7744b12584a':'Bismarck Public Schools',
    '5fe318b14d0ca68d7baf889e':'BLUE',
    '6045e4c807ead7744b12583b':'Boston Public Schools',
    '6023a6d79e8e623753fc305c':'Boulder Valley School District',
    '60f7bf747cc8db72d772e465':'Bright Horizons Early Learning Centers',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '6045e4ca07ead7744b12583f':'Canyons School District',
    '60473f8823e88e242074ebd2':'Champlain Valley School District',
    '6045e4d907ead7744b125858':'Chicago Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '6045e4d907ead7744b125857':'Colton Joint Unified School District',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '6045e4da07ead7744b125859':'Dennis-Yarmouth Regional School District',
    '6045e4cb07ead7744b125840':'Denver Public Schools',
    '5f2609807a1c0000950bb46e':'District 25 New York Schools',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '6045e4c707ead7744b12583a':'Durham Public Schools',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb464':'Equity Education',
    '6045e4cc07ead7744b125841':'Fairfax County Public Schools',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '6045e4cd07ead7744b125843':'Falmouth Public Schools',
    '6045e4da07ead7744b12585a':'FITCHBURG PUBLIC SCHOOLS',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '6023a7269e8e623753fc305e':'Fulton County School System',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '6045e4d207ead7744b12584b':'Glenbard District 87',
    '5f2609807a1c0000950bb450':'Goleta District',
    '6045e4cd07ead7744b125844':'Granite School District',
    '5f2609807a1c0000950bb474':'Greenburgh North Castle Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '60cb8971c5b0e89ed7ac0aa1':'Hall County School District',
    '5f9aa5e526edbed399d56c92':'Hamilton-Wenham Regional School District',
    '6045e4c707ead7744b125839':'Hartford Public Schools',
    '5f2609807a1c0000950bb47c':'Hawaii Public Schools',
    '6045e4ce07ead7744b125845':'Helena Public Schools',
    '6045e4db07ead7744b12585b':'HidalgoIndependent School district',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '6045e4db07ead7744b12585c':'Hopedale Public Schools',
    '6045e4cc07ead7744b125842':'Houston Independent School District',
    '60b872ce826cab06ebdf044e':'Kalamazoo Public Schools',
    '6045e4dc07ead7744b12585d':'Kearsarge Regional School District',
    '6045e4d307ead7744b12584d':'KIPP Public Schools',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '6045e4cf07ead7744b125846':'Lamar Consolidated Independent School District',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '6045e4dc07ead7744b12585e':'Littleton Public Schools',
    '5fe2e1ee4d0ca68d7baf889c':'LSF-Head Start',
    '6023a7499e8e623753fc305f':'Manatee County School District',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '6077e1b5eaa8bae0e2e04a64':'Medfield School District',
    '6023a7019e8e623753fc305d':'Miami-Dade County Public Schools',
    '5f2609807a1c0000950bb465':'Middleton-Cross Plains Area School District',
    '6045e4d407ead7744b12584f':'Mill Valley School District',
    '6045e4d307ead7744b12584e':'Millard School District',
    '610d0837931db8cfdf500fef':'Mission Consolidated Independent School District',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '6045e4cf07ead7744b125847':'Muscatine Community School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f2609807a1c0000950bb459':'North Special School District',
    '6045e4c907ead7744b12583c':'Northside Independent School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '6017ab3043ca9c39151838d4':'Oswego School District',
    '6045e4dd07ead7744b12585f':'Palm Beach County School District',
    '60913aaea5fd4b56a4bafa70':'Palm Springs Unified',
    '5f2609807a1c0000950bb479':'Panorama Education',
    '5f2609807a1c0000950bb46f':'Paradise Schools',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '6045e4de07ead7744b125860':'Paterson School District',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '6045e4d507ead7744b125850':'Rich School District',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '6045e4d507ead7744b125851':'San Francisco Unified School District',
    '6023a76f9e8e623753fc3060':'San Jose Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '6045e4df07ead7744b125862':'San Marcos Unified School District',
    '6045e4df07ead7744b125863':'San Marino Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '602e60e567d3e6c0a4eb4d99':'School District of Palm Beach County',
    '6045e4d807ead7744b125856':'School District of the Chathams',
    '6045e4de07ead7744b125861':'Sevier School District',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    '123':'Skillman',
    '6045e4e007ead7744b125864':'South Summit School District',
    '60eea965ae7de54f57abf234':'Southfield Public Schools',
    '5f2609807a1c0000950bb46a':'Springfield Public School',    
    '6045e4e007ead7744b125865':'Sudbury Public Schools',
    '6045e4e107ead7744b125866':'Tooele County School District',
    '60a7b03831afdba383052726':'United Way Of Santa Barbara',
    '6045e4d607ead7744b125852':'Upland Unified School District',
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '456':'UWBA',
    '6023a7949e8e623753fc3061':'Wasatch County School District',
    '6045e4e207ead7744b125867':'Washoe County School District',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '6045e4d607ead7744b125853':'West Contra Costa Unified School District',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '6045e4e207ead7744b125868':'Westford Public Schools',
    '6045e4d207ead7744b12584c':'White River School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5f2609807a1c0000950bb45d':'Youngstown'}
    from datetime import datetime
    from datetime import timedelta
    today1= datetime.utcnow()
    tod1= today1+ timedelta(hours=4)
    start1= tod1-timedelta(days=90)
    
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.login_logs
    district=disdic[districtid]
    df = DataFrame(list(collection.aggregate([
    {"$match":
     {'$and': [
#           {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
              {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            {'USER_ID.schoolId._id':{'$ne':None}},
# //               {'IS_ADMIN':'Y'},
# //             {'USER_ID.IS_PORTAL':'Y'},
             {'USER_ID.EMAIL_ID':{'$ne':''}},
                  {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#              {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
             {'LAST_LOGGED_IN':{'$gte':start1}},
# //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
         {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
        {'$group':{'_id':{"$dateToString": { "format": "%Y-%m-%d", "date": "$LAST_LOGGED_IN"}},'pc':{'$addToSet':'$USER_ID._id'},'NAME':{'$first':'$USER_ID.schoolId.NAME'},'un':{'$first':'$USER_ID.USER_NAME'}}},
              {'$project':{'_id':1,'user_count':{'$size':'$pc'}}},
    { '$sort' : { '_id' : 1} }
    

# //               {'$count':'count'}
              ])))
    # df['SCH_CREATED_DATE']=pd.to_datetime(df['SCH_CREATED_DATE'])
    df.rename(columns = { '_id': 'date'}, inplace = True)
#     df=df.nlargest(20,'user_count')
#     df= df.groupby(df['district'])
#     df= df.get_group(''+district+'')



    if df.empty == True:
        
        date=[]
        uc=[]
      
    else:
        date=df['date'].tolist()
        uc=df['user_count'].tolist()
    
  
    
#     data=[]    
#     for i,k in zip(schname,uc):

#         data.append([i,k])
    
#     for i in range(len(schname)):
#             schname[i] = schname[i]
    data={'date':date,'daysuserlogins':uc}
    
    return json.dumps(data)


@app.route('/top20userspractisinginfo/<districtid>')
def topusers_practice(districtid):
    disdic={
    '620f3d6132c6d4813f4c9887':'Jackson County Schools',
    "5f2609807a1c0000950bb459":"North Special School District",
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',
    '6045e4d007ead7744b125848':'Adams 12 Five Star Schools',
    '619268dd81f00a4319a65a52':'Access Community',
    '6045e4d707ead7744b125854':'Adams County School District 14',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '6045e4c907ead7744b12583d':'Apple Valley Unified School District',
    '789':'Attendance works',
    '6045e4d707ead7744b125855':'Aurora Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '6045e4d107ead7744b125849':'Berkeley Public Schools',
    '5fe2e25d4d0ca68d7baf889d':'BGCA',
    '6045e4ca07ead7744b12583e':'Bishop Unified School District',
    '6045e4d107ead7744b12584a':'Bismarck Public Schools',
    '5fe318b14d0ca68d7baf889e':'BLUE',
    '6045e4c807ead7744b12583b':'Boston Public Schools',
    '6023a6d79e8e623753fc305c':'Boulder Valley School District',
    '60f7bf747cc8db72d772e465':'Bright Horizons Early Learning Centers',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '6045e4ca07ead7744b12583f':'Canyons School District',
    '60473f8823e88e242074ebd2':'Champlain Valley School District',
    '6045e4d907ead7744b125858':'Chicago Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '6045e4d907ead7744b125857':'Colton Joint Unified School District',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '6045e4da07ead7744b125859':'Dennis-Yarmouth Regional School District',
    '6045e4cb07ead7744b125840':'Denver Public Schools',
    '5f2609807a1c0000950bb46e':'District 25 New York Schools',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '6045e4c707ead7744b12583a':'Durham Public Schools',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb464':'Equity Education',
    '6045e4cc07ead7744b125841':'Fairfax County Public Schools',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '6045e4cd07ead7744b125843':'Falmouth Public Schools',
    '6045e4da07ead7744b12585a':'FITCHBURG PUBLIC SCHOOLS',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '6023a7269e8e623753fc305e':'Fulton County School System',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '6045e4d207ead7744b12584b':'Glenbard District 87',
    '5f2609807a1c0000950bb450':'Goleta District',
    '6045e4cd07ead7744b125844':'Granite School District',
    '5f2609807a1c0000950bb474':'Greenburgh North Castle Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '60cb8971c5b0e89ed7ac0aa1':'Hall County School District',
    '5f9aa5e526edbed399d56c92':'Hamilton-Wenham Regional School District',
    '6045e4c707ead7744b125839':'Hartford Public Schools',
    '5f2609807a1c0000950bb47c':'Hawaii Public Schools',
    '6045e4ce07ead7744b125845':'Helena Public Schools',
    '6045e4db07ead7744b12585b':'HidalgoIndependent School district',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '6045e4db07ead7744b12585c':'Hopedale Public Schools',
    '6045e4cc07ead7744b125842':'Houston Independent School District',
    '60b872ce826cab06ebdf044e':'Kalamazoo Public Schools',
    '6045e4dc07ead7744b12585d':'Kearsarge Regional School District',
    '6045e4d307ead7744b12584d':'KIPP Public Schools',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '6045e4cf07ead7744b125846':'Lamar Consolidated Independent School District',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '6045e4dc07ead7744b12585e':'Littleton Public Schools',
    '5fe2e1ee4d0ca68d7baf889c':'LSF-Head Start',
    '6023a7499e8e623753fc305f':'Manatee County School District',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '6077e1b5eaa8bae0e2e04a64':'Medfield School District',
    '6023a7019e8e623753fc305d':'Miami-Dade County Public Schools',
    '5f2609807a1c0000950bb465':'Middleton-Cross Plains Area School District',
    '6045e4d407ead7744b12584f':'Mill Valley School District',
    '6045e4d307ead7744b12584e':'Millard School District',
    '610d0837931db8cfdf500fef':'Mission Consolidated Independent School District',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '6045e4cf07ead7744b125847':'Muscatine Community School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f2609807a1c0000950bb459':'North Special School District',
    '6045e4c907ead7744b12583c':'Northside Independent School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '6017ab3043ca9c39151838d4':'Oswego School District',
    '6045e4dd07ead7744b12585f':'Palm Beach County School District',
    '60913aaea5fd4b56a4bafa70':'Palm Springs Unified',
    '5f2609807a1c0000950bb479':'Panorama Education',
    '5f2609807a1c0000950bb46f':'Paradise Schools',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '6045e4de07ead7744b125860':'Paterson School District',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '6045e4d507ead7744b125850':'Rich School District',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '6045e4d507ead7744b125851':'San Francisco Unified School District',
    '6023a76f9e8e623753fc3060':'San Jose Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '6045e4df07ead7744b125862':'San Marcos Unified School District',
    '6045e4df07ead7744b125863':'San Marino Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '602e60e567d3e6c0a4eb4d99':'School District of Palm Beach County',
    '6045e4d807ead7744b125856':'School District of the Chathams',
    '6045e4de07ead7744b125861':'Sevier School District',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    '123':'Skillman',
    '6045e4e007ead7744b125864':'South Summit School District',
    '60eea965ae7de54f57abf234':'Southfield Public Schools',
    '5f2609807a1c0000950bb46a':'Springfield Public School',
    
    '6045e4e007ead7744b125865':'Sudbury Public Schools',
    '6045e4e107ead7744b125866':'Tooele County School District',
    '60a7b03831afdba383052726':'United Way Of Santa Barbara',
    '6045e4d607ead7744b125852':'Upland Unified School District',
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '456':'UWBA',
    '6023a7949e8e623753fc3061':'Wasatch County School District',
    '6045e4e207ead7744b125867':'Washoe County School District',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '6045e4d607ead7744b125853':'West Contra Costa Unified School District',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '6045e4e207ead7744b125868':'Westford Public Schools',
    '6045e4d207ead7744b12584c':'White River School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5f2609807a1c0000950bb45d':'Youngstown'}

    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    district=disdic[districtid]


    collection1 = db.user_master
    df1 = DataFrame(list(collection.aggregate([
    {"$match":
    {'$and': [
    #           {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
              {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            {'USER_ID.schoolId._id':{'$ne':None}},
    # //               {'IS_ADMIN':'Y'},
    # //             {'USER_ID.IS_PORTAL':'Y'},
             {'USER_ID.EMAIL_ID':{'$ne':''}},
             {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},

             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
         {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
        {'$group':{'_id':'$USER_ID._id','pc':{'$sum':1}}},
              {'$project':{'_id':1,'practice_count':'$pc'}},
    { '$sort' : { 'practice_count' : -1} }



    # //               {'$count':'count'}
              ])))
    df1

    df2=DataFrame(list(collection1.aggregate([{"$match":
     {'$and': [
    #         {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"IS_DISABLED":{"$ne":"Y"}},
              {"IS_BLOCKED":{"$ne":"Y"}},
             {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #                  {'_id':{'$in':user}},
    # //               {'IS_ADMIN':'Y'},

             {'EMAIL_ID':{'$ne':''}},
             {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
         {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                       {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

        {'$group':{'_id':'$_id','ID':{'$addToSet':'$_id'},'school_name':{'$first':'$schoolId.NAME'},'user_name':{'$first':'$USER_NAME'}
                  }},


        {'$project':{'_id':1,'user_name':1,'school_name':1}},])))

    df=pd.merge(df1,df2, how='left', on='_id')
    df
    if df.empty == True:

        schname=[]
        pc=[]

    else:
        df["users"] = df["user_name"] +','+' ' + df["school_name"]
        schname=df['users'].tolist()
        pc=df['practice_count'].tolist()



    #     data=[]    
    #     for i,k in zip(schname,uc):

    #         data.append([i,k])

    #     for i in range(len(schname)):
    #             schname[i] = schname[i]
    data={'schname':schname[0:20],'practicecount':pc[0:20]}

    return json.dumps(data)

@app.route('/districtcardsinfo/<districtid>')
def district_count_cards(districtid):
    disdic={
    '620f3d6132c6d4813f4c9887':'Jackson County Schools',
    "5f2609807a1c0000950bb459":"North Special School District",
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',
    '6045e4d007ead7744b125848':'Adams 12 Five Star Schools',
    '619268dd81f00a4319a65a52':'Access Community',
    '6045e4d707ead7744b125854':'Adams County School District 14',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '6045e4c907ead7744b12583d':'Apple Valley Unified School District',
    '789':'Attendance works',
    '6045e4d707ead7744b125855':'Aurora Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '6045e4d107ead7744b125849':'Berkeley Public Schools',
    '5fe2e25d4d0ca68d7baf889d':'BGCA',
    '6045e4ca07ead7744b12583e':'Bishop Unified School District',
    '6045e4d107ead7744b12584a':'Bismarck Public Schools',
    '5fe318b14d0ca68d7baf889e':'BLUE',
    '6045e4c807ead7744b12583b':'Boston Public Schools',
    '6023a6d79e8e623753fc305c':'Boulder Valley School District',
    '60f7bf747cc8db72d772e465':'Bright Horizons Early Learning Centers',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '6045e4ca07ead7744b12583f':'Canyons School District',
    '60473f8823e88e242074ebd2':'Champlain Valley School District',
    '6045e4d907ead7744b125858':'Chicago Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '6045e4d907ead7744b125857':'Colton Joint Unified School District',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '6045e4da07ead7744b125859':'Dennis-Yarmouth Regional School District',
    '6045e4cb07ead7744b125840':'Denver Public Schools',
    '5f2609807a1c0000950bb46e':'District 25 New York Schools',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '6045e4c707ead7744b12583a':'Durham Public Schools',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb464':'Equity Education',
    '6045e4cc07ead7744b125841':'Fairfax County Public Schools',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '6045e4cd07ead7744b125843':'Falmouth Public Schools',
    '6045e4da07ead7744b12585a':'FITCHBURG PUBLIC SCHOOLS',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '6023a7269e8e623753fc305e':'Fulton County School System',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '6045e4d207ead7744b12584b':'Glenbard District 87',
    '5f2609807a1c0000950bb450':'Goleta District',
    '6045e4cd07ead7744b125844':'Granite School District',
    '5f2609807a1c0000950bb474':'Greenburgh North Castle Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '60cb8971c5b0e89ed7ac0aa1':'Hall County School District',
    '5f9aa5e526edbed399d56c92':'Hamilton-Wenham Regional School District',
    '6045e4c707ead7744b125839':'Hartford Public Schools',
    '5f2609807a1c0000950bb47c':'Hawaii Public Schools',
    '6045e4ce07ead7744b125845':'Helena Public Schools',
    '6045e4db07ead7744b12585b':'HidalgoIndependent School district',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '6045e4db07ead7744b12585c':'Hopedale Public Schools',
    '6045e4cc07ead7744b125842':'Houston Independent School District',
    '60b872ce826cab06ebdf044e':'Kalamazoo Public Schools',
    '6045e4dc07ead7744b12585d':'Kearsarge Regional School District',
    '6045e4d307ead7744b12584d':'KIPP Public Schools',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '6045e4cf07ead7744b125846':'Lamar Consolidated Independent School District',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '6045e4dc07ead7744b12585e':'Littleton Public Schools',
    '5fe2e1ee4d0ca68d7baf889c':'LSF-Head Start',
    '6023a7499e8e623753fc305f':'Manatee County School District',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '6077e1b5eaa8bae0e2e04a64':'Medfield School District',
    '6023a7019e8e623753fc305d':'Miami-Dade County Public Schools',
    '5f2609807a1c0000950bb465':'Middleton-Cross Plains Area School District',
    '6045e4d407ead7744b12584f':'Mill Valley School District',
    '6045e4d307ead7744b12584e':'Millard School District',
    '610d0837931db8cfdf500fef':'Mission Consolidated Independent School District',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '6045e4cf07ead7744b125847':'Muscatine Community School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f2609807a1c0000950bb459':'North Special School District',
    '6045e4c907ead7744b12583c':'Northside Independent School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '6017ab3043ca9c39151838d4':'Oswego School District',
    '6045e4dd07ead7744b12585f':'Palm Beach County School District',
    '60913aaea5fd4b56a4bafa70':'Palm Springs Unified',
    '5f2609807a1c0000950bb479':'Panorama Education',
    '5f2609807a1c0000950bb46f':'Paradise Schools',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '6045e4de07ead7744b125860':'Paterson School District',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '6045e4d507ead7744b125850':'Rich School District',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '6045e4d507ead7744b125851':'San Francisco Unified School District',
    '6023a76f9e8e623753fc3060':'San Jose Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '6045e4df07ead7744b125862':'San Marcos Unified School District',
    '6045e4df07ead7744b125863':'San Marino Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '602e60e567d3e6c0a4eb4d99':'School District of Palm Beach County',
    '6045e4d807ead7744b125856':'School District of the Chathams',
    '6045e4de07ead7744b125861':'Sevier School District',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    '123':'Skillman',
    '6045e4e007ead7744b125864':'South Summit School District',
    '60eea965ae7de54f57abf234':'Southfield Public Schools',
    '5f2609807a1c0000950bb46a':'Springfield Public School',
    '6045e4e007ead7744b125865':'Sudbury Public Schools',
    '6045e4e107ead7744b125866':'Tooele County School District',
    '60a7b03831afdba383052726':'United Way Of Santa Barbara',
    '6045e4d607ead7744b125852':'Upland Unified School District',
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '456':'UWBA',
    '6023a7949e8e623753fc3061':'Wasatch County School District',
    '6045e4e207ead7744b125867':'Washoe County School District',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '6045e4d607ead7744b125853':'West Contra Costa Unified School District',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '6045e4e207ead7744b125868':'Westford Public Schools',
    '6045e4d207ead7744b12584c':'White River School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5f2609807a1c0000950bb45d':'Youngstown'}
    from datetime import datetime
    from datetime import timedelta
    
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection1 = db.user_master
    collection2=db.audio_track_master
    collection3=db.login_logs
    district=disdic[districtid]
    print(district)
    df1 = DataFrame(list(collection1.aggregate([
     {"$match":
         {'$and': [
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                  {'IS_PORTAL':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
#                  {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
             {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','ID':{'$addToSet':'$schoolId._id'},'dn':{'$first':'$DISTRICT_ID.DISTRICT_NAME'}}},
                  {'$project':{'_id':1,'school_count':{'$size':'$ID'},'district':'$dn'}}
                  ])))
    df2 = DataFrame(list(collection1.aggregate([ {"$match":
         {'$and': [
              {'ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2a")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                  {'IS_PORTAL':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
                {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#                  {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','ID':{'$addToSet':'$_id'}}},
                  {'$project':{'_id':1,'teacher_count':{'$size':'$ID'}}}
                  ])))
    df5 = DataFrame(list(collection1.aggregate([ {"$match":
         {'$and': [
              {'ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                  {'IS_PORTAL':'Y'},
                  {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
                 {'EMAIL_ID':{'$ne':''}},
#                  {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','ID':{'$addToSet':'$_id'}}},
                  {'$project':{'_id':1,'family_count':{'$size':'$ID'}}}
                  ])))
    today1= datetime.utcnow()
    tod1= today1+ timedelta(hours=4)
    start1= tod1-timedelta(days=30)
    df3=DataFrame(list(collection2.aggregate([
     {"$match":
         {'$and': [
    # //          {'ROLE_ID._id' :{'$':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
                 {'MODIFIED_DATE':{'$gte':csy_first_date()}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','pc':{'$sum':1},'MINDFUL_MINUTES':{'$sum':{'$round':[{'$divide':[{'$subtract':['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
                  {'$project':{'_id':1,'practice_sessions':'$pc','MINDFUL_MINUTES':'$MINDFUL_MINUTES'}}])))
   

    df4=DataFrame(list(collection3.aggregate([{"$match":
         {'$and': [
    #           {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                {'USER_ID.schoolId._id':{'$ne':None}},
    # //               {'IS_ADMIN':'Y'},
                  {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
                 {'LAST_LOGGED_IN':{'$gte':start1}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','pc':{'$sum':1}}},
                  {'$project':{'_id':1,'logins':'$pc'}}])))
    df6=DataFrame(list(collection2.aggregate([
     {"$match":
         {'$and': [
             {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
                 {'MODIFIED_DATE':{'$gte':csy_first_date()}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','pc':{'$sum':1},'MINDFUL_MINUTES':{'$sum':{'$round':[{'$divide':[{'$subtract':['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
                  {'$project':{'_id':1,'practice_sessions_t':'$pc'}}])))
   
    df7=DataFrame(list(collection2.aggregate([
     {"$match":
         {'$and': [
             {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
                 {'MODIFIED_DATE':{'$gte':csy_first_date()}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','pc':{'$sum':1},'MINDFUL_MINUTES':{'$sum':{'$round':[{'$divide':[{'$subtract':['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
                  {'$project':{'_id':1,'practice_sessions_p':'$pc'}}])))
   

    sc=[0]
    try:
        sc=df1['school_count']
    except:
        sc=[0]
        
    tc=[0]
    try:
        tc=df2['teacher_count']
    except:
        tc=[0]
    
    pct=[0]
    try:
        pct=df6['practice_sessions_t']
    except:
        pct=[0]
    pcp=[0]
    try:
        pcp=df7['practice_sessions_p']
    except:
        pcp=[0]
    mm=[0]
    try:
        mm=df3['MINDFUL_MINUTES']
    except:
        mm=[0]
    
    lc=[0]
    try:
        lc=df4['logins']
    except:
        lc=[0]
        
    fc=[0]
    try:
        fc=df5['family_count']
    except:
        fc=[0]
    
    
    
    
    dn=[0]
    try:
        dn=df1['district']
    except:
        dn=[0]
    
    
#     print(lc)
    
    data={"schoolcount":str(sc[0]),"teachercount":str(tc[0]),"familycount":str(fc[0]),"teacherpracticecount":str(pct[0]),"parentspracticecount":str(pcp[0]),"logincount":str(lc[0]),
          'MINDFUL_MINUTES':str(mm[0]),'district':str(dn[0])}
    return json.dumps(data)




@app.route('/districtusertableteacher/<districtid>')
def district_user_table_teacher(districtid):
    disdic={
    '620f3d6132c6d4813f4c9887':'Jackson County Schools',
    "5f2609807a1c0000950bb459":"North Special School District",    
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',
    '6045e4d007ead7744b125848':'Adams 12 Five Star Schools',
    '619268dd81f00a4319a65a52':'Access Community',
    '6045e4d707ead7744b125854':'Adams County School District 14',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '6045e4c907ead7744b12583d':'Apple Valley Unified School District',
    '789':'Attendance works',
    '6045e4d707ead7744b125855':'Aurora Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '6045e4d107ead7744b125849':'Berkeley Public Schools',
    '5fe2e25d4d0ca68d7baf889d':'BGCA',
    '6045e4ca07ead7744b12583e':'Bishop Unified School District',
    '6045e4d107ead7744b12584a':'Bismarck Public Schools',
    '5fe318b14d0ca68d7baf889e':'BLUE',
    '6045e4c807ead7744b12583b':'Boston Public Schools',
    '6023a6d79e8e623753fc305c':'Boulder Valley School District',
    '60f7bf747cc8db72d772e465':'Bright Horizons Early Learning Centers',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '6045e4ca07ead7744b12583f':'Canyons School District',
    '60473f8823e88e242074ebd2':'Champlain Valley School District',
    '6045e4d907ead7744b125858':'Chicago Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '6045e4d907ead7744b125857':'Colton Joint Unified School District',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '6045e4da07ead7744b125859':'Dennis-Yarmouth Regional School District',
    '6045e4cb07ead7744b125840':'Denver Public Schools',
    '5f2609807a1c0000950bb46e':'District 25 New York Schools',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '6045e4c707ead7744b12583a':'Durham Public Schools',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb464':'Equity Education',
    '6045e4cc07ead7744b125841':'Fairfax County Public Schools',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '6045e4cd07ead7744b125843':'Falmouth Public Schools',
    '6045e4da07ead7744b12585a':'FITCHBURG PUBLIC SCHOOLS',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '6023a7269e8e623753fc305e':'Fulton County School System',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '6045e4d207ead7744b12584b':'Glenbard District 87',
    '5f2609807a1c0000950bb450':'Goleta District',
    '6045e4cd07ead7744b125844':'Granite School District',
    '5f2609807a1c0000950bb474':'Greenburgh North Castle Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '60cb8971c5b0e89ed7ac0aa1':'Hall County School District',
    '5f9aa5e526edbed399d56c92':'Hamilton-Wenham Regional School District',
    '6045e4c707ead7744b125839':'Hartford Public Schools',
    '5f2609807a1c0000950bb47c':'Hawaii Public Schools',
    '6045e4ce07ead7744b125845':'Helena Public Schools',
    '6045e4db07ead7744b12585b':'HidalgoIndependent School district',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '6045e4db07ead7744b12585c':'Hopedale Public Schools',
    '6045e4cc07ead7744b125842':'Houston Independent School District',
    '60b872ce826cab06ebdf044e':'Kalamazoo Public Schools',
    '6045e4dc07ead7744b12585d':'Kearsarge Regional School District',
    '6045e4d307ead7744b12584d':'KIPP Public Schools',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '6045e4cf07ead7744b125846':'Lamar Consolidated Independent School District',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '6045e4dc07ead7744b12585e':'Littleton Public Schools',
    '5fe2e1ee4d0ca68d7baf889c':'LSF-Head Start',
    '6023a7499e8e623753fc305f':'Manatee County School District',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '6077e1b5eaa8bae0e2e04a64':'Medfield School District',
    '6023a7019e8e623753fc305d':'Miami-Dade County Public Schools',
    '5f2609807a1c0000950bb465':'Middleton-Cross Plains Area School District',
    '6045e4d407ead7744b12584f':'Mill Valley School District',
    '6045e4d307ead7744b12584e':'Millard School District',
    '610d0837931db8cfdf500fef':'Mission Consolidated Independent School District',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '6045e4cf07ead7744b125847':'Muscatine Community School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f2609807a1c0000950bb459':'North Special School District',
    '6045e4c907ead7744b12583c':'Northside Independent School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '6017ab3043ca9c39151838d4':'Oswego School District',
    '6045e4dd07ead7744b12585f':'Palm Beach County School District',
    '60913aaea5fd4b56a4bafa70':'Palm Springs Unified',
    '5f2609807a1c0000950bb479':'Panorama Education',
    '5f2609807a1c0000950bb46f':'Paradise Schools',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '6045e4de07ead7744b125860':'Paterson School District',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '6045e4d507ead7744b125850':'Rich School District',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '6045e4d507ead7744b125851':'San Francisco Unified School District',
    '6023a76f9e8e623753fc3060':'San Jose Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '6045e4df07ead7744b125862':'San Marcos Unified School District',
    '6045e4df07ead7744b125863':'San Marino Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '602e60e567d3e6c0a4eb4d99':'School District of Palm Beach County',
    '6045e4d807ead7744b125856':'School District of the Chathams',
    '6045e4de07ead7744b125861':'Sevier School District',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    '123':'Skillman',
    '6045e4e007ead7744b125864':'South Summit School District',
    '60eea965ae7de54f57abf234':'Southfield Public Schools',
    '5f2609807a1c0000950bb46a':'Springfield Public School',
    '6045e4e007ead7744b125865':'Sudbury Public Schools',
    '6045e4e107ead7744b125866':'Tooele County School District',
    '60a7b03831afdba383052726':'United Way Of Santa Barbara',
    '6045e4d607ead7744b125852':'Upland Unified School District',
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '456':'UWBA',
    '6023a7949e8e623753fc3061':'Wasatch County School District',
    '6045e4e207ead7744b125867':'Washoe County School District',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '6045e4d607ead7744b125853':'West Contra Costa Unified School District',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '6045e4e207ead7744b125868':'Westford Public Schools',
    '6045e4d207ead7744b12584c':'White River School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5f2609807a1c0000950bb45d':'Youngstown'}
    
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 

    
    collection2=db.school_master
    collection=db.user_master
    collection1=db.audio_track_master
    collection3=db.subscription_master
    district=disdic[districtid]

    from datetime import datetime


    df3=DataFrame(list(collection1.aggregate([
     {"$match":
         {'$and': [
              {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
    #                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
                 {'MODIFIED_DATE':{'$gte':csy_first_date()}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$USER_ID._id','user':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'last_practice_date':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}}}},
                  {'$project':{'_id':1,'user_id':'$user','Practice_Count':'$pc','last_practice_date':1}}])))




    df2=DataFrame(list(collection.aggregate([{"$match":
         {'$and': [
            {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #                 {'_id':{'$in':user}},
    # //               {'IS_ADMIN':'Y'},

                 {'EMAIL_ID':{'$ne':''}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

            {'$group':{'_id':'$_id','ID':{'$addToSet':'$_id'},'school_name':{'$first':'$schoolId.NAME'},'user_name':{'$first':'$USER_NAME'},'EMAIL':{'$first':'$EMAIL_ID'},'date':{'$first':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},'country':{'$first':'$schoolId.COUNTRY'},
                      'State':{'$first':'$schoolId.STATE'},'city':{'$first':'$schoolId.CITY'}}},


            {'$project':{'_id':1,'Created_date':'$date','country':1,'State':1,'user_name':1,'EMAIL':1,'school_name':1,'city':1}},])))




    df4 = DataFrame(list(collection3.aggregate([
    {"$match":
         {'$and': [
                 {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #             {'USER_ID._id':{'$in':user}},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
    #                  
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$USER_ID._id','subsdate':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$SUBSCRIPTION_EXPIRE_DATE'}}}}},
                  {'$project':{'_id':1,'Subscription_expire_date':'$subsdate'}},
                   ])))

    df5=pd.merge(df3,df2, how='left', on='_id')
    df=pd.merge(df5,df4, how='left', on='_id')
    df


    df['country'].fillna("NO INFO", inplace=True)
    df.Practice_Count=df.Practice_Count.fillna(0)
    df.Practice_Count=df.Practice_Count.astype('int64')

    df['school_name'].replace("",'NO INFO', inplace=True)
    df['city'].replace("",'NO INFO', inplace=True)
    df['State'].replace("",'NO INFO', inplace=True)
    df['country'].replace("",'NO INFO', inplace=True)
    df['user_name'].replace("",'NO INFO', inplace=True)
    df['city'].fillna("NO INFO", inplace=True)
    df['city'].replace("NULL","NO INFO", inplace=True)
    df['State'].fillna("NO INFO", inplace=True)
    df['State'].replace("NULL","NO INFO", inplace=True)



    df['Created_date']=df['Created_date'].fillna(0)
    df['last_practice_date']=df['last_practice_date'].fillna('NO PRACTICE')
    df['Subscription_expire_date']=df['Subscription_expire_date'].fillna('No Info')

    data=[]
    for i,j,k,l,m,n,o,p,r,s in zip(df['user_name'].tolist(),df['EMAIL'].tolist(),df['school_name'].tolist(),df['country'].tolist(),df['State'].tolist(),df['city'].tolist(),df['Practice_Count'].tolist(),df['Created_date'].tolist(),df['last_practice_date'].tolist(),df['Subscription_expire_date'].tolist()):
        data.append([i,j,k,l,m,n,o,p,r,s])
    temp={"data":data}
    return json.dumps(temp)

   
@app.route('/districtusertableparent/<districtid>')
def district_user_table_parents(districtid):
    disdic={
    '620f3d6132c6d4813f4c9887':'Jackson County Schools',
    "5f2609807a1c0000950bb459":"North Special School District",
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',
    '6045e4d007ead7744b125848':'Adams 12 Five Star Schools',
    '619268dd81f00a4319a65a52':'Access Community',
    '6045e4d707ead7744b125854':'Adams County School District 14',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '6045e4c907ead7744b12583d':'Apple Valley Unified School District',
    '789':'Attendance works',
    '6045e4d707ead7744b125855':'Aurora Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '6045e4d107ead7744b125849':'Berkeley Public Schools',
    '5fe2e25d4d0ca68d7baf889d':'BGCA',
    '6045e4ca07ead7744b12583e':'Bishop Unified School District',
    '6045e4d107ead7744b12584a':'Bismarck Public Schools',
    '5fe318b14d0ca68d7baf889e':'BLUE',
    '6045e4c807ead7744b12583b':'Boston Public Schools',
    '6023a6d79e8e623753fc305c':'Boulder Valley School District',
    '60f7bf747cc8db72d772e465':'Bright Horizons Early Learning Centers',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '6045e4ca07ead7744b12583f':'Canyons School District',
    '60473f8823e88e242074ebd2':'Champlain Valley School District',
    '6045e4d907ead7744b125858':'Chicago Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '6045e4d907ead7744b125857':'Colton Joint Unified School District',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '6045e4da07ead7744b125859':'Dennis-Yarmouth Regional School District',
    '6045e4cb07ead7744b125840':'Denver Public Schools',
    '5f2609807a1c0000950bb46e':'District 25 New York Schools',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '6045e4c707ead7744b12583a':'Durham Public Schools',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb464':'Equity Education',
    '6045e4cc07ead7744b125841':'Fairfax County Public Schools',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '6045e4cd07ead7744b125843':'Falmouth Public Schools',
    '6045e4da07ead7744b12585a':'FITCHBURG PUBLIC SCHOOLS',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '6023a7269e8e623753fc305e':'Fulton County School System',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '6045e4d207ead7744b12584b':'Glenbard District 87',
    '5f2609807a1c0000950bb450':'Goleta District',
    '6045e4cd07ead7744b125844':'Granite School District',
    '5f2609807a1c0000950bb474':'Greenburgh North Castle Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '60cb8971c5b0e89ed7ac0aa1':'Hall County School District',
    '5f9aa5e526edbed399d56c92':'Hamilton-Wenham Regional School District',
    '6045e4c707ead7744b125839':'Hartford Public Schools',
    '5f2609807a1c0000950bb47c':'Hawaii Public Schools',
    '6045e4ce07ead7744b125845':'Helena Public Schools',
    '6045e4db07ead7744b12585b':'HidalgoIndependent School district',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '6045e4db07ead7744b12585c':'Hopedale Public Schools',
    '6045e4cc07ead7744b125842':'Houston Independent School District',
    '60b872ce826cab06ebdf044e':'Kalamazoo Public Schools',
    '6045e4dc07ead7744b12585d':'Kearsarge Regional School District',
    '6045e4d307ead7744b12584d':'KIPP Public Schools',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '6045e4cf07ead7744b125846':'Lamar Consolidated Independent School District',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '6045e4dc07ead7744b12585e':'Littleton Public Schools',
    '5fe2e1ee4d0ca68d7baf889c':'LSF-Head Start',
    '6023a7499e8e623753fc305f':'Manatee County School District',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '6077e1b5eaa8bae0e2e04a64':'Medfield School District',
    '6023a7019e8e623753fc305d':'Miami-Dade County Public Schools',
    '5f2609807a1c0000950bb465':'Middleton-Cross Plains Area School District',
    '6045e4d407ead7744b12584f':'Mill Valley School District',
    '6045e4d307ead7744b12584e':'Millard School District',
    '610d0837931db8cfdf500fef':'Mission Consolidated Independent School District',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '6045e4cf07ead7744b125847':'Muscatine Community School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f2609807a1c0000950bb459':'North Special School District',
    '6045e4c907ead7744b12583c':'Northside Independent School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '6017ab3043ca9c39151838d4':'Oswego School District',
    '6045e4dd07ead7744b12585f':'Palm Beach County School District',
    '60913aaea5fd4b56a4bafa70':'Palm Springs Unified',
    '5f2609807a1c0000950bb479':'Panorama Education',
    '5f2609807a1c0000950bb46f':'Paradise Schools',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '6045e4de07ead7744b125860':'Paterson School District',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '6045e4d507ead7744b125850':'Rich School District',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '6045e4d507ead7744b125851':'San Francisco Unified School District',
    '6023a76f9e8e623753fc3060':'San Jose Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '6045e4df07ead7744b125862':'San Marcos Unified School District',
    '6045e4df07ead7744b125863':'San Marino Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '602e60e567d3e6c0a4eb4d99':'School District of Palm Beach County',
    '6045e4d807ead7744b125856':'School District of the Chathams',
    '6045e4de07ead7744b125861':'Sevier School District',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    '123':'Skillman',
    '6045e4e007ead7744b125864':'South Summit School District',
    '60eea965ae7de54f57abf234':'Southfield Public Schools',
    '5f2609807a1c0000950bb46a':'Springfield Public School',
    '6045e4e007ead7744b125865':'Sudbury Public Schools',
    '6045e4e107ead7744b125866':'Tooele County School District',
    '60a7b03831afdba383052726':'United Way Of Santa Barbara',
    '6045e4d607ead7744b125852':'Upland Unified School District',
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '456':'UWBA',
    '6023a7949e8e623753fc3061':'Wasatch County School District',
    '6045e4e207ead7744b125867':'Washoe County School District',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '6045e4d607ead7744b125853':'West Contra Costa Unified School District',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '6045e4e207ead7744b125868':'Westford Public Schools',
    '6045e4d207ead7744b12584c':'White River School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5f2609807a1c0000950bb45d':'Youngstown'}
    
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    from datetime import datetime
    
    collection2=db.school_master
    collection=db.user_master
    collection1=db.audio_track_master
    collection3=db.subscription_master
    district=disdic[districtid]




    df3=DataFrame(list(collection1.aggregate([
     {"$match":
         {'$and': [
              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
    #                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
                 {'MODIFIED_DATE':{'$gte':csy_first_date()}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$USER_ID._id','user':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'last_practice_date':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}}}},
                  {'$project':{'_id':1,'user_id':'$user','Practice_Count':'$pc','last_practice_date':1}}])))




    df2=DataFrame(list(collection.aggregate([{"$match":
         {'$and': [
            {'ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #                 {'_id':{'$in':user}},
    # //               {'IS_ADMIN':'Y'},

                 {'EMAIL_ID':{'$ne':''}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

            {'$group':{'_id':'$_id','ID':{'$addToSet':'$_id'},'school_name':{'$first':'$schoolId.NAME'},'user_name':{'$first':'$USER_NAME'},'EMAIL':{'$first':'$EMAIL_ID'},'date':{'$first':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},'country':{'$first':'$schoolId.COUNTRY'},
                      'State':{'$first':'$schoolId.STATE'},'city':{'$first':'$schoolId.CITY'}}},


            {'$project':{'_id':1,'Created_date':'$date','country':1,'State':1,'user_name':1,'EMAIL':1,'school_name':1,'city':1}},])))




    df4 = DataFrame(list(collection3.aggregate([
    {"$match":
         {'$and': [
                 {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #             {'USER_ID._id':{'$in':user}},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
    #                  
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$USER_ID._id','subsdate':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$SUBSCRIPTION_EXPIRE_DATE'}}}}},
                  {'$project':{'_id':1,'Subscription_expire_date':'$subsdate'}},
                   ])))

    df5=pd.merge(df3,df2, how='left', on='_id')
    df=pd.merge(df5,df4, how='left', on='_id')
    df


    df['country'].fillna("NO INFO", inplace=True)
    df.Practice_Count=df.Practice_Count.fillna(0)
    df.Practice_Count=df.Practice_Count.astype('int64')

    df['school_name'].replace("",'NO INFO', inplace=True)
    df['city'].replace("",'NO INFO', inplace=True)
    df['State'].replace("",'NO INFO', inplace=True)
    df['country'].replace("",'NO INFO', inplace=True)
    df['user_name'].replace("",'NO INFO', inplace=True)
    df['city'].fillna("NO INFO", inplace=True)
    df['city'].replace("NULL","NO INFO", inplace=True)
    df['State'].fillna("NO INFO", inplace=True)
    df['State'].replace("NULL","NO INFO", inplace=True)



    df['Created_date']=df['Created_date'].fillna(0)
    df['last_practice_date']=df['last_practice_date'].fillna('NO PRACTICE')
    df['Subscription_expire_date']=df['Subscription_expire_date'].fillna('No Info')

    data=[]
    for i,j,k,l,m,n,o,p,r,s in zip(df['user_name'].tolist(),df['EMAIL'].tolist(),df['school_name'].tolist(),df['country'].tolist(),df['State'].tolist(),df['city'].tolist(),df['Practice_Count'].tolist(),df['Created_date'].tolist(),df['last_practice_date'].tolist(),df['Subscription_expire_date'].tolist()):
        data.append([i,j,k,l,m,n,o,p,r,s])
    temp={"data":data}
    return json.dumps(temp)

@app.route('/monthwisepracticesuperadmin/<districtid>')
def monthwisepcsuper(districtid):
    disdic={
    '620f3d6132c6d4813f4c9887':'Jackson County Schools',
    "5f2609807a1c0000950bb459":"North Special School District",
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',
    '6045e4d007ead7744b125848':'Adams 12 Five Star Schools',
    '619268dd81f00a4319a65a52':'Access Community',
    '6045e4d707ead7744b125854':'Adams County School District 14',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '6045e4c907ead7744b12583d':'Apple Valley Unified School District',
    '789':'Attendance works',
    '6045e4d707ead7744b125855':'Aurora Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '6045e4d107ead7744b125849':'Berkeley Public Schools',
    '5fe2e25d4d0ca68d7baf889d':'BGCA',
    '6045e4ca07ead7744b12583e':'Bishop Unified School District',
    '6045e4d107ead7744b12584a':'Bismarck Public Schools',
    '5fe318b14d0ca68d7baf889e':'BLUE',
    '6045e4c807ead7744b12583b':'Boston Public Schools',
    '6023a6d79e8e623753fc305c':'Boulder Valley School District',
    '60f7bf747cc8db72d772e465':'Bright Horizons Early Learning Centers',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '6045e4ca07ead7744b12583f':'Canyons School District',
    '60473f8823e88e242074ebd2':'Champlain Valley School District',
    '6045e4d907ead7744b125858':'Chicago Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '6045e4d907ead7744b125857':'Colton Joint Unified School District',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '6045e4da07ead7744b125859':'Dennis-Yarmouth Regional School District',
    '6045e4cb07ead7744b125840':'Denver Public Schools',
    '5f2609807a1c0000950bb46e':'District 25 New York Schools',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '6045e4c707ead7744b12583a':'Durham Public Schools',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb464':'Equity Education',
    '6045e4cc07ead7744b125841':'Fairfax County Public Schools',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '6045e4cd07ead7744b125843':'Falmouth Public Schools',
    '6045e4da07ead7744b12585a':'FITCHBURG PUBLIC SCHOOLS',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '6023a7269e8e623753fc305e':'Fulton County School System',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '6045e4d207ead7744b12584b':'Glenbard District 87',
    '5f2609807a1c0000950bb450':'Goleta District',
    '6045e4cd07ead7744b125844':'Granite School District',
    '5f2609807a1c0000950bb474':'Greenburgh North Castle Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '60cb8971c5b0e89ed7ac0aa1':'Hall County School District',
    '5f9aa5e526edbed399d56c92':'Hamilton-Wenham Regional School District',
    '6045e4c707ead7744b125839':'Hartford Public Schools',
    '5f2609807a1c0000950bb47c':'Hawaii Public Schools',
    '6045e4ce07ead7744b125845':'Helena Public Schools',
    '6045e4db07ead7744b12585b':'HidalgoIndependent School district',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '6045e4db07ead7744b12585c':'Hopedale Public Schools',
    '6045e4cc07ead7744b125842':'Houston Independent School District',
    '60b872ce826cab06ebdf044e':'Kalamazoo Public Schools',
    '6045e4dc07ead7744b12585d':'Kearsarge Regional School District',
    '6045e4d307ead7744b12584d':'KIPP Public Schools',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '6045e4cf07ead7744b125846':'Lamar Consolidated Independent School District',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '6045e4dc07ead7744b12585e':'Littleton Public Schools',
    '5fe2e1ee4d0ca68d7baf889c':'LSF-Head Start',
    '6023a7499e8e623753fc305f':'Manatee County School District',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '6077e1b5eaa8bae0e2e04a64':'Medfield School District',
    '6023a7019e8e623753fc305d':'Miami-Dade County Public Schools',
    '5f2609807a1c0000950bb465':'Middleton-Cross Plains Area School District',
    '6045e4d407ead7744b12584f':'Mill Valley School District',
    '6045e4d307ead7744b12584e':'Millard School District',
    '610d0837931db8cfdf500fef':'Mission Consolidated Independent School District',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '6045e4cf07ead7744b125847':'Muscatine Community School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f2609807a1c0000950bb459':'North Special School District',
    '6045e4c907ead7744b12583c':'Northside Independent School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '6017ab3043ca9c39151838d4':'Oswego School District',
    '6045e4dd07ead7744b12585f':'Palm Beach County School District',
    '60913aaea5fd4b56a4bafa70':'Palm Springs Unified',
    '5f2609807a1c0000950bb479':'Panorama Education',
    '5f2609807a1c0000950bb46f':'Paradise Schools',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '6045e4de07ead7744b125860':'Paterson School District',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '6045e4d507ead7744b125850':'Rich School District',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '6045e4d507ead7744b125851':'San Francisco Unified School District',
    '6023a76f9e8e623753fc3060':'San Jose Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '6045e4df07ead7744b125862':'San Marcos Unified School District',
    '6045e4df07ead7744b125863':'San Marino Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '602e60e567d3e6c0a4eb4d99':'School District of Palm Beach County',
    '6045e4d807ead7744b125856':'School District of the Chathams',
    '6045e4de07ead7744b125861':'Sevier School District',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    '123':'Skillman',
    '6045e4e007ead7744b125864':'South Summit School District',
    '60eea965ae7de54f57abf234':'Southfield Public Schools',
    '5f2609807a1c0000950bb46a':'Springfield Public School',
    '6045e4e007ead7744b125865':'Sudbury Public Schools',
    '6045e4e107ead7744b125866':'Tooele County School District',
    '60a7b03831afdba383052726':'United Way Of Santa Barbara',
    '6045e4d607ead7744b125852':'Upland Unified School District',
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '456':'UWBA',
    '6023a7949e8e623753fc3061':'Wasatch County School District',
    '6045e4e207ead7744b125867':'Washoe County School District',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '6045e4d607ead7744b125853':'West Contra Costa Unified School District',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '6045e4e207ead7744b125868':'Westford Public Schools',
    '6045e4d207ead7744b12584c':'White River School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5f2609807a1c0000950bb45d':'Youngstown'}
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    district=disdic[districtid]
#     myDatetime1 = dateutil.parser.parse(startdate)
#     myDatetime2 = dateutil.parser.parse(enddate)
    df1= DataFrame(list(collection.aggregate([
    {"$match":
    {'$and': [
#       {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
#             {"USER_ID._id":{'$not':{"$in":db.schoology_master.distinct( "USER_ID._id")}}},
#             {"USER_ID._id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.schoolId._id':{'$ne':None}},
    # //               {'IS_ADMIN':'Y'},
        
    # //             {'USER_ID.IS_PORTAL':'Y'},
         {'USER_ID.EMAIL_ID':{'$ne':''}},
                 {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#                {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
         {'MODIFIED_DATE':{'$gte':csy_first_date()}},
#         
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
    {'$group':{'_id':{'$month':'$MODIFIED_DATE'},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
          {'$project':{'_id':1,'practice_count':'$pc'}},
    { '$sort' : { '_id' : 1} }
              ])))
    if df1.empty:
        df1=pd.DataFrame({'_id':[1,2,3,4,5,6,7,8,9,10,11,12],'practice_count':[0,0,0,0,0,0,0,0,0,0,0,0]})
    
    df2 = DataFrame(list(collection.aggregate([
    {"$match":
    {'$and': [
      {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID._id":{'$not':{"$in":db.schoology_master.distinct( "USER_ID._id")}}},
            {"USER_ID._id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.schoolId._id':{'$ne':None}},
        
    # //               {'IS_ADMIN':'Y'},
    # //             {'USER_ID.IS_PORTAL':'Y'},
         {'USER_ID.EMAIL_ID':{'$ne':''}},
                 {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#                {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
         {'MODIFIED_DATE':{'$gte':csy_first_date()}},
#         {'MODIFIED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
    {'$group':{'_id':{'$month':'$MODIFIED_DATE'},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
          {'$project':{'_id':1,'teachers':'$pc'}},
    { '$sort' : { '_id' : 1} }
              ])))
    if df2.empty:
        df2=pd.DataFrame({'_id':[1,2,3,4,5,6,7,8,9,10,11,12],'teachers':[0,0,0,0,0,0,0,0,0,0,0,0]})
    
    df3 = DataFrame(list(collection.aggregate([
    {"$match":
    {'$and': [
      {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
#             {"USER_ID._id":{'$not':{"$in":db.schoology_master.distinct( "USER_ID._id")}}},
#             {"USER_ID._id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.schoolId._id':{'$ne':None}},
    # //               {'IS_ADMIN':'Y'},
    # //             {'USER_ID.IS_PORTAL':'Y'},
         {'USER_ID.EMAIL_ID':{'$ne':''}},
                 {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#                {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
         {'MODIFIED_DATE':{'$gte':csy_first_date()}},
#         {'MODIFIED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
    {'$group':{'_id':{'$month':'$MODIFIED_DATE'},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
          {'$project':{'_id':1,'parents':'$pc'}},
    { '$sort' : { '_id' : 1} }
              ])))
    if df3.empty:
        df3=pd.DataFrame({'_id':[1,2,3,4,5,6,7,8,9,10,11,12],'parents':[0,0,0,0,0,0,0,0,0,0,0,0]})
    
    df4 = DataFrame(list(collection.aggregate([
    {"$match":
    {'$and': [
      {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID._id":{'$not':{"$in":db.schoology_master.distinct( "USER_ID._id")}}},
            {"USER_ID._id":{"$in":db.clever_master.distinct( "USER_ID._id")}},
        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.schoolId._id':{'$ne':None}},
    # //               {'IS_ADMIN':'Y'},
    # //             {'USER_ID.IS_PORTAL':'Y'},
         {'USER_ID.EMAIL_ID':{'$ne':''}},
                 {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#                {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
         {'MODIFIED_DATE':{'$gte':csy_first_date()}},
#         {'MODIFIED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
    {'$group':{'_id':{'$month':'$MODIFIED_DATE'},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
          {'$project':{'_id':1,'clever':'$pc'}},
    { '$sort' : { '_id' : 1} }
              ])))
    if df4.empty:
        df4=pd.DataFrame({'_id':[1,2,3,4,5,6,7,8,9,10,11,12],'clever':[0,0,0,0,0,0,0,0,0,0,0,0]})
    
    df5 = DataFrame(list(collection.aggregate([
    {"$match":
    {'$and': [
      {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID._id":{"$in":db.schoology_master.distinct( "USER_ID._id")}},
            {"USER_ID._id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.schoolId._id':{'$ne':None}},
    # //               {'IS_ADMIN':'Y'},
    # //             {'USER_ID.IS_PORTAL':'Y'},
         {'USER_ID.EMAIL_ID':{'$ne':''}},
                 {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#                {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
         {'MODIFIED_DATE':{'$gte':csy_first_date()}},
#         {'MODIFIED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
    {'$group':{'_id':{'$month':'$MODIFIED_DATE'},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
          {'$project':{'_id':1,'scoology':'$pc'}},
    { '$sort' : { '_id' : 1} }
              ])))
    
    
    if df5.empty:
        df5=pd.DataFrame({'_id':[1,2,3,4,5,6,7,8,9,10,11,12],'scoology':[0,0,0,0,0,0,0,0,0,0,0,0]})
    
    df6= pd.merge(df1,df2,on='_id',how='left')
    df7= pd.merge(df6,df3,on='_id',how='left')
    df8= pd.merge(df7,df4,on='_id',how='left')
    df= pd.merge(df8,df5,on='_id',how='left')

    df.rename(columns = { '_id': 'Month'}, inplace = True)

    data = [['Aug', 8], ['Sep', 9], ['Oct', 10],['Nov', 11], ['Dec', 12], ['Jan', 1],['Feb', 2], ['Mar', 3], ['Apr', 4],['May', 5], ['Jun', 6], ['Jul', 7]] 


# Create the pandas DataFrame 
    df9 = pd.DataFrame(data, columns = ['Monthname', 'Month']) 

    DF=pd.merge(df9,df, on='Month',how='left')
    DF=DF.fillna(0)

#         d = dict(enumerate(calendar.month_abbr))    # to convert monthnumber of dataframe into monthname

#         try:
#             df['Month'] = df['Month'].map(d)
#         except:
#             pass

    if df.empty == True:
        Month=['Aug','Sep','Oct','Nov','Dec','Jan','Feb','Mar','Apr','May','Jun','Jul',]

        T=[0,0,0,0,0,0,0,0,0,0,0,0]
    else:
        Month=DF['Monthname'].tolist()

        T=DF['teachers'].tolist()
        P=DF['parents'].tolist()
        C=DF['clever'].tolist()
        S=DF['scoology'].tolist()
        pc=DF['practice_count'].tolist()


    data={'monthname':Month,'Teachers':T,'Parents':P,'Clever':C,'Scoology':S}
    return json.dumps(data)


    
    
    
    
@app.route('/districtschooltable/<districtid>')
def district_school_table(districtid):
    disdic={
    '620f3d6132c6d4813f4c9887':'Jackson County Schools',
    "5f2609807a1c0000950bb459":"North Special School District",    
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',
    '6045e4d007ead7744b125848':'Adams 12 Five Star Schools',
    '619268dd81f00a4319a65a52':'Access Community',
    '6045e4d707ead7744b125854':'Adams County School District 14',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '6045e4c907ead7744b12583d':'Apple Valley Unified School District',
    '789':'Attendance works',
    '6045e4d707ead7744b125855':'Aurora Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '6045e4d107ead7744b125849':'Berkeley Public Schools',
    '5fe2e25d4d0ca68d7baf889d':'BGCA',
    '6045e4ca07ead7744b12583e':'Bishop Unified School District',
    '6045e4d107ead7744b12584a':'Bismarck Public Schools',
    '5fe318b14d0ca68d7baf889e':'BLUE',
    '6045e4c807ead7744b12583b':'Boston Public Schools',
    '6023a6d79e8e623753fc305c':'Boulder Valley School District',
    '60f7bf747cc8db72d772e465':'Bright Horizons Early Learning Centers',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '6045e4ca07ead7744b12583f':'Canyons School District',
    '60473f8823e88e242074ebd2':'Champlain Valley School District',
    '6045e4d907ead7744b125858':'Chicago Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '6045e4d907ead7744b125857':'Colton Joint Unified School District',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '6045e4da07ead7744b125859':'Dennis-Yarmouth Regional School District',
    '6045e4cb07ead7744b125840':'Denver Public Schools',
    '5f2609807a1c0000950bb46e':'District 25 New York Schools',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '6045e4c707ead7744b12583a':'Durham Public Schools',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb464':'Equity Education',
    '6045e4cc07ead7744b125841':'Fairfax County Public Schools',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '6045e4cd07ead7744b125843':'Falmouth Public Schools',
    '6045e4da07ead7744b12585a':'FITCHBURG PUBLIC SCHOOLS',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '6023a7269e8e623753fc305e':'Fulton County School System',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '6045e4d207ead7744b12584b':'Glenbard District 87',
    '5f2609807a1c0000950bb450':'Goleta District',
    '6045e4cd07ead7744b125844':'Granite School District',
    '5f2609807a1c0000950bb474':'Greenburgh North Castle Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '60cb8971c5b0e89ed7ac0aa1':'Hall County School District',
    '5f9aa5e526edbed399d56c92':'Hamilton-Wenham Regional School District',
    '6045e4c707ead7744b125839':'Hartford Public Schools',
    '5f2609807a1c0000950bb47c':'Hawaii Public Schools',
    '6045e4ce07ead7744b125845':'Helena Public Schools',
    '6045e4db07ead7744b12585b':'HidalgoIndependent School district',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '6045e4db07ead7744b12585c':'Hopedale Public Schools',
    '6045e4cc07ead7744b125842':'Houston Independent School District',
    '60b872ce826cab06ebdf044e':'Kalamazoo Public Schools',
    '6045e4dc07ead7744b12585d':'Kearsarge Regional School District',
    '6045e4d307ead7744b12584d':'KIPP Public Schools',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '6045e4cf07ead7744b125846':'Lamar Consolidated Independent School District',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '6045e4dc07ead7744b12585e':'Littleton Public Schools',
    '5fe2e1ee4d0ca68d7baf889c':'LSF-Head Start',
    '6023a7499e8e623753fc305f':'Manatee County School District',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '6077e1b5eaa8bae0e2e04a64':'Medfield School District',
    '6023a7019e8e623753fc305d':'Miami-Dade County Public Schools',
    '5f2609807a1c0000950bb465':'Middleton-Cross Plains Area School District',
    '6045e4d407ead7744b12584f':'Mill Valley School District',
    '6045e4d307ead7744b12584e':'Millard School District',
    '610d0837931db8cfdf500fef':'Mission Consolidated Independent School District',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '6045e4cf07ead7744b125847':'Muscatine Community School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f2609807a1c0000950bb459':'North Special School District',
    '6045e4c907ead7744b12583c':'Northside Independent School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '6017ab3043ca9c39151838d4':'Oswego School District',
    '6045e4dd07ead7744b12585f':'Palm Beach County School District',
    '60913aaea5fd4b56a4bafa70':'Palm Springs Unified',
    '5f2609807a1c0000950bb479':'Panorama Education',
    '5f2609807a1c0000950bb46f':'Paradise Schools',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '6045e4de07ead7744b125860':'Paterson School District',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '6045e4d507ead7744b125850':'Rich School District',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '6045e4d507ead7744b125851':'San Francisco Unified School District',
    '6023a76f9e8e623753fc3060':'San Jose Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '6045e4df07ead7744b125862':'San Marcos Unified School District',
    '6045e4df07ead7744b125863':'San Marino Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '602e60e567d3e6c0a4eb4d99':'School District of Palm Beach County',
    '6045e4d807ead7744b125856':'School District of the Chathams',
    '6045e4de07ead7744b125861':'Sevier School District',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    '123':'Skillman',
    '6045e4e007ead7744b125864':'South Summit School District',
    '60eea965ae7de54f57abf234':'Southfield Public Schools',
    '5f2609807a1c0000950bb46a':'Springfield Public School',    
    '6045e4e007ead7744b125865':'Sudbury Public Schools',
    '6045e4e107ead7744b125866':'Tooele County School District',
    '60a7b03831afdba383052726':'United Way Of Santa Barbara',
    '6045e4d607ead7744b125852':'Upland Unified School District',
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '456':'UWBA',
    '6023a7949e8e623753fc3061':'Wasatch County School District',
    '6045e4e207ead7744b125867':'Washoe County School District',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '6045e4d607ead7744b125853':'West Contra Costa Unified School District',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '6045e4e207ead7744b125868':'Westford Public Schools',
    '6045e4d207ead7744b12584c':'White River School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5f2609807a1c0000950bb45d':'Youngstown'}
    
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 

    
    collection2=db.school_master
    collection=db.user_master
    collection1=db.audio_track_master
    collection3=db.subscription_master
    district=disdic[districtid]

    

    df2=DataFrame(list(collection.aggregate([{"$match":
         {'$and': [
#         {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},


    # //               {'IS_ADMIN':'Y'},

                 {'EMAIL_ID':{'$ne':''}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

            {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$_id'},'school_name':{'$first':'$schoolId.NAME'},'date':{'$min':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},'country':{'$first':'$schoolId.COUNTRY'},
                      'State':{'$first':'$schoolId.STATE'},'city':{'$first':'$schoolId.CITY'}}},



            {'$project':{'_id':1,'usercount':{'$size':'$ID'},'Created_date':'$date','country':1,'State':1,'school_name':1,'city':1}},



  
                                            ])))


    df3 = DataFrame(list(collection1.aggregate([
    {"$match":
         {'$and': [
#              {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //        
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
            {'MODIFIED_DATE':{'$gte': csy_first_date()}},
    #                  
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$USER_ID.schoolId._id','ID':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'},'last_practice_date':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}},'prog':{'$first':'$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME'}}},
                  {'$project':{'_id':1,'Practice_Count':'$ID','program':1,'last_practice_date':'$last_practice_date'}},
                   ])))
    df4 = DataFrame(list(collection3.aggregate([
    {"$match":
         {'$and': [
#              {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //        
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
    #                  
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$USER_ID.schoolId._id','subsdate':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$SUBSCRIPTION_EXPIRE_DATE'}}}}},
                  {'$project':{'_id':1,'Subscription_expire_date':'$subsdate'}},
                   ])))
    

    df5=pd.merge(df2,df3, how='left', on='_id')
    df=pd.merge(df5,df4, how='left', on='_id')
#     df=pd.merge(df6,df4, how='left', on='_id')
    df.rename(columns = { '_id': 'schoolid_'}, inplace = True)
#     df[["schoolid_", "schoolid"]]=df[["schoolid_", "schoolid"]].astype(str) 

    # df4.fillna(0)
#     print(df)
    df['school_name'].fillna("NO INFO", inplace=True)
    df['country'].fillna("NO INFO", inplace=True)
    df.Practice_Count=df.Practice_Count.fillna(0)
    df.Practice_Count=df.Practice_Count.astype('int64')
    df.usercount=df.usercount.fillna(0)
    df.usercount=df.usercount.astype('int64')   
    df['school_name'].replace("",'NO INFO', inplace=True)
    df['city'].replace("",'NO INFO', inplace=True)
    df['State'].replace("",'NO INFO', inplace=True)
    df['country'].replace("",'NO INFO', inplace=True)
    
    df['city'].fillna("NO INFO", inplace=True)
    df['city'].replace("NULL","NO INFO", inplace=True)
    df['State'].fillna("NO INFO", inplace=True)
    df['State'].replace("NULL","NO INFO", inplace=True)
   


    df['Created_date']=df['Created_date'].fillna(0)
    df['last_practice_date']=df['last_practice_date'].fillna('NO PRACTICE')
    df['Subscription_expire_date']=df['Subscription_expire_date'].fillna('No Info')

    data=[]
    for i,j,k,l,m,n,o,p,r in zip(df['school_name'].tolist(),df['country'].tolist(),df['State'].tolist(),df['city'].tolist(),df['Practice_Count'].tolist(),df['usercount'].tolist(),df['Created_date'].tolist(),df['last_practice_date'].tolist(),df['Subscription_expire_date'].tolist()):
        data.append([i,j,k,l,m,n,o,p,r])
    temp={"data":data}
    
    return json.dumps(temp)





@app.route('/districtheatmap/<districtid>')

def heat_district(districtid):
    disdic={
    '620f3d6132c6d4813f4c9887':'Jackson County Schools',
    "5f2609807a1c0000950bb459":"North Special School District",    
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',
    '6045e4d007ead7744b125848':'Adams 12 Five Star Schools',
    '619268dd81f00a4319a65a52':'Access Community',
    '6045e4d707ead7744b125854':'Adams County School District 14',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '6045e4c907ead7744b12583d':'Apple Valley Unified School District',
    '789':'Attendance works',
    '6045e4d707ead7744b125855':'Aurora Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '6045e4d107ead7744b125849':'Berkeley Public Schools',
    '5fe2e25d4d0ca68d7baf889d':'BGCA',
    '6045e4ca07ead7744b12583e':'Bishop Unified School District',
    '6045e4d107ead7744b12584a':'Bismarck Public Schools',
    '5fe318b14d0ca68d7baf889e':'BLUE',
    '6045e4c807ead7744b12583b':'Boston Public Schools',
    '6023a6d79e8e623753fc305c':'Boulder Valley School District',
    '60f7bf747cc8db72d772e465':'Bright Horizons Early Learning Centers',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '6045e4ca07ead7744b12583f':'Canyons School District',
    '60473f8823e88e242074ebd2':'Champlain Valley School District',
    '6045e4d907ead7744b125858':'Chicago Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '6045e4d907ead7744b125857':'Colton Joint Unified School District',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '6045e4da07ead7744b125859':'Dennis-Yarmouth Regional School District',
    '6045e4cb07ead7744b125840':'Denver Public Schools',
    '5f2609807a1c0000950bb46e':'District 25 New York Schools',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '6045e4c707ead7744b12583a':'Durham Public Schools',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb464':'Equity Education',
    '6045e4cc07ead7744b125841':'Fairfax County Public Schools',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '6045e4cd07ead7744b125843':'Falmouth Public Schools',
    '6045e4da07ead7744b12585a':'FITCHBURG PUBLIC SCHOOLS',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '6023a7269e8e623753fc305e':'Fulton County School System',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '6045e4d207ead7744b12584b':'Glenbard District 87',
    '5f2609807a1c0000950bb450':'Goleta District',
    '6045e4cd07ead7744b125844':'Granite School District',
    '5f2609807a1c0000950bb474':'Greenburgh North Castle Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '60cb8971c5b0e89ed7ac0aa1':'Hall County School District',
    '5f9aa5e526edbed399d56c92':'Hamilton-Wenham Regional School District',
    '6045e4c707ead7744b125839':'Hartford Public Schools',
    '5f2609807a1c0000950bb47c':'Hawaii Public Schools',
    '6045e4ce07ead7744b125845':'Helena Public Schools',
    '6045e4db07ead7744b12585b':'HidalgoIndependent School district',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '6045e4db07ead7744b12585c':'Hopedale Public Schools',
    '6045e4cc07ead7744b125842':'Houston Independent School District',
    '60b872ce826cab06ebdf044e':'Kalamazoo Public Schools',
    '6045e4dc07ead7744b12585d':'Kearsarge Regional School District',
    '6045e4d307ead7744b12584d':'KIPP Public Schools',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '6045e4cf07ead7744b125846':'Lamar Consolidated Independent School District',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '6045e4dc07ead7744b12585e':'Littleton Public Schools',
    '5fe2e1ee4d0ca68d7baf889c':'LSF-Head Start',
    '6023a7499e8e623753fc305f':'Manatee County School District',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '6077e1b5eaa8bae0e2e04a64':'Medfield School District',
    '6023a7019e8e623753fc305d':'Miami-Dade County Public Schools',
    '5f2609807a1c0000950bb465':'Middleton-Cross Plains Area School District',
    '6045e4d407ead7744b12584f':'Mill Valley School District',
    '6045e4d307ead7744b12584e':'Millard School District',
    '610d0837931db8cfdf500fef':'Mission Consolidated Independent School District',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '6045e4cf07ead7744b125847':'Muscatine Community School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f2609807a1c0000950bb459':'North Special School District',
    '6045e4c907ead7744b12583c':'Northside Independent School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '6017ab3043ca9c39151838d4':'Oswego School District',
    '6045e4dd07ead7744b12585f':'Palm Beach County School District',
    '60913aaea5fd4b56a4bafa70':'Palm Springs Unified',
    '5f2609807a1c0000950bb479':'Panorama Education',
    '5f2609807a1c0000950bb46f':'Paradise Schools',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '6045e4de07ead7744b125860':'Paterson School District',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '6045e4d507ead7744b125850':'Rich School District',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '6045e4d507ead7744b125851':'San Francisco Unified School District',
    '6023a76f9e8e623753fc3060':'San Jose Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '6045e4df07ead7744b125862':'San Marcos Unified School District',
    '6045e4df07ead7744b125863':'San Marino Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '602e60e567d3e6c0a4eb4d99':'School District of Palm Beach County',
    '6045e4d807ead7744b125856':'School District of the Chathams',
    '6045e4de07ead7744b125861':'Sevier School District',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    '123':'Skillman',
    '6045e4e007ead7744b125864':'South Summit School District',
    '60eea965ae7de54f57abf234':'Southfield Public Schools',
    '5f2609807a1c0000950bb46a':'Springfield Public School',    
    '6045e4e007ead7744b125865':'Sudbury Public Schools',
    '6045e4e107ead7744b125866':'Tooele County School District',
    '60a7b03831afdba383052726':'United Way Of Santa Barbara',
    '6045e4d607ead7744b125852':'Upland Unified School District',
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '456':'UWBA',
    '6023a7949e8e623753fc3061':'Wasatch County School District',
    '6045e4e207ead7744b125867':'Washoe County School District',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '6045e4d607ead7744b125853':'West Contra Costa Unified School District',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '6045e4e207ead7744b125868':'Westford Public Schools',
    '6045e4d207ead7744b12584c':'White River School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5f2609807a1c0000950bb45d':'Youngstown'}
    import collections
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    collection2=db.user_master
    district=disdic[districtid]
    

    df=DataFrame(list(collection2.aggregate([{"$match":
             {'$and': [
                

                    {"IS_DISABLED":{"$ne":"Y"}},
                      {"IS_BLOCKED":{"$ne":"Y"}},
                     {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                    { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                 
#                             {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},

        # //               {'IS_ADMIN':'Y'},
    #                      {'DISTRICT_ID._id':{'$ne':None}},
                    {'schoolId._id':{'$ne':None}},
                     {'EMAIL_ID':{'$ne':''}},
                   {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" , "CATEGORY":{'$regex':district, '$options':'i'}})}},

#                   {'DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
                     {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                               {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

                {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$schoolId._id'}}},
                      {'$project':{'_id':1,'schools':'$ID'}},

                      ])))

    ids=list(df['_id'])
    
    
    df3=DataFrame(list(collection.aggregate([
{"$match":
    {'$and': [

#          {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
        {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
{'USER_ID.schoolId._id':{'$in':ids}},
        


 {'MODIFIED_DATE':{'$gte':datetime.datetime(2021,1,1)}},]}},


        {'$group':{'_id':'$USER_ID.schoolId._id','uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
              {'$project':{'_id':1,'active_user_count':{'$size':'$uc'},'name':'$NAME','practice_count':'$pc'}},
    { '$sort' : { 'active_user_count' : -1} },
    {'$limit':30}])))
    top=list(df3['_id'])
#     print(df3)
#     df3.to_csv('file1.csv')
    df2=DataFrame(list(collection.aggregate([
    {"$match":
        {'$and': [
            
#              {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
    {'USER_ID.schoolId._id':{'$in':top}},
    # {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
  
     {'MODIFIED_DATE':{'$gte':datetime.datetime(2021,1,1)}},]}},


            {'$group':{'_id':{'school':'$USER_ID.schoolId._id','month':{'$month':'$MODIFIED_DATE'}},'uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
                  {'$project':{'_id':0,'school':'$_id.school','month':'$_id.month','active_user_count':{'$size':'$uc'},'name':'$NAME','practice_count':'$pc'}},
        { '$sort' : { 'name' : 1,'month'  :1} },


    # //               {'$count':'count'}
                  ])))
    # df2

    df1=df2
    df1=df1.sort_values(by=['name'], ascending=True)
    # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    dislist=list(set(df1["name"]))
    # print(len(dislist))
    df2=df1[["name","month","active_user_count","practice_count"]]
    # print(df2)
    overall=pd.DataFrame(columns=["name","month","active_user_count","practice_count"])
    # overall
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["name"]==k]
        df45.reset_index()
    #     print(df45)
        for i in range(1,13):
            if i in list(df45["month"]):
                pass
            else:
                a=max(list(df45.index))
                df45.loc[a+i] = [k] +[i]+[0]+[0]

  
        sorted_df =df45.sort_values(by=['month'], ascending=True)
    #     sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
        finaldf = pd.concat(result)
    #     finaldf=finaldf.sort_values(by=['name'])


    data={}
    for i in dislist:


        schoolname= finaldf[(finaldf.name ==i)].reset_index(drop = True)
        active_user_count = schoolname['active_user_count'].tolist()
        practice_count = schoolname['practice_count'].tolist()


        data[i] =active_user_count
    data=collections.OrderedDict(sorted(data.items()))
    data={'meanTemp':data}

    
    return json.dumps(data)

# --------
@app.route('/familydistrictheatmap/<districtid>')

def heat_district_family_active(districtid):
    disdic={
    '620f3d6132c6d4813f4c9887':'Jackson County Schools',
    "5f2609807a1c0000950bb459":"North Special School District",    
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',
    '6045e4d007ead7744b125848':'Adams 12 Five Star Schools',
    '619268dd81f00a4319a65a52':'Access Community',
    '6045e4d707ead7744b125854':'Adams County School District 14',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '6045e4c907ead7744b12583d':'Apple Valley Unified School District',
    '789':'Attendance works',
    '6045e4d707ead7744b125855':'Aurora Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '6045e4d107ead7744b125849':'Berkeley Public Schools',
    '5fe2e25d4d0ca68d7baf889d':'BGCA',
    '6045e4ca07ead7744b12583e':'Bishop Unified School District',
    '6045e4d107ead7744b12584a':'Bismarck Public Schools',
    '5fe318b14d0ca68d7baf889e':'BLUE',
    '6045e4c807ead7744b12583b':'Boston Public Schools',
    '6023a6d79e8e623753fc305c':'Boulder Valley School District',
    '60f7bf747cc8db72d772e465':'Bright Horizons Early Learning Centers',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '6045e4ca07ead7744b12583f':'Canyons School District',
    '60473f8823e88e242074ebd2':'Champlain Valley School District',
    '6045e4d907ead7744b125858':'Chicago Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '6045e4d907ead7744b125857':'Colton Joint Unified School District',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '6045e4da07ead7744b125859':'Dennis-Yarmouth Regional School District',
    '6045e4cb07ead7744b125840':'Denver Public Schools',
    '5f2609807a1c0000950bb46e':'District 25 New York Schools',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '6045e4c707ead7744b12583a':'Durham Public Schools',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb464':'Equity Education',
    '6045e4cc07ead7744b125841':'Fairfax County Public Schools',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '6045e4cd07ead7744b125843':'Falmouth Public Schools',
    '6045e4da07ead7744b12585a':'FITCHBURG PUBLIC SCHOOLS',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '6023a7269e8e623753fc305e':'Fulton County School System',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '6045e4d207ead7744b12584b':'Glenbard District 87',
    '5f2609807a1c0000950bb450':'Goleta District',
    '6045e4cd07ead7744b125844':'Granite School District',
    '5f2609807a1c0000950bb474':'Greenburgh North Castle Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '60cb8971c5b0e89ed7ac0aa1':'Hall County School District',
    '5f9aa5e526edbed399d56c92':'Hamilton-Wenham Regional School District',
    '6045e4c707ead7744b125839':'Hartford Public Schools',
    '5f2609807a1c0000950bb47c':'Hawaii Public Schools',
    '6045e4ce07ead7744b125845':'Helena Public Schools',
    '6045e4db07ead7744b12585b':'HidalgoIndependent School district',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '6045e4db07ead7744b12585c':'Hopedale Public Schools',
    '6045e4cc07ead7744b125842':'Houston Independent School District',
    '60b872ce826cab06ebdf044e':'Kalamazoo Public Schools',
    '6045e4dc07ead7744b12585d':'Kearsarge Regional School District',
    '6045e4d307ead7744b12584d':'KIPP Public Schools',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '6045e4cf07ead7744b125846':'Lamar Consolidated Independent School District',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '6045e4dc07ead7744b12585e':'Littleton Public Schools',
    '5fe2e1ee4d0ca68d7baf889c':'LSF-Head Start',
    '6023a7499e8e623753fc305f':'Manatee County School District',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '6077e1b5eaa8bae0e2e04a64':'Medfield School District',
    '6023a7019e8e623753fc305d':'Miami-Dade County Public Schools',
    '5f2609807a1c0000950bb465':'Middleton-Cross Plains Area School District',
    '6045e4d407ead7744b12584f':'Mill Valley School District',
    '6045e4d307ead7744b12584e':'Millard School District',
    '610d0837931db8cfdf500fef':'Mission Consolidated Independent School District',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '6045e4cf07ead7744b125847':'Muscatine Community School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f2609807a1c0000950bb459':'North Special School District',
    '6045e4c907ead7744b12583c':'Northside Independent School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '6017ab3043ca9c39151838d4':'Oswego School District',
    '6045e4dd07ead7744b12585f':'Palm Beach County School District',
    '60913aaea5fd4b56a4bafa70':'Palm Springs Unified',
    '5f2609807a1c0000950bb479':'Panorama Education',
    '5f2609807a1c0000950bb46f':'Paradise Schools',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '6045e4de07ead7744b125860':'Paterson School District',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '6045e4d507ead7744b125850':'Rich School District',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '6045e4d507ead7744b125851':'San Francisco Unified School District',
    '6023a76f9e8e623753fc3060':'San Jose Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '6045e4df07ead7744b125862':'San Marcos Unified School District',
    '6045e4df07ead7744b125863':'San Marino Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '602e60e567d3e6c0a4eb4d99':'School District of Palm Beach County',
    '6045e4d807ead7744b125856':'School District of the Chathams',
    '6045e4de07ead7744b125861':'Sevier School District',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    '123':'Skillman',
    '6045e4e007ead7744b125864':'South Summit School District',
    '60eea965ae7de54f57abf234':'Southfield Public Schools',
    '5f2609807a1c0000950bb46a':'Springfield Public School',    
    '6045e4e007ead7744b125865':'Sudbury Public Schools',
    '6045e4e107ead7744b125866':'Tooele County School District',
    '60a7b03831afdba383052726':'United Way Of Santa Barbara',
    '6045e4d607ead7744b125852':'Upland Unified School District',
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '456':'UWBA',
    '6023a7949e8e623753fc3061':'Wasatch County School District',
    '6045e4e207ead7744b125867':'Washoe County School District',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '6045e4d607ead7744b125853':'West Contra Costa Unified School District',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '6045e4e207ead7744b125868':'Westford Public Schools',
    '6045e4d207ead7744b12584c':'White River School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5f2609807a1c0000950bb45d':'Youngstown'}
    import collections
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    collection2=db.user_master
    district=disdic[districtid]

    
    df=DataFrame(list(collection2.aggregate([{"$match":
             {'$and': [
                

                    {"IS_DISABLED":{"$ne":"Y"}},
                      {"IS_BLOCKED":{"$ne":"Y"}},
                     {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                    { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                             {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},

        # //               {'IS_ADMIN':'Y'},
    #                      {'DISTRICT_ID._id':{'$ne':None}},
                    {'schoolId._id':{'$ne':None}},
                 {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" , "CATEGORY":{'$regex':district, '$options':'i'}})}},
                     {'EMAIL_ID':{'$ne':''}},

#                   {'DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
                     {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                               {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

                {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$schoolId._id'}}},
                      {'$project':{'_id':1,'schools':'$ID'}},

                      ])))

    ids=list(df['_id'])
    
    
    df3=DataFrame(list(collection.aggregate([
{"$match":
    {'$and': [


        {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
{'USER_ID.schoolId._id':{'$in':ids}},


 {'MODIFIED_DATE':{'$gte':datetime.datetime(2021,1,1)}},]}},


        {'$group':{'_id':'$USER_ID.schoolId._id','uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
              {'$project':{'_id':1,'active_user_count':{'$size':'$uc'},'name':'$NAME','practice_count':'$pc'}},
    { '$sort' : { 'active_user_count' : -1} },
    {'$limit':30}])))
    top=list(df3['_id'])
#     print(df3)
#     df3.to_csv('file1.csv')
    df2=DataFrame(list(collection.aggregate([
    {"$match":
        {'$and': [
            
             {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
    {'USER_ID.schoolId._id':{'$in':top}},
    # {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
  
     {'MODIFIED_DATE':{'$gte':datetime.datetime(2020,3,17)}},]}},


            {'$group':{'_id':{'school':'$USER_ID.schoolId._id','month':{'$month':'$MODIFIED_DATE'}},'uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
                  {'$project':{'_id':0,'school':'$_id.school','month':'$_id.month','active_user_count':{'$size':'$uc'},'name':'$NAME','practice_count':'$pc'}},
        { '$sort' : { 'name' : 1,'month'  :1} },


    # //               {'$count':'count'}
                  ])))
    # df2

    df1=df2
    df1=df1.sort_values(by=['name'], ascending=True)
    # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    dislist=list(set(df1["name"]))
    # print(len(dislist))
    df2=df1[["name","month","active_user_count","practice_count"]]
    # print(df2)
    overall=pd.DataFrame(columns=["name","month","active_user_count","practice_count"])
    # overall
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["name"]==k]
        df45.reset_index()
    #     print(df45)
        for i in range(1,13):
            if i in list(df45["month"]):
                pass
            else:
                a=max(list(df45.index))
                df45.loc[a+i] = [k] +[i]+[0]+[0]
  
        sorted_df =df45.sort_values(by=['month'], ascending=True)
    #     sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
        finaldf = pd.concat(result)
    #     finaldf=finaldf.sort_values(by=['name'])


    data={}
    for i in dislist:


        schoolname= finaldf[(finaldf.name ==i)].reset_index(drop = True)
        active_user_count = schoolname['active_user_count'].tolist()
        practice_count = schoolname['practice_count'].tolist()


        data[i] =active_user_count
    data=collections.OrderedDict(sorted(data.items()))
    data={'meanTemp':data}

    
    return json.dumps(data)


#---
@app.route('/teachersdistrictheatmap/<districtid>')

def heat_district_teachers_active(districtid):
    disdic={
    '620f3d6132c6d4813f4c9887':'Jackson County Schools',
    "5f2609807a1c0000950bb459":"North Special School District",    
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',
    '6045e4d007ead7744b125848':'Adams 12 Five Star Schools',
    '619268dd81f00a4319a65a52':'Access Community',
    '6045e4d707ead7744b125854':'Adams County School District 14',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '6045e4c907ead7744b12583d':'Apple Valley Unified School District',
    '789':'Attendance works',
    '6045e4d707ead7744b125855':'Aurora Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '6045e4d107ead7744b125849':'Berkeley Public Schools',
    '5fe2e25d4d0ca68d7baf889d':'BGCA',
    '6045e4ca07ead7744b12583e':'Bishop Unified School District',
    '6045e4d107ead7744b12584a':'Bismarck Public Schools',
    '5fe318b14d0ca68d7baf889e':'BLUE',
    '6045e4c807ead7744b12583b':'Boston Public Schools',
    '6023a6d79e8e623753fc305c':'Boulder Valley School District',
    '60f7bf747cc8db72d772e465':'Bright Horizons Early Learning Centers',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '6045e4ca07ead7744b12583f':'Canyons School District',
    '60473f8823e88e242074ebd2':'Champlain Valley School District',
    '6045e4d907ead7744b125858':'Chicago Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '6045e4d907ead7744b125857':'Colton Joint Unified School District',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '6045e4da07ead7744b125859':'Dennis-Yarmouth Regional School District',
    '6045e4cb07ead7744b125840':'Denver Public Schools',
    '5f2609807a1c0000950bb46e':'District 25 New York Schools',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '6045e4c707ead7744b12583a':'Durham Public Schools',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb464':'Equity Education',
    '6045e4cc07ead7744b125841':'Fairfax County Public Schools',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '6045e4cd07ead7744b125843':'Falmouth Public Schools',
    '6045e4da07ead7744b12585a':'FITCHBURG PUBLIC SCHOOLS',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '6023a7269e8e623753fc305e':'Fulton County School System',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '6045e4d207ead7744b12584b':'Glenbard District 87',
    '5f2609807a1c0000950bb450':'Goleta District',
    '6045e4cd07ead7744b125844':'Granite School District',
    '5f2609807a1c0000950bb474':'Greenburgh North Castle Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '60cb8971c5b0e89ed7ac0aa1':'Hall County School District',
    '5f9aa5e526edbed399d56c92':'Hamilton-Wenham Regional School District',
    '6045e4c707ead7744b125839':'Hartford Public Schools',
    '5f2609807a1c0000950bb47c':'Hawaii Public Schools',
    '6045e4ce07ead7744b125845':'Helena Public Schools',
    '6045e4db07ead7744b12585b':'HidalgoIndependent School district',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '6045e4db07ead7744b12585c':'Hopedale Public Schools',
    '6045e4cc07ead7744b125842':'Houston Independent School District',
    '60b872ce826cab06ebdf044e':'Kalamazoo Public Schools',
    '6045e4dc07ead7744b12585d':'Kearsarge Regional School District',
    '6045e4d307ead7744b12584d':'KIPP Public Schools',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '6045e4cf07ead7744b125846':'Lamar Consolidated Independent School District',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '6045e4dc07ead7744b12585e':'Littleton Public Schools',
    '5fe2e1ee4d0ca68d7baf889c':'LSF-Head Start',
    '6023a7499e8e623753fc305f':'Manatee County School District',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '6077e1b5eaa8bae0e2e04a64':'Medfield School District',
    '6023a7019e8e623753fc305d':'Miami-Dade County Public Schools',
    '5f2609807a1c0000950bb465':'Middleton-Cross Plains Area School District',
    '6045e4d407ead7744b12584f':'Mill Valley School District',
    '6045e4d307ead7744b12584e':'Millard School District',
    '610d0837931db8cfdf500fef':'Mission Consolidated Independent School District',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '6045e4cf07ead7744b125847':'Muscatine Community School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f2609807a1c0000950bb459':'North Special School District',
    '6045e4c907ead7744b12583c':'Northside Independent School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '6017ab3043ca9c39151838d4':'Oswego School District',
    '6045e4dd07ead7744b12585f':'Palm Beach County School District',
    '60913aaea5fd4b56a4bafa70':'Palm Springs Unified',
    '5f2609807a1c0000950bb479':'Panorama Education',
    '5f2609807a1c0000950bb46f':'Paradise Schools',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '6045e4de07ead7744b125860':'Paterson School District',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '6045e4d507ead7744b125850':'Rich School District',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '6045e4d507ead7744b125851':'San Francisco Unified School District',
    '6023a76f9e8e623753fc3060':'San Jose Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '6045e4df07ead7744b125862':'San Marcos Unified School District',
    '6045e4df07ead7744b125863':'San Marino Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '602e60e567d3e6c0a4eb4d99':'School District of Palm Beach County',
    '6045e4d807ead7744b125856':'School District of the Chathams',
    '6045e4de07ead7744b125861':'Sevier School District',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    '123':'Skillman',
    '6045e4e007ead7744b125864':'South Summit School District',
    '60eea965ae7de54f57abf234':'Southfield Public Schools',
    '5f2609807a1c0000950bb46a':'Springfield Public School',    
    '6045e4e007ead7744b125865':'Sudbury Public Schools',
    '6045e4e107ead7744b125866':'Tooele County School District',
    '60a7b03831afdba383052726':'United Way Of Santa Barbara',
    '6045e4d607ead7744b125852':'Upland Unified School District',
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '456':'UWBA',
    '6023a7949e8e623753fc3061':'Wasatch County School District',
    '6045e4e207ead7744b125867':'Washoe County School District',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '6045e4d607ead7744b125853':'West Contra Costa Unified School District',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '6045e4e207ead7744b125868':'Westford Public Schools',
    '6045e4d207ead7744b12584c':'White River School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5f2609807a1c0000950bb45d':'Youngstown'}
    import collections
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    collection2=db.user_master
    district=disdic[districtid]



    df=DataFrame(list(collection2.aggregate([{"$match":
             {'$and': [
                

                    {"IS_DISABLED":{"$ne":"Y"}},
                      {"IS_BLOCKED":{"$ne":"Y"}},
                     {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                    { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                             {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                     {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" , "CATEGORY":{'$regex':district, '$options':'i'}})}},

        # //               {'IS_ADMIN':'Y'},
    #                      {'DISTRICT_ID._id':{'$ne':None}},
                    {'schoolId._id':{'$ne':None}},
                     {'EMAIL_ID':{'$ne':''}},

#                   {'DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
                     {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                               {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

                {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$schoolId._id'}}},
                      {'$project':{'_id':1,'schools':'$ID'}},

                      ])))

    ids=list(df['_id'])
    
    
    df3=DataFrame(list(collection.aggregate([
{"$match":
    {'$and': [

     
        {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
{'USER_ID.schoolId._id':{'$in':ids}},


 {'MODIFIED_DATE':{'$gte':datetime.datetime(2021,1,1)}},]}},


        {'$group':{'_id':'$USER_ID.schoolId._id','uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
              {'$project':{'_id':1,'active_user_count':{'$size':'$uc'},'name':'$NAME','practice_count':'$pc'}},
    { '$sort' : { 'active_user_count' : -1} },
    {'$limit':30}])))
    top=list(df3['_id'])
#     print(df3)
#     df3.to_csv('file1.csv')
    df2=DataFrame(list(collection.aggregate([
    {"$match":
        {'$and': [
            
                 {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
    {'USER_ID.schoolId._id':{'$in':top}},
    # {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
  
     {'MODIFIED_DATE':{'$gte':datetime.datetime(2021,1,1)}},]}},


            {'$group':{'_id':{'school':'$USER_ID.schoolId._id','month':{'$month':'$MODIFIED_DATE'}},'uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
                  {'$project':{'_id':0,'school':'$_id.school','month':'$_id.month','active_user_count':{'$size':'$uc'},'name':'$NAME','practice_count':'$pc'}},
        { '$sort' : { 'name' : 1,'month'  :1} },


    # //               {'$count':'count'}
                  ])))
    # df2

    df1=df2
    df1=df1.sort_values(by=['name'], ascending=True)
    # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    dislist=list(set(df1["name"]))
    # print(len(dislist))
    df2=df1[["name","month","active_user_count","practice_count"]]
    # print(df2)
    overall=pd.DataFrame(columns=["name","month","active_user_count","practice_count"])
    # overall
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["name"]==k]
        df45.reset_index()
    #     print(df45)
        for i in range(1,13):
            if i in list(df45["month"]):
                pass
            else:
                a=max(list(df45.index))
                df45.loc[a+i] = [k] +[i]+[0]+[0]

  
        sorted_df =df45.sort_values(by=['month'], ascending=True)
    #     sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
        finaldf = pd.concat(result)
    #     finaldf=finaldf.sort_values(by=['name'])


    data={}
    for i in dislist:


        schoolname= finaldf[(finaldf.name ==i)].reset_index(drop = True)
        active_user_count = schoolname['active_user_count'].tolist()
        practice_count = schoolname['practice_count'].tolist()


        data[i] =active_user_count
    data=collections.OrderedDict(sorted(data.items()))
    data={'meanTemp':data}

    
    return json.dumps(data)



@app.route('/districtheatmappracteacher/<districtid>')
def heat_district_teachers_prac(districtid):
    disdic={
    '620f3d6132c6d4813f4c9887':'Jackson County Schools',
    "5f2609807a1c0000950bb459":"North Special School District",
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',
    '6045e4d007ead7744b125848':'Adams 12 Five Star Schools',
    '619268dd81f00a4319a65a52':'Access Community',
    '6045e4d707ead7744b125854':'Adams County School District 14',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '6045e4c907ead7744b12583d':'Apple Valley Unified School District',
    '789':'Attendance works',
    '6045e4d707ead7744b125855':'Aurora Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '6045e4d107ead7744b125849':'Berkeley Public Schools',
    '5fe2e25d4d0ca68d7baf889d':'BGCA',
    '6045e4ca07ead7744b12583e':'Bishop Unified School District',
    '6045e4d107ead7744b12584a':'Bismarck Public Schools',
    '5fe318b14d0ca68d7baf889e':'BLUE',
    '6045e4c807ead7744b12583b':'Boston Public Schools',
    '6023a6d79e8e623753fc305c':'Boulder Valley School District',
    '60f7bf747cc8db72d772e465':'Bright Horizons Early Learning Centers',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '6045e4ca07ead7744b12583f':'Canyons School District',
    '60473f8823e88e242074ebd2':'Champlain Valley School District',
    '6045e4d907ead7744b125858':'Chicago Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '6045e4d907ead7744b125857':'Colton Joint Unified School District',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '6045e4da07ead7744b125859':'Dennis-Yarmouth Regional School District',
    '6045e4cb07ead7744b125840':'Denver Public Schools',
    '5f2609807a1c0000950bb46e':'District 25 New York Schools',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '6045e4c707ead7744b12583a':'Durham Public Schools',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb464':'Equity Education',
    '6045e4cc07ead7744b125841':'Fairfax County Public Schools',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '6045e4cd07ead7744b125843':'Falmouth Public Schools',
    '6045e4da07ead7744b12585a':'FITCHBURG PUBLIC SCHOOLS',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '6023a7269e8e623753fc305e':'Fulton County School System',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '6045e4d207ead7744b12584b':'Glenbard District 87',
    '5f2609807a1c0000950bb450':'Goleta District',
    '6045e4cd07ead7744b125844':'Granite School District',
    '5f2609807a1c0000950bb474':'Greenburgh North Castle Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '60cb8971c5b0e89ed7ac0aa1':'Hall County School District',
    '5f9aa5e526edbed399d56c92':'Hamilton-Wenham Regional School District',
    '6045e4c707ead7744b125839':'Hartford Public Schools',
    '5f2609807a1c0000950bb47c':'Hawaii Public Schools',
    '6045e4ce07ead7744b125845':'Helena Public Schools',
    '6045e4db07ead7744b12585b':'HidalgoIndependent School district',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '6045e4db07ead7744b12585c':'Hopedale Public Schools',
    '6045e4cc07ead7744b125842':'Houston Independent School District',
    '60b872ce826cab06ebdf044e':'Kalamazoo Public Schools',
    '6045e4dc07ead7744b12585d':'Kearsarge Regional School District',
    '6045e4d307ead7744b12584d':'KIPP Public Schools',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '6045e4cf07ead7744b125846':'Lamar Consolidated Independent School District',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '6045e4dc07ead7744b12585e':'Littleton Public Schools',
    '5fe2e1ee4d0ca68d7baf889c':'LSF-Head Start',
    '6023a7499e8e623753fc305f':'Manatee County School District',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '6077e1b5eaa8bae0e2e04a64':'Medfield School District',
    '6023a7019e8e623753fc305d':'Miami-Dade County Public Schools',
    '5f2609807a1c0000950bb465':'Middleton-Cross Plains Area School District',
    '6045e4d407ead7744b12584f':'Mill Valley School District',
    '6045e4d307ead7744b12584e':'Millard School District',
    '610d0837931db8cfdf500fef':'Mission Consolidated Independent School District',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '6045e4cf07ead7744b125847':'Muscatine Community School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f2609807a1c0000950bb459':'North Special School District',
    '6045e4c907ead7744b12583c':'Northside Independent School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '6017ab3043ca9c39151838d4':'Oswego School District',
    '6045e4dd07ead7744b12585f':'Palm Beach County School District',
    '60913aaea5fd4b56a4bafa70':'Palm Springs Unified',
    '5f2609807a1c0000950bb479':'Panorama Education',
    '5f2609807a1c0000950bb46f':'Paradise Schools',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '6045e4de07ead7744b125860':'Paterson School District',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '6045e4d507ead7744b125850':'Rich School District',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '6045e4d507ead7744b125851':'San Francisco Unified School District',
    '6023a76f9e8e623753fc3060':'San Jose Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '6045e4df07ead7744b125862':'San Marcos Unified School District',
    '6045e4df07ead7744b125863':'San Marino Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '602e60e567d3e6c0a4eb4d99':'School District of Palm Beach County',
    '6045e4d807ead7744b125856':'School District of the Chathams',
    '6045e4de07ead7744b125861':'Sevier School District',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    '123':'Skillman',
    '6045e4e007ead7744b125864':'South Summit School District',
    '60eea965ae7de54f57abf234':'Southfield Public Schools',
    '5f2609807a1c0000950bb46a':'Springfield Public School',    
    '6045e4e007ead7744b125865':'Sudbury Public Schools',
    '6045e4e107ead7744b125866':'Tooele County School District',
    '60a7b03831afdba383052726':'United Way Of Santa Barbara',
    '6045e4d607ead7744b125852':'Upland Unified School District',
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '456':'UWBA',
    '6023a7949e8e623753fc3061':'Wasatch County School District',
    '6045e4e207ead7744b125867':'Washoe County School District',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '6045e4d607ead7744b125853':'West Contra Costa Unified School District',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '6045e4e207ead7744b125868':'Westford Public Schools',
    '6045e4d207ead7744b12584c':'White River School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5f2609807a1c0000950bb45d':'Youngstown'}
    import collections
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    collection2=db.user_master
    district=disdic[districtid]


    df=DataFrame(list(collection2.aggregate([{"$match":
             {'$and': [
                

                    {"IS_DISABLED":{"$ne":"Y"}},
                      {"IS_BLOCKED":{"$ne":"Y"}},
                     {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                    { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                             {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                     {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" , "CATEGORY":{'$regex':district, '$options':'i'}})}},

        # //               {'IS_ADMIN':'Y'},
    #                      {'DISTRICT_ID._id':{'$ne':None}},
                    {'schoolId._id':{'$ne':None}},
                     {'EMAIL_ID':{'$ne':''}},

#                   {'DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
                     {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                               {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

                {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$schoolId._id'}}},
                      {'$project':{'_id':1,'schools':'$ID'}},

                      ])))

    ids=list(df['_id'])
    
    
    df3=DataFrame(list(collection.aggregate([
{"$match":
    {'$and': [

         
        {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
{'USER_ID.schoolId._id':{'$in':ids}},


 {'MODIFIED_DATE':{'$gte':datetime.datetime(2021,1,1)}},]}},


        {'$group':{'_id':'$USER_ID.schoolId._id','uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
              {'$project':{'_id':1,'active_user_count':{'$size':'$uc'},'name':'$NAME','practice_count':'$pc'}},
    { '$sort' : { 'active_user_count' : -1} },
    {'$limit':30}])))
    top=list(df3['_id'])
#     print(df3)
#     df3.to_csv('file1.csv')
    df2=DataFrame(list(collection.aggregate([
    {"$match":
        {'$and': [
            
             {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
    {'USER_ID.schoolId._id':{'$in':top}},
    # {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
  
     {'MODIFIED_DATE':{'$gte':datetime.datetime(2021,1,1)}},]}},


            {'$group':{'_id':{'school':'$USER_ID.schoolId._id','month':{'$month':'$MODIFIED_DATE'}},'uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
                  {'$project':{'_id':0,'school':'$_id.school','month':'$_id.month','active_user_count':{'$size':'$uc'},'name':'$NAME','practice_count':'$pc'}},
        { '$sort' : { 'name' : 1,'month'  :1} },


    # //               {'$count':'count'}
                  ])))
    # df2

    df1=df2
    df1=df1.sort_values(by=['name'], ascending=True)
    # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    dislist=list(set(df1["name"]))
    # print(len(dislist))
    df2=df1[["name","month","active_user_count","practice_count"]]
    # print(df2)
    overall=pd.DataFrame(columns=["name","month","active_user_count","practice_count"])
    # overall
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["name"]==k]
        df45.reset_index()
    #     print(df45)
        for i in range(1,13):
            if i in list(df45["month"]):
                pass
            else:
                a=max(list(df45.index))
                df45.loc[a+i] = [k] +[i]+[0]+[0]
  
        sorted_df =df45.sort_values(by=['month'], ascending=True)
    #     sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
        finaldf = pd.concat(result)
    #     finaldf=finaldf.sort_values(by=['name'])


    data={}
    for i in dislist:


        schoolname= finaldf[(finaldf.name ==i)].reset_index(drop = True)
        active_user_count = schoolname['active_user_count'].tolist()
        practice_count = schoolname['practice_count'].tolist()


        data[i] =practice_count
    data=collections.OrderedDict(sorted(data.items()))
    data={'meanTemp':data}

    
    return json.dumps(data)
# 


@app.route('/districtheatmappracfamily/<districtid>')
def heat_district_family_prac(districtid):
    disdic={
    '620f3d6132c6d4813f4c9887':'Jackson County Schools',
    "5f2609807a1c0000950bb459":"North Special School District",
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',
    '6045e4d007ead7744b125848':'Adams 12 Five Star Schools',
    '619268dd81f00a4319a65a52':'Access Community',
    '6045e4d707ead7744b125854':'Adams County School District 14',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '6045e4c907ead7744b12583d':'Apple Valley Unified School District',
    '789':'Attendance works',
    '6045e4d707ead7744b125855':'Aurora Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '6045e4d107ead7744b125849':'Berkeley Public Schools',
    '5fe2e25d4d0ca68d7baf889d':'BGCA',
    '6045e4ca07ead7744b12583e':'Bishop Unified School District',
    '6045e4d107ead7744b12584a':'Bismarck Public Schools',
    '5fe318b14d0ca68d7baf889e':'BLUE',
    '6045e4c807ead7744b12583b':'Boston Public Schools',
    '6023a6d79e8e623753fc305c':'Boulder Valley School District',
    '60f7bf747cc8db72d772e465':'Bright Horizons Early Learning Centers',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '6045e4ca07ead7744b12583f':'Canyons School District',
    '60473f8823e88e242074ebd2':'Champlain Valley School District',
    '6045e4d907ead7744b125858':'Chicago Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '6045e4d907ead7744b125857':'Colton Joint Unified School District',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '6045e4da07ead7744b125859':'Dennis-Yarmouth Regional School District',
    '6045e4cb07ead7744b125840':'Denver Public Schools',
    '5f2609807a1c0000950bb46e':'District 25 New York Schools',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '6045e4c707ead7744b12583a':'Durham Public Schools',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb464':'Equity Education',
    '6045e4cc07ead7744b125841':'Fairfax County Public Schools',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '6045e4cd07ead7744b125843':'Falmouth Public Schools',
    '6045e4da07ead7744b12585a':'FITCHBURG PUBLIC SCHOOLS',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '6023a7269e8e623753fc305e':'Fulton County School System',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '6045e4d207ead7744b12584b':'Glenbard District 87',
    '5f2609807a1c0000950bb450':'Goleta District',
    '6045e4cd07ead7744b125844':'Granite School District',
    '5f2609807a1c0000950bb474':'Greenburgh North Castle Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '60cb8971c5b0e89ed7ac0aa1':'Hall County School District',
    '5f9aa5e526edbed399d56c92':'Hamilton-Wenham Regional School District',
    '6045e4c707ead7744b125839':'Hartford Public Schools',
    '5f2609807a1c0000950bb47c':'Hawaii Public Schools',
    '6045e4ce07ead7744b125845':'Helena Public Schools',
    '6045e4db07ead7744b12585b':'HidalgoIndependent School district',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '6045e4db07ead7744b12585c':'Hopedale Public Schools',
    '6045e4cc07ead7744b125842':'Houston Independent School District',
    '60b872ce826cab06ebdf044e':'Kalamazoo Public Schools',
    '6045e4dc07ead7744b12585d':'Kearsarge Regional School District',
    '6045e4d307ead7744b12584d':'KIPP Public Schools',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '6045e4cf07ead7744b125846':'Lamar Consolidated Independent School District',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '6045e4dc07ead7744b12585e':'Littleton Public Schools',
    '5fe2e1ee4d0ca68d7baf889c':'LSF-Head Start',
    '6023a7499e8e623753fc305f':'Manatee County School District',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '6077e1b5eaa8bae0e2e04a64':'Medfield School District',
    '6023a7019e8e623753fc305d':'Miami-Dade County Public Schools',
    '5f2609807a1c0000950bb465':'Middleton-Cross Plains Area School District',
    '6045e4d407ead7744b12584f':'Mill Valley School District',
    '6045e4d307ead7744b12584e':'Millard School District',
    '610d0837931db8cfdf500fef':'Mission Consolidated Independent School District',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '6045e4cf07ead7744b125847':'Muscatine Community School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f2609807a1c0000950bb459':'North Special School District',
    '6045e4c907ead7744b12583c':'Northside Independent School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '6017ab3043ca9c39151838d4':'Oswego School District',
    '6045e4dd07ead7744b12585f':'Palm Beach County School District',
    '60913aaea5fd4b56a4bafa70':'Palm Springs Unified',
    '5f2609807a1c0000950bb479':'Panorama Education',
    '5f2609807a1c0000950bb46f':'Paradise Schools',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '6045e4de07ead7744b125860':'Paterson School District',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '6045e4d507ead7744b125850':'Rich School District',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '6045e4d507ead7744b125851':'San Francisco Unified School District',
    '6023a76f9e8e623753fc3060':'San Jose Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '6045e4df07ead7744b125862':'San Marcos Unified School District',
    '6045e4df07ead7744b125863':'San Marino Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '602e60e567d3e6c0a4eb4d99':'School District of Palm Beach County',
    '6045e4d807ead7744b125856':'School District of the Chathams',
    '6045e4de07ead7744b125861':'Sevier School District',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    '123':'Skillman',
    '6045e4e007ead7744b125864':'South Summit School District',
    '60eea965ae7de54f57abf234':'Southfield Public Schools',
    '5f2609807a1c0000950bb46a':'Springfield Public School',    
    '6045e4e007ead7744b125865':'Sudbury Public Schools',
    '6045e4e107ead7744b125866':'Tooele County School District',
    '60a7b03831afdba383052726':'United Way Of Santa Barbara',
    '6045e4d607ead7744b125852':'Upland Unified School District',
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '456':'UWBA',
    '6023a7949e8e623753fc3061':'Wasatch County School District',
    '6045e4e207ead7744b125867':'Washoe County School District',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '6045e4d607ead7744b125853':'West Contra Costa Unified School District',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '6045e4e207ead7744b125868':'Westford Public Schools',
    '6045e4d207ead7744b12584c':'White River School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5f2609807a1c0000950bb45d':'Youngstown'}
    import collections
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    collection2=db.user_master
    district=disdic[districtid]

   

    df=DataFrame(list(collection2.aggregate([{"$match":
             {'$and': [
                

                    {"IS_DISABLED":{"$ne":"Y"}},
                      {"IS_BLOCKED":{"$ne":"Y"}},
                     {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                    { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                             {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                    {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" , "CATEGORY":{'$regex':district, '$options':'i'}})}},
        # //               {'IS_ADMIN':'Y'},
    #                      {'DISTRICT_ID._id':{'$ne':None}},
                    {'schoolId._id':{'$ne':None}},
                     {'EMAIL_ID':{'$ne':''}},

#                   {'DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
                     {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                               {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

                {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$schoolId._id'}}},
                      {'$project':{'_id':1,'schools':'$ID'}},

                      ])))

    
    if df.empty is True:
        data={'Result':0}
    else:
        df
        ids=list(df['_id'])
    

        df3=DataFrame(list(collection.aggregate([
    {"$match":
        {'$and': [


            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
    {'USER_ID.schoolId._id':{'$in':ids}},


     {'MODIFIED_DATE':{'$gte':datetime.datetime(2021,1,1)}},]}},


            {'$group':{'_id':'$USER_ID.schoolId._id','uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
                  {'$project':{'_id':1,'active_user_count':{'$size':'$uc'},'name':'$NAME','practice_count':'$pc'}},
        { '$sort' : { 'active_user_count' : -1} },
        {'$limit':30}])))
        if df3.empty is True:
            data={'Result':0}
        else:
            df3
        top=list(df3['_id'])
    #     print(df3)
    #     df3.to_csv('file1.csv')
        df2=DataFrame(list(collection.aggregate([
        {"$match":
            {'$and': [

                 {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        {'USER_ID.schoolId._id':{'$in':top}},
        # {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},

         {'MODIFIED_DATE':{'$gte':datetime.datetime(2020,3,17)}},]}},


                {'$group':{'_id':{'school':'$USER_ID.schoolId._id','month':{'$month':'$MODIFIED_DATE'}},'uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
                      {'$project':{'_id':0,'school':'$_id.school','month':'$_id.month','active_user_count':{'$size':'$uc'},'name':'$NAME','practice_count':'$pc'}},
            { '$sort' : { 'name' : 1,'month'  :1} },


        # //               {'$count':'count'}
                      ])))
        # df2

        df1=df2
        df1=df1.sort_values(by=['name'], ascending=True)
        # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
        dislist=list(set(df1["name"]))
        # print(len(dislist))
        df2=df1[["name","month","active_user_count","practice_count"]]
        # print(df2)
        overall=pd.DataFrame(columns=["name","month","active_user_count","practice_count"])
        # overall
        result=[]
        for k in dislist:
        #     print(k)
            df45=df2[df2["name"]==k]
            df45.reset_index()
        #     print(df45)
            for i in range(1,13):
                if i in list(df45["month"]):
                    pass
                else:
                    a=max(list(df45.index))
                    df45.loc[a+i] = [k] +[i]+[0]+[0]

            sorted_df =df45.sort_values(by=['month'], ascending=True)
        #     sorted_df1=sorted_df.reset_index()
            result.append(sorted_df)
            finaldf = pd.concat(result)
        #     finaldf=finaldf.sort_values(by=['name'])


        data={}
        for i in dislist:


            schoolname= finaldf[(finaldf.name ==i)].reset_index(drop = True)
            active_user_count = schoolname['active_user_count'].tolist()
            practice_count = schoolname['practice_count'].tolist()


            data[i] =practice_count
        data=collections.OrderedDict(sorted(data.items()))
        data={'meanTemp':data}

    
    return json.dumps(data)


@app.route('/districtheatmappractice/<districtid>')

def heatmap_prac_district(districtid):
    disdic={
    '620f3d6132c6d4813f4c9887':'Jackson County Schools',
    "5f2609807a1c0000950bb459":"North Special School District",
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',
    '6045e4d007ead7744b125848':'Adams 12 Five Star Schools',
    '619268dd81f00a4319a65a52':'Access Community',
    '6045e4d707ead7744b125854':'Adams County School District 14',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '6045e4c907ead7744b12583d':'Apple Valley Unified School District',
    '789':'Attendance works',
    '6045e4d707ead7744b125855':'Aurora Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '6045e4d107ead7744b125849':'Berkeley Public Schools',
    '5fe2e25d4d0ca68d7baf889d':'BGCA',
    '6045e4ca07ead7744b12583e':'Bishop Unified School District',
    '6045e4d107ead7744b12584a':'Bismarck Public Schools',
    '5fe318b14d0ca68d7baf889e':'BLUE',
    '6045e4c807ead7744b12583b':'Boston Public Schools',
    '6023a6d79e8e623753fc305c':'Boulder Valley School District',
    '60f7bf747cc8db72d772e465':'Bright Horizons Early Learning Centers',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '6045e4ca07ead7744b12583f':'Canyons School District',
    '60473f8823e88e242074ebd2':'Champlain Valley School District',
    '6045e4d907ead7744b125858':'Chicago Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '6045e4d907ead7744b125857':'Colton Joint Unified School District',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '6045e4da07ead7744b125859':'Dennis-Yarmouth Regional School District',
    '6045e4cb07ead7744b125840':'Denver Public Schools',
    '5f2609807a1c0000950bb46e':'District 25 New York Schools',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '6045e4c707ead7744b12583a':'Durham Public Schools',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb464':'Equity Education',
    '6045e4cc07ead7744b125841':'Fairfax County Public Schools',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '6045e4cd07ead7744b125843':'Falmouth Public Schools',
    '6045e4da07ead7744b12585a':'FITCHBURG PUBLIC SCHOOLS',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '6023a7269e8e623753fc305e':'Fulton County School System',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '6045e4d207ead7744b12584b':'Glenbard District 87',
    '5f2609807a1c0000950bb450':'Goleta District',
    '6045e4cd07ead7744b125844':'Granite School District',
    '5f2609807a1c0000950bb474':'Greenburgh North Castle Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '60cb8971c5b0e89ed7ac0aa1':'Hall County School District',
    '5f9aa5e526edbed399d56c92':'Hamilton-Wenham Regional School District',
    '6045e4c707ead7744b125839':'Hartford Public Schools',
    '5f2609807a1c0000950bb47c':'Hawaii Public Schools',
    '6045e4ce07ead7744b125845':'Helena Public Schools',
    '6045e4db07ead7744b12585b':'HidalgoIndependent School district',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '6045e4db07ead7744b12585c':'Hopedale Public Schools',
    '6045e4cc07ead7744b125842':'Houston Independent School District',
    '60b872ce826cab06ebdf044e':'Kalamazoo Public Schools',
    '6045e4dc07ead7744b12585d':'Kearsarge Regional School District',
    '6045e4d307ead7744b12584d':'KIPP Public Schools',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '6045e4cf07ead7744b125846':'Lamar Consolidated Independent School District',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '6045e4dc07ead7744b12585e':'Littleton Public Schools',
    '5fe2e1ee4d0ca68d7baf889c':'LSF-Head Start',
    '6023a7499e8e623753fc305f':'Manatee County School District',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '6077e1b5eaa8bae0e2e04a64':'Medfield School District',
    '6023a7019e8e623753fc305d':'Miami-Dade County Public Schools',
    '5f2609807a1c0000950bb465':'Middleton-Cross Plains Area School District',
    '6045e4d407ead7744b12584f':'Mill Valley School District',
    '6045e4d307ead7744b12584e':'Millard School District',
    '610d0837931db8cfdf500fef':'Mission Consolidated Independent School District',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '6045e4cf07ead7744b125847':'Muscatine Community School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f2609807a1c0000950bb459':'North Special School District',
    '6045e4c907ead7744b12583c':'Northside Independent School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '6017ab3043ca9c39151838d4':'Oswego School District',
    '6045e4dd07ead7744b12585f':'Palm Beach County School District',
    '60913aaea5fd4b56a4bafa70':'Palm Springs Unified',
    '5f2609807a1c0000950bb479':'Panorama Education',
    '5f2609807a1c0000950bb46f':'Paradise Schools',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '6045e4de07ead7744b125860':'Paterson School District',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '6045e4d507ead7744b125850':'Rich School District',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '6045e4d507ead7744b125851':'San Francisco Unified School District',
    '6023a76f9e8e623753fc3060':'San Jose Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '6045e4df07ead7744b125862':'San Marcos Unified School District',
    '6045e4df07ead7744b125863':'San Marino Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '602e60e567d3e6c0a4eb4d99':'School District of Palm Beach County',
    '6045e4d807ead7744b125856':'School District of the Chathams',
    '6045e4de07ead7744b125861':'Sevier School District',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    '123':'Skillman',
    '6045e4e007ead7744b125864':'South Summit School District',
    '60eea965ae7de54f57abf234':'Southfield Public Schools',
    '5f2609807a1c0000950bb46a':'Springfield Public School',
    '6045e4e007ead7744b125865':'Sudbury Public Schools',
    '6045e4e107ead7744b125866':'Tooele County School District',
    '60a7b03831afdba383052726':'United Way Of Santa Barbara',
    '6045e4d607ead7744b125852':'Upland Unified School District',
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '456':'UWBA',
    '6023a7949e8e623753fc3061':'Wasatch County School District',
    '6045e4e207ead7744b125867':'Washoe County School District',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '6045e4d607ead7744b125853':'West Contra Costa Unified School District',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '6045e4e207ead7744b125868':'Westford Public Schools',
    '6045e4d207ead7744b12584c':'White River School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5f2609807a1c0000950bb45d':'Youngstown'}
    import collections
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    collection2=db.user_master
    district=disdic[districtid]



    df=DataFrame(list(collection2.aggregate([{"$match":
             {'$and': [
                

                    {"IS_DISABLED":{"$ne":"Y"}},
                      {"IS_BLOCKED":{"$ne":"Y"}},
                     {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                    { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                             {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                     {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" , "CATEGORY":{'$regex':district, '$options':'i'}})}},

        # //               {'IS_ADMIN':'Y'},
    #                      {'DISTRICT_ID._id':{'$ne':None}},
                    {'schoolId._id':{'$ne':None}},
                     {'EMAIL_ID':{'$ne':''}},

#                   {'DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
                     {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                               {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

                {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$schoolId._id'}}},
                      {'$project':{'_id':1,'schools':'$ID'}},

                      ])))
    if df.empty is True:
        data={'Result':0}
    else:
        df
        ids=list(df['_id'])
    

        df3=DataFrame(list(collection.aggregate([
    {"$match":
        {'$and': [


            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
    {'USER_ID.schoolId._id':{'$in':ids}},


     {'MODIFIED_DATE':{'$gte':datetime.datetime(2021,1,1)}},]}},


            {'$group':{'_id':'$USER_ID.schoolId._id','uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
                  {'$project':{'_id':1,'active_user_count':{'$size':'$uc'},'name':'$NAME','practice_count':'$pc'}},
        { '$sort' : { 'active_user_count' : -1} },
        {'$limit':30}])))
        top=list(df3['_id'])
    #     print(df3)
    #     df3.to_csv('file1.csv')
        df2=DataFrame(list(collection.aggregate([
        {"$match":
            {'$and': [

    #              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        {'USER_ID.schoolId._id':{'$in':top}},
        # {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},

         {'MODIFIED_DATE':{'$gte':datetime.datetime(2021,1,1)}},]}},


                {'$group':{'_id':{'school':'$USER_ID.schoolId._id','month':{'$month':'$MODIFIED_DATE'}},'uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
                      {'$project':{'_id':0,'school':'$_id.school','month':'$_id.month','active_user_count':{'$size':'$uc'},'name':'$NAME','practice_count':'$pc'}},
            { '$sort' : { 'name' : 1,'month'  :1} },


        # //               {'$count':'count'}
                      ])))
        # df2

        df1=df2
        df1=df1.sort_values(by=['name'], ascending=True)
        # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
        dislist=list(set(df1["name"]))
        # print(len(dislist))
        df2=df1[["name","month","active_user_count","practice_count"]]
        # print(df2)
        overall=pd.DataFrame(columns=["name","month","active_user_count","practice_count"])
        # overall
        result=[]
        for k in dislist:
        #     print(k)
            df45=df2[df2["name"]==k]
            df45.reset_index()
        #     print(df45)
            for i in range(1,13):
                if i in list(df45["month"]):
                    pass
                else:
                    a=max(list(df45.index))
                    df45.loc[a+i] = [k] +[i]+[0]+[0]

            sorted_df =df45.sort_values(by=['month'], ascending=True)
        #     sorted_df1=sorted_df.reset_index()
            result.append(sorted_df)
            finaldf = pd.concat(result)
        #     finaldf=finaldf.sort_values(by=['name'])


        data={}
        for i in dislist:


            schoolname= finaldf[(finaldf.name ==i)].reset_index(drop = True)
            active_user_count = schoolname['active_user_count'].tolist()
            practice_count = schoolname['practice_count'].tolist()


            data[i] =practice_count
        data=collections.OrderedDict(sorted(data.items()))
        data={'meanTemp':data}

    
    return json.dumps(data)    












# ===============================================================














@app.route('/portal_new_api/<smcategory>')
def portal_new_api(smcategory):    
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    collection = db.school_master
    from bson.objectid import ObjectId
#     smcategory="Agawam School district"
    query=[{'$match':{'$and':[
    { 'CATEGORY':{"$regex":""+smcategory+"",'$options':'i'}},
    {'IS_PORTAL':'Y'}
    
    ]
    }},
    {"$project":{"_id":0,
    "UMSCHOOLID":'$_id',
    "UMSCHOOLNAME":'$NAME',
    "is_paid":"$FULL_EXPERIENCE",
                }},
    ]
    merge11=list(collection.aggregate(query))
    overallum11=pd.DataFrame(merge11)
    collection = db.district_master
    queryt=[{'$match':{'$and':[
    { 'DISTRICT_NAME':{"$regex":""+smcategory+"",'$options':'i'}},]
    }},
    {"$project":{"_id":0,
    "to_school":'$TOTAL_SCHOOLS',
    
                }},
    ]
    merget=list(collection.aggregate(queryt))
    overallumt=pd.DataFrame(merget)
    discount=0
    try:
        discount=overallumt["to_school"][0]
    except:
        discount=0
#     print(overallum11,"helloooooooooooo1achsdkjcbsdkjcbsdku")
    # print(len(set(list(overallum11["UMSCHOOLID"]))),"school_count")
    lifetimelist=list(set(overallum11["UMSCHOOLID"]))
    total_school=len(lifetimelist)
    collection = db.user_master
    query=[{'$match':{'$and':[{
    "schoolId._id": {
    "$in":lifetimelist
    }   
    },
    { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
    {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
    {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
    {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
    {'IS_DISABLED':{"$ne":'Y'}},
    {'IS_BLOCKED':{"$ne":'Y'}},
    {'schoolId.BLOCKED_BY_CAP':{'$exists':0}},
    ]
    }},
    {"$project":{"_id":0,
    'ROLE':'$ROLE_ID.ROLE_NAME',
    'UMUSER_ID':'$_id',"USER_NAME":'$USER_NAME',
    "UMSCHOOLID":'$schoolId._id',
    "DISTRICT_NAME":"$DISTRICT_ID.DISTRICT_NAME",
                 "UMSCHOOLNAME":'$schoolId.NAME',
                }},
    ]
    merge1=list(collection.aggregate(query))
    overallum=pd.DataFrame(merge1)
#     print(overallum,"overallum")
    email=""
    schoolid=[]
    try:
        email=list(overallum["UMUSER_ID"])
        schoolid=list(overallum["UMSCHOOLID"])
    except:
        pass
    ################################sub_master################################
    collection = db.subscription_master
    qr=[
    {"$match":{"$and":[{'USER_ID._id':{"$in":email}},]}},
    {"$project":{"_id":0,
    'SMUSER_ID':'$USER_ID._id',
    "RENEWAL_DATE":"$SUBSCRIPTION_EXPIRE_DATE",
    }},]
    merge=[]
    overall=[]
    mergeddf=[]
    try:
        merge=list(collection.aggregate(qr))
        overall=pd.DataFrame(merge)
        mergeddf=pd.merge(overallum, overall, how='left', left_on='UMUSER_ID', right_on='SMUSER_ID')
    except:
        pass
    db=client.compass
    collection = db.audio_track_master
    qra=[
    {"$match":{'$and':[
        {'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
    {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
    {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
    {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
        
    {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
      {'USER_ID.schoolId._id':{'$ne':None}},
              {'USER_ID._id':{
                  '$in':
                  db.user_master.distinct('_id',{'schoolId._id':{
                      '$in':schoolid
                      
                      }})
                  }},    
        
#     {'USER_ID.schoolId._id':{'$in':schoolid}},
    
    
    
    ]}},
    {'$group':{'_id':'$USER_ID.schoolId._id', 
    'atdLastpractice':{'$max':'$MODIFIED_DATE'},
    'atdPracticecount':{'$sum':1},
    'atdTotal_Mindful_Minutes':{"$sum":{"$round":[{"$divide":[{"$subtract":['$CURSOR_END','$cursorStart']}, 60]},0]}}}}]
    merge110=[]
    atd=[]
    mmm=0
    try:
        merge110=list(collection.aggregate(qra))
        atd=pd.DataFrame(merge110)
        atd.to_csv("chechj.csv")
        mmm=str(round(sum(atd["atdTotal_Mindful_Minutes"])))
        finalmerge=pd.merge(mergeddf, atd, how='left', left_on='UMSCHOOLID', right_on='_id')
        finaldata=finalmerge[["DISTRICT_NAME","UMSCHOOLID","UMSCHOOLNAME","UMUSER_ID","ROLE","atdLastpractice","RENEWAL_DATE","atdPracticecount"]]
        finaldata["atdPracticecount"] = finaldata['atdPracticecount'].fillna(0)
        finaldata["atdPracticecount"] = finaldata['atdPracticecount'].astype('int')
        finaldata["atdPracticecount"] = finaldata['atdPracticecount'].astype('str')
    except:
        pass
#     print(finaldata)
    usercount=0
    try:
        usercount=len(finaldata[finaldata["ROLE"]=='user'])
    except:
        pass
    familycount=0
    try:
        familycount=len(finaldata[finaldata["ROLE"]=='PRESENT'])
    except:
        pass
    data2=[]
    totschnew=0
    try:
        totschnew=len(overallum11[overallum11["is_paid"]=="Y"])
        
    except:
        pass
    try:
        overallum11["is_paid"].fillna("N",inplace=True)
    except:
        overallum11["is_paid"]="N"
    overallum11["UMSCHOOLID"] = overallum11["UMSCHOOLID"].astype('str')
    overallum11=overallum11.sort_values(by=['UMSCHOOLNAME'], ascending=True)
    overallum11=overallum11.reset_index()
    
    
    # print(overallum11)
    for i in range(len(overallum11)):
        data2.append({"school_id":overallum11["UMSCHOOLID"][i],"school_name":overallum11["UMSCHOOLNAME"][i],"is_paid":overallum11["is_paid"][i]})
    finaldata={"data":data2,"total_school_district":discount,"total_school":totschnew,"user_count":usercount,"family_count":familycount,"mindful_minutes":mmm}
    
    return json.dumps(finaldata)

# ==================ADMINPORTALSADHNA
@app.route('/adminportalcards/<userid>')
def district_school_table_teacher(userid):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass


    collection2=db.school_master
    collection=db.user_master
    collection4=db.invite_master
    collection5=db.login_logs
    collection1=db.audio_track_master
    collection3=db.subscription_master
    #     district=disdic[districtid]
    #     myDatetime1 = dateutil.parser.parse(startdate)
    #     myDatetime2 = dateutil.parser.parse(enddate)
    from datetime import datetime

    df0 = DataFrame(list(collection.aggregate([
        {"$match":{'$and': [{"_id" : ObjectId(""+userid+"")}]}},
        {'$project':{'_id':1,"EMAIL_ID" : 1,'district_admin':'$IS_DISTRICT_ADMIN','school_admin':'$IS_ADMIN'}}])))
#     print(df0)



    if 'district_admin' not in df0.columns:
        df0['district_admin']=0

    # if df0[df0['district_admin']=='Y']:
    #     if 'Y' in df0['district_admin'][0]:
    if df0['district_admin'][0]=='Y':
        uemail = df0["EMAIL_ID"].to_list()

        df00 = DataFrame(list(db.district_master.aggregate([
        {"$match":{'$and': [
        {"ADMIN_EMAIL" : {"$in" : uemail}}]}},
        {'$project':{'_id':1,"ADMIN_EMAIL" : 1}}])))
#         print(df00)


        if df00.empty==True:
            data={'Result':0}        
            return json.dumps(data)
        else:
            disid = df00["_id"].to_list()
#             print(disid)

            df1=DataFrame(list(collection.aggregate([{"$match":
                {'$and': [
                 {"DISTRICT_ID._id" : {"$in" : disid}},
        #             {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
             {"IS_DISABLED":{"$ne":"Y"}},
             {"IS_BLOCKED":{"$ne":"Y"}},
             {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
             { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                 {"IS_DISTRICT_ADMIN" : "Y"},
                           {'IS_ADMIN':'Y'},
#                      {"_id" : ObjectId("5f32fef3c32deb1ed8a46378")},
             {'EMAIL_ID':{'$ne':''}},
             {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
             {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}

             ]}},
             {'$group':{'_id':'$DISTRICT_ID._id','sid':{'$addToSet':'$schoolId._id'},'school_name':{'$first':'$schoolId.NAME'},'date':{'$min':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},'country':{'$first':'$schoolId.COUNTRY'},
             'State':{'$first':'$schoolId.STATE'},'INIVITES':{'$sum':'$INVITES_ASSIGNED'},'EMAIL':{'$first':'$EMAIL_ID'},'admin':{'$first':'$IS_ADMIN'},'district_admin':{'$first':'$IS_DISTRICT_ADMIN'},'ROLE':{'$first':'$ROLE_ID.ROLE_id'}}},
             {'$project':{'_id':1,'sid':'$sid','ADMIN':'$admin','district_admin':'$district_admin','EMAIL_ID':'$EMAIL','INIVITES':'$INIVITES'}}])))

#             print(df1)
            if df1.empty==True:
                data={'Result':0}        
                return json.dumps(data)

            df5=DataFrame(list(collection.aggregate([{"$match":
                 {'$and': [

                 {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                 {"IS_DISABLED":{"$ne":"Y"}},
                 {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                 { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        #                 {'schoolId._id':ObjectId(""+schoolid+"")},                 
        #                    {'IS_ADMIN':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                 {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                 {'DISTRICT_ID._id':{"$in" : disid}}
                 ]}},
                 {'$group':{'_id':'$DISTRICT_ID._id','teacher':{'$sum':1},'school_name':{'$first':'$schoolId.NAME'},'date':{'$min':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},'country':{'$first':'$schoolId.COUNTRY'},
                 'State':{'$first':'$schoolId.STATE'},'INIVITES':{'$first':'$INVITES_ASSIGNED'},'city':{'$first':'$schoolId.CITY'},'admin':{'$first':'$IS_ADMIN'},'ROLE':{'$first':'$ROLE_ID.ROLE_id'}}},
                 {'$project':{'_id':1,'teacher':'$teacher'}}])))
#             print("df5",df5)
            
            if df5.empty == True:
                df5 = df5.append({'_id': disid[0], 'teacher': 0}, ignore_index=True)
                
            df2=DataFrame(list(collection4.aggregate([
             {"$match":
             {'$and': [

             {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
             {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
             {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
             { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
             {'USER_ID.EMAIL_ID':{'$ne':''}},
            #                 {"USER_ID._id" : ObjectId("5f2e12f3592000521523721a")},


             {'USER_ID.EMAIL_ID':{'$ne':''}},
             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.DISTRICT_ID._id':{"$in" : disid}},
             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
                 ]}},
             {'$group':{'_id':'$USER_ID.DISTRICT_ID._id','ID':{'$addToSet':'$USER_ID._id'},'invited_user':{'$addToSet':'$INVITED_USER_ID._id'},
             'accepted' :  {'$sum' : {'$cond': [ {'$eq': [ '$STATUS', 'Y' ] }, 1, 0 ] } },}},

             {'$project':{'_id':1,'user_id':'$ID','invited_user':{'$size':'$invited_user'},'accepted':'$accepted'}}
             ])))
            
            if df2.empty == True:
                df2 = df2.append({'_id': disid[0], 'user_id': 0,'invited_user':0,'accepted':0}, ignore_index=True)
            
#             print("df2",df2)

            df3=DataFrame(list(collection1.aggregate([
             {"$match":
             {'$and': [

             {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
             {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
             {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
             { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
             {'USER_ID.EMAIL_ID':{'$ne':''}},
             {'MODIFIED_DATE':{"$gte": csy_first_date()}},

             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.DISTRICT_ID._id':{"$in" : disid}},
             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
             ]}},
             {'$group':{'_id':'$USER_ID.DISTRICT_ID._id','pc':{'$sum':1},'last_practice_date_q1':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}},
             'Total_Mindful_Minutes':{"$sum":{"$round":[{"$divide":[{"$subtract":['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
             {'$project':{'_id':1,'teacher_practice':'$pc','Total_Mindful_Minutes':'$Total_Mindful_Minutes'}}])))

            if df3.empty == True:
                df3 = df3.append({'_id': disid[0], 'teacher_practice': 0,'Total_Mindful_Minutes':0}, ignore_index=True)
            
            df6=DataFrame(list(collection5.aggregate([
             {"$match":
             {'$and': [

             {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
             {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
             {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
             { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
             {'USER_ID.EMAIL_ID':{'$ne':''}},
             {'LAST_LOGGED_IN':{"$gte":  csy_first_date()}},
             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.DISTRICT_ID._id':{"$in" : disid}},
             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
             ]}},
             {'$group':{'_id':'$USER_ID.DISTRICT_ID._id','pc':{'$sum':1},
             'LAST_LOGGED_IN':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$LAST_LOGGED_IN'}}},}},
             {'$project':{'_id':1,'login_history':'$pc'}}])))
            
            if df6.empty == True:
                df6 = df6.append({'_id': disid[0], 'login_history': 0}, ignore_index=True)

#             print("df6",df6)
            df4 = DataFrame(list(collection3.aggregate([
            {"$match":
            {'$and': [

            {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
            {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},   
            {'USER_ID.EMAIL_ID':{'$ne':''}},                                                 
            {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
            {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
            {'USER_ID.DISTRICT_ID._id':{"$in" : disid}},
            {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
            ]}},
            {'$group':{'_id':'$USER_ID.DISTRICT_ID._id','MODE_OF_PAYMENT':{'$first':'$MODE_OF_PAYMENT'},'startdate':{'$first':{"$dateToString": { "format": "%Y-%m-%d", "date":'$SUBSCRIPTION_DATE'}}},'subsdate':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$SUBSCRIPTION_EXPIRE_DATE'}}}}},
            {'$project':{'_id':1,'Subscription_expire_date':'$subsdate','SUBSCRIPTION_DATE':'$startdate',
                         'MODE_OF_PAYMENT':'$MODE_OF_PAYMENT'}},
            ])))
            
            if df4.empty == True:
                df4 = df4.append({'_id': disid[0], 'Subscription_expire_date': 0,'SUBSCRIPTION_DATE': 0,'MODE_OF_PAYMENT': 0}, ignore_index=True)
            
#             print("df4",df4)

#             df__=pd.merge(df1,df2, how='left', on='_id')
            dfff=pd.merge(df2,df5,how='left', on='_id')
            dff=pd.merge(dfff,df3, how='left', on='_id')
            dffff=pd.merge(dff,df4, how='left', on='_id')
            df=pd.merge(dffff,df6, how='left', on='_id')

            df=df.fillna(0)
            df=df.astype(int, errors='ignore')
            
#             df['remaining']=df['INIVITES']-df['invited_user']
            df['remaining']=df1['INIVITES']-df['accepted']

            remaining=[0]
            try:
                remaining=df['remaining']
            except:
                remaining=[0]
            login_history=[0]
            try:
                login_history=df['login_history']
            except:
                login_history=[0]


            Email=[0]
            try:
                Email=df1['EMAIL_ID']
            except:
                Email=[0]

            INIVITES=[0]
            try:
                INIVITES=df1['INIVITES']
            except:
                INIVITES=[0]

            pc=[0]
            try:
                pc=df['teacher_practice']
            except:
                pc=[0]

            teacher=[0]
            try:
                teacher=df['teacher']
            except:
                teacher=[0]

            mm=[0]
            try:
                mm=df['Total_Mindful_Minutes']
            except:
                mm=[0]

            expire=[0]
            try:
                expire=df['Subscription_expire_date']
            except:
                expire=[0]

            start=[0]
            try:
                start=df['SUBSCRIPTION_DATE']
            except:
                start=[0]

            mode=[0]
            try:
                mode=df['MODE_OF_PAYMENT']
            except:
                mode=[0]


            accepted=[0]
            try:
                accepted=df['accepted']
            except:
                accepted=[0]

            sent=[0]
            try:
                sent=df['invited_user']
            except:
                sent=[0]


            #     print(lc)

            data={"Invite_sent":str(sent[0]),"invite_accepted":str(accepted[0]),"payment_Mode":'OFFLINE',
            "Subscription_start_date":str(start[0]),"Subscription_expire_date":str(expire[0]),"Total_invites":str(INIVITES[0]),
            'Remaining_invites':str(abs(remaining[0])),'EMAIL':str(Email[0]),'Total_teachers':str(teacher[0]),'practice_count':str(pc[0]),'mindful_minutes':str(mm[0])
                , 'login_history':str(login_history[0])}   
            print('district_data')
            return json.dumps(data)
    else:

        df1=DataFrame(list(collection.aggregate([{"$match":
             {'$and': [
    #             {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                    {"IS_DISABLED":{"$ne":"Y"}},
                      {"IS_BLOCKED":{"$ne":"Y"}},
                     {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                    { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

#                        {'IS_ADMIN':'Y'},
                     {"_id" : ObjectId(""+userid+"")},
                     {'EMAIL_ID':{'$ne':''}},

                     {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},

                               {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
             ]}},
                {'$group':{'_id':'$schoolId._id','sid':{'$addToSet':'$schoolId._id'},'school_name':{'$first':'$schoolId.NAME'},'date':{'$min':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},'country':{'$first':'$schoolId.COUNTRY'},
                          'State':{'$first':'$schoolId.STATE'},'INIVITES':{'$first':'$INVITES_ASSIGNED'},'EMAIL':{'$first':'$EMAIL_ID'},'admin':{'$first':'$IS_ADMIN'},'ROLE':{'$first':'$ROLE_ID.ROLE_id'}}},
                {'$project':{'_id':1,'sid':'$sid','ADMIN':'$admin','EMAIL_ID':'$EMAIL','INIVITES':'$INIVITES'}}])))
        if df1.empty==True:
            data={'Result':0}        
            return json.dumps(data)

        if df1['_id'][0]==None:
            data={'Result':0}        
            return json.dumps(data)
        else:
            schoolid=str(df1['_id'][0])

        #     print(schoolid)
            df5=DataFrame(list(collection.aggregate([{"$match":
                 {'$and': [
                    {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                        {"IS_DISABLED":{"$ne":"Y"}},
                          {"IS_BLOCKED":{"$ne":"Y"}},
                         {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                        { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                        {'schoolId._id':ObjectId(""+schoolid+"")},
        #                    {'IS_ADMIN':'Y'},

                         {'EMAIL_ID':{'$ne':''}},

                         {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},

                                   {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                     {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
                 ]}},
                    {'$group':{'_id':'$schoolId._id','teacher':{'$sum':1},'school_name':{'$first':'$schoolId.NAME'},'date':{'$min':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},'country':{'$first':'$schoolId.COUNTRY'},
                              'State':{'$first':'$schoolId.STATE'},'INIVITES':{'$first':'$INVITES_ASSIGNED'},'city':{'$first':'$schoolId.CITY'},'admin':{'$first':'$IS_ADMIN'},'ROLE':{'$first':'$ROLE_ID.ROLE_id'}}},
                    {'$project':{'_id':1,'teacher':'$teacher'}}])))
            
            if df5.empty == True:
                df5 = df5.append({'_id': disid[0], 'teacher': 0}, ignore_index=True)

            df2=DataFrame(list(collection4.aggregate([
             {"$match":
                 {'$and': [
                      {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

                         {'USER_ID.EMAIL_ID':{'$ne':''}},
        #                 {"USER_ID._id" : ObjectId("5f2e12f3592000521523721a")},


                   {'USER_ID.EMAIL_ID':{'$ne':''}},
                         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
                 ]}},
                    {'$group':{'_id':'$USER_ID.schoolId._id','ID':{'$addToSet':'$USER_ID._id'},'invited_user':{'$addToSet':'$INVITED_USER_ID._id'},
                               'accepted' :  {'$sum' : {'$cond': [ {'$eq': [ '$STATUS', 'Y' ] }, 1, 0 ] } },}},

                          {'$project':{'_id':1,'user_id':'$ID','invited_user':{'$size':'$invited_user'},'accepted':'$accepted'}}
                                      ])))
            
            if df2.empty == True:
                df2 = df2.append({'_id': disid[0], 'user_id': 0,'invited_user':0,'accepted':0}, ignore_index=True)
                
                
            df3=DataFrame(list(collection1.aggregate([
             {"$match":
                 {'$and': [
                      {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

                         {'USER_ID.EMAIL_ID':{'$ne':''}},

                     {'MODIFIED_DATE':{"$gte": csy_first_date()}},

                         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
                 ]}},
                    {'$group':{'_id':'$USER_ID.schoolId._id','pc':{'$sum':1},'last_practice_date_q1':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}},
                              'Total_Mindful_Minutes':{"$sum":{"$round":[{"$divide":[{"$subtract":['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
                          {'$project':{'_id':1,'teacher_practice':'$pc','Total_Mindful_Minutes':'$Total_Mindful_Minutes'}}])))

            if df3.empty == True:
                df3 = df3.append({'_id': disid[0], 'teacher_practice': 0,'Total_Mindful_Minutes':0}, ignore_index=True)
                
            df6=DataFrame(list(db.login_tracking.aggregate([
             {"$match":
                 {'$and': [
                      {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

                         {'USER_ID.EMAIL_ID':{'$ne':''}},

                     {'CREATED_DATE':{"$gte":  csy_first_date()}},

                         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
                 ]}},
                    {'$group':{'_id':'$USER_ID.schoolId._id','pc':{'$sum':1},'LAST_LOGGED_IN':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$LAST_LOGGED_IN'}}},
                             }},
                          {'$project':{'_id':1,'login_history':'$pc'}}])))
            
            if df6.empty == True:
                df6 = df6.append({'_id': disid[0], 'login_history': 0}, ignore_index=True)

            df4 = DataFrame(list(collection3.aggregate([
            {"$match":
                 {'$and': [
                         {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},   
                         {'USER_ID.EMAIL_ID':{'$ne':''}},                     
                         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
                 ]}},
                    {'$group':{'_id':'$USER_ID.schoolId._id','MODE_OF_PAYMENT':{'$first':'$MODE_OF_PAYMENT'},'startdate':{'$first':{"$dateToString": { "format": "%Y-%m-%d", "date":'$SUBSCRIPTION_DATE'}}},'subsdate':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$SUBSCRIPTION_EXPIRE_DATE'}}}}},
                          {'$project':{'_id':1,'Subscription_expire_date':'$subsdate','SUBSCRIPTION_DATE':'$startdate','MODE_OF_PAYMENT':'$MODE_OF_PAYMENT'}},
                           ])))
            
            if df4.empty == True:
                df4 = df4.append({'_id': disid[0], 'Subscription_expire_date': 0,'SUBSCRIPTION_DATE': 0,'MODE_OF_PAYMENT': 0}, ignore_index=True)
            
            df__=pd.merge(df1,df2, how='left', on='_id')
            dfff=pd.merge(df__,df5,how='left', on='_id')
            dff=pd.merge(dfff,df3, how='left', on='_id')
            dffff=pd.merge(dff,df4, how='left', on='_id')
            df=pd.merge(dffff,df6, how='left', on='_id')
            df=df.fillna(0)
            df=df.astype(int, errors='ignore')
            print(df)

#             df['remaining']=df['INIVITES']-df['invited_user']
            df['remaining']=df1['INIVITES']-df['accepted']

            remaining=[0]
            try:
                remaining=df['remaining']
            except:
                remaining=[0]
            login_history=[0]
            try:
                login_history=df['login_history']
            except:
                login_history=[0]


            Email=[0]
            try:
                Email=df['EMAIL_ID']
            except:
                Email=[0]

            INIVITES=[0]
            try:
                INIVITES=df['INIVITES']
            except:
                INIVITES=[0]

            pc=[0]
            try:
                pc=df['teacher_practice']
            except:
                pc=[0]

            teacher=[0]
            try:
                teacher=df['teacher']
            except:
                teacher=[0]

            mm=[0]
            try:
                mm=df['Total_Mindful_Minutes']
            except:
                mm=[0]

            expire=[0]
            try:
                expire=df['Subscription_expire_date']
            except:
                expire=[0]

            start=[0]
            try:
                start=df['SUBSCRIPTION_DATE']
            except:
                start=[0]

            mode=[0]
            try:
                mode=df['MODE_OF_PAYMENT']
            except:
                mode=[0]


            accepted=[0]
            try:
                accepted=df['accepted']
            except:
                accepted=[0]

            sent=[0]
            try:
                sent=df['invited_user']
            except:
                sent=[0]


        #     print(lc)

            data={"Invite_sent":str(sent[0]),"invite_accepted":str(accepted[0]),"payment_Mode":str(mode[0]),
            "Subscription_start_date":str(start[0]),"Subscription_expire_date":str(expire[0]),"Total_invites":str(INIVITES[0]),
            'Remaining_invites':str(abs(remaining[0])),'EMAIL':str(Email[0]),'Total_teachers':str(teacher[0]),'practice_count':str(pc[0]),'mindful_minutes':str(mm[0])
                , 'login_history':str(login_history[0])}
            print('school_data')
            return json.dumps(data)



###################

@app.route('/adminchart/<userid>')
def monthwiseadminpc(userid):
    
    
    
    
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    collection1 = db.user_master
    
    df1=DataFrame(list(collection1.aggregate([{"$match":
         {'$and': [
#             {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

#                    {'IS_ADMIN':'Y'},
                 {"_id" : ObjectId(""+userid+"")},
                 {'EMAIL_ID':{'$ne':''}},

                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},

                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
         ]}},
            {'$group':{'_id':'$schoolId._id','sid':{'$first':'$schoolId._id'},'school_name':{'$first':'$schoolId.NAME'},'date':{'$min':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},'country':{'$first':'$schoolId.COUNTRY'},
                      'State':{'$first':'$schoolId.STATE'},'INIVITES':{'$first':'$INVITES_ASSIGNED'},'EMAIL':{'$first':'$EMAIL_ID'},'admin':{'$first':'$IS_ADMIN'},'ROLE':{'$first':'$ROLE_ID.ROLE_id'}}},
            {'$project':{'_id':1,'sid':'$sid','ADMIN':'$admin','EMAIL_ID':'$EMAIL','INIVITES':'$INIVITES'}}])))
    
    
    df1 = df1.fillna(0)
    if df1.empty or df1["sid"][0] == 0:
        
        df1=pd.DataFrame({'_id':['Aug','Sep','Oct','Nov','Dec','Jan','Feb','Mar','Apr','May','Jun','Jul'],'practice_count':[0,0,0,0,0,0,0,0,0,0,0,0]})
        Month=df1['_id'].tolist()
        pc=df1['practice_count'].tolist()
        data={'monthname':Month,'teacher_practice':pc}
        return json.dumps(data)
    else:
        schoolid=str(df1['sid'][0])

        df=DataFrame(list(collection.aggregate([
         {"$match":
             {'$and': [
                  {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                    {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                      {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                     {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                    { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        # //             {'USER_ID.IS_PORTAL':'Y'},
                     {'USER_ID.EMAIL_ID':{'$ne':''}},
                   {"USER_ID.schoolId._id" : ObjectId((""+schoolid+""))},

                 {'MODIFIED_DATE':{"$gte": csy_first_date()}},
       
                     {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                               {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
             ]}},
                {'$group':{'_id':{'$month':'$MODIFIED_DATE'},'pc':{'$sum':1},
                          }},
                      {'$project':{'_id':1,'practice_count':'$pc',}}])))

        if df.empty:
            df=pd.DataFrame({'_id':[1,2,3,4,5,6,7,8,9,10,11,12],'practice_count':[0,0,0,0,0,0,0,0,0,0,0,0]})



        df.rename(columns = { '_id': 'Month'}, inplace = True)

        data = [['Aug', 8], ['Sep', 9], ['Oct', 10],['Nov', 11], ['Dec', 12], ['Jan', 1],['Feb', 2], ['Mar', 3], ['Apr', 4],['May', 5], ['Jun', 6], ['Jul', 7]] 



        df9 = pd.DataFrame(data, columns = ['Monthname', 'Month']) 

        DF=pd.merge(df9,df, on='Month',how='left')
        DF=DF.fillna(0)


        if df.empty == True:
            Month=['Aug','Sep','Oct','Nov','Dec','Jan','Feb','Mar','Apr','May','Jun','Jul',]

            pc=[0,0,0,0,0,0,0,0,0,0,0,0]
        else:
            Month=DF['Monthname'].tolist()

            pc=DF['practice_count'].tolist()


        data={'monthname':Month,'teacher_practice':pc}
    return json.dumps(data)




@app.route('/admintable/<userid>')
def admin_table(userid):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 

    collection1 = db.user_master.aggregate([{"$match":
             {'$and': [

                    {"IS_DISABLED":{"$ne":"Y"}},
                      {"IS_BLOCKED":{"$ne":"Y"}},
                     {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                    { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                    {"_id" : ObjectId(""+userid+"")},
    #                     
                 {'EMAIL_ID':{'$ne':''}},
    #              {'EMAIL_ID':'aroberts@agawamed.org'},
                     {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
  
                               {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
             ]}},
                {'$group':{'_id':'$schoolId._id','sid':{'$addToSet':'$schoolId._id'},'ID':{'$addToSet':'$_id'},'school_name':{'$first':'$schoolId.NAME'},'date':{'$min':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},'country':{'$first':'$schoolId.COUNTRY'},
                          'State':{'$first':'$schoolId.STATE'},'city':{'$first':'$schoolId.CITY'},'admin':{'$first':'$IS_ADMIN'},'ROLE':{'$first':'$ROLE_ID.ROLE_id'}}},
                {'$project':{'_id':1,'sid':'$sid','admin':'$admin'}},
    ])
    df1 = DataFrame(list(collection1))
    if df1.empty == True:
        return json.dumps({'Result':0})
    else:

#         email=str(df1['ID'][0])
        schoolid=str(df1['_id'][0])  
        df2 =  DataFrame(list(db.user_master.aggregate([{"$match":
             {'$and': [

                    {"IS_DISABLED":{"$ne":"Y"}},
                      {"IS_BLOCKED":{"$ne":"Y"}},
                     {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                    { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                    {"schoolId._id" : ObjectId(""+schoolid+"")},
    #                     
                 {'EMAIL_ID':{'$ne':''}},
    #              {'EMAIL_ID':'aroberts@agawamed.org'},
                     {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
  
                               {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
             ]}},
                {'$group':{'_id':'$_id','sid':{'$first':'$EMAIL_ID'},'sid_':{'$first':'$USER_NAME'}}},
                {'$project':{'_id':1,'email':'$sid','USER_NAME':'$sid_'}},
        ])))
        email=df2['_id'].tolist()
#          print(email)
#         df1 = DataFrame(list(collection1))



    
#         print(schoolid)
        df1
        df3 = DataFrame(list(db.audio_track_master.aggregate([
             {"$match":
                 {'$and': [
                      {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#        
                     {"USER_ID.schoolId._id" : ObjectId(""+schoolid+"")},
                         {'USER_ID.EMAIL_ID':{'$ne':''}},

                     {'MODIFIED_DATE':{"$gte": csy_first_date()}},
                         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
                 ]}},
                    {'$group':{'_id':'$USER_ID._id',

                               'last_practice_date_q1':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}},

                               'CURSOR_END' : {'$last':'$CURSOR_END'},'CURSOR_START' : {'$first':'$cursorStart'},
                        'AUDIO_NAME' : {'$first' : "$PROGRAM_AUDIO_ID.AUDIO_NAME"},
                                'AUDIO_DAY' : {'$last' : "$PROGRAM_AUDIO_ID.AUDIO_DAY"},
                               'object_id':{'$max':'$_id'},
                                'USER_NAME':{'$first':'$USER_ID.USER_NAME'},
                          'PROGRAM_NAME' : {'$last' : "$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME"},
                        'Mindful_Minutes':{'$sum':{'$round':[{'$divide':[{'$subtract':['$CURSOR_END','$cursorStart']},60]},0]}},


                            'AUDIO_LENGHT' :{"$last" : "$PROGRAM_AUDIO_ID.AUDIO_LENGTH"},
                               }},
                          {'$project':{'_id':1,
                            'last_practice_date_q1':1,
                            'Mindful_Minutes' :1,
                            'CURSOR_END' : 1,
                         'CURSOR_START' : 1, 
                         'AUDIO_NAME':1,
                                       'USER_NAME':1,
                         'PROGRAM_NAME' : 1,
                                       'AUDIO_LENGHT':1,
                                       'AUDIO_DAY':1,
                                       'object_id':1
                                      }}])))
        
        # dff=pd.merge(df1,df2, how='left', on='_id')
        if df3.empty==True:
            df3=pd.DataFrame({'_id':email})
            df3['PROGRAM_NAME'] = pd.Series(['NO PRACTICE' for x in range(len(df3.index))])
            df3['AUDIO_DAY'] = pd.Series(['NO PRACTICE' for x in range(len(df3.index))])
            df3['last_practice_duration'] = pd.Series([0 for x in range(len(df3.index))])
            df3['last_practice_completion_percentage'] = pd.Series([0 for x in range(len(df3.index))])
            dff=pd.merge(df2,df3,how='left',on='_id')
            
           
#         df3 = df3.transpose()
#         column3 =['_id','PROGRAM_NAME','AUDIO_DAY','Mindful_Minutes_csy']
#         for i in column3:
#             df3=df3.fillna('')
#             if i not in df3.columns:
#                 df3[i] = 'No info'
                
        else:
            dff = df3.fillna(0)
            dff["last_practice_duration"] = round(dff["CURSOR_END"]-dff["CURSOR_START"]) 
            
            dff['new']=dff['last_practice_duration'].where(dff['last_practice_duration']>dff['AUDIO_LENGHT'],other=dff['AUDIO_LENGHT'])
    
            dff["last_practice_completion_percentage"] = round((dff["last_practice_duration"]/dff["new"]) * 100)
#             dff['last_practice_completion_percentage']=dff[dff['last_practice_completion_percentage"'] < 0] = 0
#             dff['last_practice_duration']=dff[dff['last_practice_duration'] < 0] = 0
#             dff["Percentage Completed"] = round((dff["Mindful_Minutes"]/dff["AUDIO_LENGHT"]) * 100)
#         new_dff = dff[["_id",'last_practice_duration','CURSOR_START','CURSOR_END','USER_NAME',"AUDIO_NAME",'object_id',"PROGRAM_NAME",'AUDIO_DAY',"AUDIO_LENGHT","last_practice_date_q1","last_practice_completion_percentage"]]
            
        
#         
        data= dff[['USER_NAME','PROGRAM_NAME','AUDIO_DAY','last_practice_duration','last_practice_completion_percentage']]
        num = data._get_numeric_data()
        num[num < 0] = 0
#             print(data)
# data[data < 0] = 0
        temp={"data":data.values.tolist()}

#         data={'user_name':user,'program_name':program,'practice':practice,'duration':practice_duration,'percentage_completion':completion}
        return json.dumps(temp)
#         return data
# admin_table('615a998357fcee2834de3112')


@app.route('/calendarpracticesdates',methods=['GET'])
    
def calendarpractice():
    import flask
    from flask import request 
    from datetime import datetime
    from datetime import timedelta
    from networkdays import networkdays
 
    
    program = flask.request.args.get('program')
    language = flask.request.args.get('language')
    classid = flask.request.args.get('classid')
    
    
#     username = urllib.parse.quote_plus('adminIE')
#     password = urllib.parse.quote_plus('CtZh5Nqp8Qn9LHUDx2GH')
#     client = MongoClient("mongodb://%s:%s@54.184.165.106:27017/" % (username, password))
#     db=client.compass_beta
    client = MongoClient('mongodb://admin:F5tMazRj47cYqm33e@52.41.36.115:27017/')
    db=client.compass

    collection2=db.class_master
    collection = db.audio_track_master
    collection1=db.programs_audio
    today1= datetime.utcnow()
    
    
    df_=DataFrame(list(collection2.aggregate([
        {"$match":{"$and":[
    #              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                   
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                # { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                # { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#             
    #         
                {'_id':ObjectId(""+classid+"")},
                  
                 {'USER_ID.EMAIL_ID':{'$ne':''}},        
            #  {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            #  {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                        #    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                            #  {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
        ]}},
        {'$project':{'_id':'','ROLE_TYPE':'$USER_ID.ROLE_ID.ROLE_NAME'}}

    ])))
    
    
    
    df=DataFrame(list(collection.aggregate([
        {"$match":{"$and":[
    #              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                    {'IS_DONE':'Y'},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                # { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                # { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
              {'PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_ID':int(""+program+"")},
            {'PROGRAM_AUDIO_ID.LANGUAGE':{"$regex":""+language+"",'$options':'i'}},
    #         {'USER_ID._id':{'$eq':ObjectId('60b969b060e74e3b10f4bcb3')}},
                 {'PROGRAM_AUDIO_ID.AUDIO_DAY':{"$not":{"$regex":"bonus",'$options':'i'}}},
              {'PROGRAM_AUDIO_ID.AUDIO_DAY':{"$not":{"$regex":"sound",'$options':'i'}}},
                {'PROGRAM_AUDIO_ID.AUDIO_DAY':{'$not':{'$regex':'Counselor','$options':'i'}}},
                {'PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME':{'$not':{'$regex':'Wellness','$options':'i'}}},


    #             {'CLASS_ID._id':{'$eq':ObjectId('60b969ef60e74e3b10f4bcd3')}},
                {'CLASS_ID._id':ObjectId(""+classid+"")},
                    {'MODIFIED_DATE':{'$gte':csy_first_date()}}, 
                 {'USER_ID.EMAIL_ID':{'$ne':''}},        
            #  {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            #  {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                        #    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                            #  {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
        ]}},
        {'$group':{'_id':{'audio':'$PROGRAM_AUDIO_ID.AUDIO_DAY', 'date':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}},
              'AUDIO_DAY':{'$first':'$PROGRAM_AUDIO_ID.AUDIO_DAY'},'ROLE_TYPE':{'$first':'$USER_ID.ROLE_ID.ROLE_NAME'},'program':{'$first':'$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME'},
              'practice_date_q1':{'$first':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}}}} ,
        {'$project':{'_id':0,'audio':'$_id.audio','date':'$_id.date','Practice':'$program','ROLE_TYPE':'$ROLE_TYPE'
                }},
    #    
        {'$group':{'_id':'$audio','date':{'$max':'$date'},'o':{'$sum':1},'ROLE_TYPE':{'$first':'$ROLE_TYPE'}}},

        {'$sort':{'date':1}}

    ])))
    
    
    #group by date and take last practuce of that date and then group by audio and take max date (covering both scenario)
    
    
    
    
    DF=DataFrame(list(collection1.aggregate([
    {'$match':{'$and':[
     {'PROGRAM_ID.PROGRAM_ID':int(""+program+"")},
        {"LANGUAGE" :{"$regex":""+language+"",'$options':'i'}},
    {'AUDIO_DAY':{'$not':{'$regex':'Bonus','$options':'i'}}},
                    {'AUDIO_DAY':{'$not':{'$regex':'Counselor','$options':'i'}}},
        {'AUDIO_DAY':{"$not":{"$regex":"Sound",'$options':'i'}}},
        {'PROGRAM_ID.PROGRAM_NAME':{'$not':{'$regex':'Wellness','$options':'i'}}},

     ]}},
     {'$project':
      {
        "_id":0,
        "PROGRAM_AUDIO_ID":"$_id",
        "AUDIO_DAY" : '$AUDIO_DAY',
        "PROGRAM_NAME" : "$PROGRAM_ID.PROGRAM_NAME",
          
    }},
     {'$sort':{'PROGRAM_AUDIO_ID':1}}

    ])))
    df=df.rename(columns={"_id": "AUDIO_DAY"})
    if  df_.empty and df.empty == True:
        prac=[]
        datelist = pd.date_range(today1, periods=(DF.index[-1]+1)).strftime("%Y-%m-%d").tolist()
            
        
        data={'Result':1,'dates':datelist,'prac':prac}
        return json.dumps(data)
        
        
    else:
        df

    if df.empty == True:
        prac=[]
        if df_.ROLE_TYPE[0]!='PRESENT':
            import datetime
            datee=today1+ timedelta(days=-1)
            def date_by_adding_business_days(from_date, add_days):
                business_days_to_add = add_days
                current_date = from_date
                while business_days_to_add > 0:
                    current_date += datetime.timedelta(days=1)
                    weekday = current_date.weekday()
                    if weekday >= 5: # sunday = 6
                        continue
                    business_days_to_add -= 1
                return current_date
            days = networkdays.Networkdays(today1, date_by_adding_business_days(datee, (DF.index[-1]+1)))
            days.networkdays()
            datelist=[]
            for i in days.networkdays():
                i=i.strftime("%Y-%m-%d")
                datelist.append(i)
        else:
        
#             prac=[]
            datelist = pd.date_range(today1, periods=(DF.index[-1]+1)).strftime("%Y-%m-%d").tolist()
            
        
        data={'Result':1,'dates':datelist,'prac':prac}
            
    else:
        

        DF=DF[['AUDIO_DAY']]
        PRAC_DF=DF
       
        a=df['AUDIO_DAY'].tolist()
        
        b=PRAC_DF['AUDIO_DAY'].tolist()

        index_num=[]
        for i in range(len(a)):
            if a[i] in b:
                index_num.append(b.index(a[i]))

        max_index=max(index_num)
#         print(max_index)
#         print(index_num)
       
        practices=b[max_index+1::]
        latest=df['date'].max()
        mydatetime= dateutil.parser.parse(latest).date()

        today1=date.today()
        if mydatetime==today1:

            nextdate=today1 + timedelta(days=1)
        else:
            nextdate=today1
            
        if df.ROLE_TYPE[0]!='PRESENT':
            import datetime
            datee=nextdate+ timedelta(days=-1)
            def date_by_adding_business_days(from_date, add_days):
                business_days_to_add = add_days
                current_date = from_date
                while business_days_to_add > 0:
                    current_date += datetime.timedelta(days=1)
                    weekday = current_date.weekday()
                    if weekday >= 5: # sunday = 6
                        continue
                    business_days_to_add -= 1
                return current_date

            from networkdays import networkdays


            days = networkdays.Networkdays(nextdate, date_by_adding_business_days(datee, (len(b)-(max_index+1))))

            (days.networkdays())
            datelist=[]
            for i in days.networkdays():
                i=i.strftime("%Y-%m-%d")
                datelist.append(i)
           
        else:
            datelist = pd.date_range(nextdate, periods=(len(b)-(max_index+1))).strftime("%Y-%m-%d").tolist()

        
            
            
        # code to print next 90 dates from starts from the next date and put them in a list
#         datelist = pd.date_range(nextdate, periods=(len(b)-(max_index+1))).strftime("%Y-%m-%d").tolist()
        df2=pd.DataFrame({'AUDIO_DAY':practices,'date':datelist})
        
        prac=df['date'].unique().tolist()
        print(prac)
        df3=pd.concat([df, df2], axis = 0)
        values=df3['date'].tolist()
#         print(len(values))
        
        data={'Result':1,'dates':values,'prac':prac}
#         print(len(b))
#         print(len(a))
#         print(len(datelist))


    return json.dumps(data)



# calendarpractice('11','English','601147af9b68e827cc76791a')


    
#--------------------ADMIN PORTAL TABLE API--------------------   

@app.route('/adminportal__table/<userid>')
def admin_portal_table(userid):
    
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass

    collection2=db.school_master
    collection=db.user_master
    collection4=db.invite_master
    collection5=db.login_logs
    collection1=db.audio_track_master
    collection3=db.subscription_master

    from datetime import datetime

    df0 = DataFrame(list(collection.aggregate([
        {"$match":{'$and': [{"_id" : ObjectId(""+userid+"")}]}},
        {'$project':{'_id':1,"EMAIL_ID" : 1,'district_admin':'$IS_DISTRICT_ADMIN'}}])))
#     print(df0)



    if 'district_admin' not in df0.columns:
        df0['district_admin']=0

    # if df0[df0['district_admin']=='Y']:
    #     if 'Y' in df0['district_admin'][0]:
    if df0['district_admin'][0]=='Y':

        uemail = df0["EMAIL_ID"].to_list()

        df00 = DataFrame(list(db.district_master.aggregate([
        {"$match":{'$and': [
        {"ADMIN_EMAIL" : {"$in" : uemail}}]}},
        {'$project':{'_id':1,"ADMIN_EMAIL" : 1}}])))
#         print(df00)

        if df00.empty==True:
            temp={'Result':0}
            return json.dumps(temp, default=str)
        else:
            disid = df00["_id"].to_list()
#             print("disid",disid)


            df1=DataFrame(list(db.user_master.aggregate([{"$match":
            {'$and': [
            {"DISTRICT_ID._id" : {"$in" : disid}},
            #             {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"IS_DISABLED":{"$ne":"Y"}},
            {"IS_BLOCKED":{"$ne":"Y"}},
            {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

            #                    {'IS_ADMIN':'Y'},
    #         {"_id" : ObjectId(""+userid+"")},
            {'EMAIL_ID':{'$ne':''}},

            {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},

            {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
            {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
            ]}},
            # {'$group':{'_id':'$schoolId._id','sid':{'$addToSet':'$schoolId._id'},'school_name':{'$first':'$schoolId.NAME'},
            #            'date':{'$min':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},
            #            'country':{'$first':'$schoolId.COUNTRY'},
            # 'State':{'$first':'$schoolId.STATE'},'INIVITES':{'$first':'$INVITES_ASSIGNED'},
            #            'EMAIL':{'$first':'$EMAIL_ID'},'admin':{'$first':'$IS_ADMIN'},'ROLE':{'$first':'$ROLE_ID.ROLE_id'}}},

            {'$project':{'_id':1}}])))

            if df1.empty==True:
                temp={'Result':0}
                return json.dumps(temp, default=str)
            else:
                userid = df1["_id"].to_list()
#                 print("userid",len(userid))

            df5=DataFrame(list(db.user_master.aggregate([{"$match":
            {'$and': [
            {'_id':{"$in" : userid}},
            {'DISTRICT_ID._id':{"$in" : disid}},
            {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"IS_DISABLED":{"$ne":"Y"}},
            {"IS_BLOCKED":{"$ne":"Y"}},
            {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
             {'EMAIL_ID':{'$ne':''}},
             {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},

             {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},

             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
            ]}},
            # {'$group':{'_id':'$schoolId._id','teacher':{'$sum':1},'school_name':{'$first':'$schoolId.NAME'},'date':{'$min':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},'country':{'$first':'$schoolId.COUNTRY'},
            # 'State':{'$first':'$schoolId.STATE'},'INIVITES':{'$first':'$INVITES_ASSIGNED'},'city':{'$first':'$schoolId.CITY'},'admin':{'$first':'$IS_ADMIN'},'ROLE':{'$first':'$ROLE_ID.ROLE_id'}}},

            {'$project':{'_id': "$_id",'ADMIN':'$IS_ADMIN','INIVITES':'$INVITES_ASSIGNED'}}])))

            user_id = list(df5["_id"])
#             print("user_id",len(user_id))


            df2=DataFrame(list(db.invite_master.aggregate([
            {"$match":
            {'$and': [

            {'USER_ID._id' : {"$in" : user_id }},
            {'USER_ID.DISTRICT_ID._id':{"$in" : disid}},
            {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
            {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            # //             {'USER_ID.IS_PORTAL':'Y'},
            {'USER_ID.EMAIL_ID':{'$ne':''}},      
            # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},         
             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
            ]}},
            # {'$group':{'_id':'$USER_ID.schoolId._id','ID':{'$addToSet':'$USER_ID._id'},
            # 'invited_user':{'$addToSet':'$INVITED_USER_ID._id'},
            # 'accepted' :  {'$sum' : {'$cond': [ {'$eq': [ '$STATUS', 'Y' ] }, 1, 0 ] } },}},

            {'$project':{'_id':'$INVITED_USER_ID._id',"User_Name" : "$INVITED_USER_ID.USER_NAME",
                         "EMAIL_ID" : '$INVITED_USER_ID.EMAIL_ID','accepted':'$STATUS'}}
            ])))

            df2_Y = df2[df2["accepted"] == "Y"]
            df2_N = df2[df2["accepted"] == "N"]
            user_id1 = list(df2["_id"])
            user_id2 = list(df2_Y["_id"])
#             print("user_id1",len(user_id1))
#             print("user_id2",len(user_id2))


            df3=DataFrame(list(db.audio_track_master.aggregate([
            {"$match":
            {'$and': [
            {'USER_ID._id' : {"$in" : user_id1 }},
            {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
            {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

            {'USER_ID.EMAIL_ID':{'$ne':''}},

            {'MODIFIED_DATE':{"$gte": csy_first_date()}},

            {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
            {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
            {'USER_ID.DISTRICT_ID._id':{"$in" : disid}},
            {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
            ]}},
            {'$group':{'_id':'$USER_ID._id','pc':{'$sum':1},'last_practice_date_q1':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}},
            'Total_Mindful_Minutes':{"$sum":{"$round":[{"$divide":[{"$subtract":['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
            {'$project':{'_id':1,'teacher_practice':'$pc','Total_Mindful_Minutes':'$Total_Mindful_Minutes','last_practice_date':'$last_practice_date_q1'}}])))

            if df3.empty:
                df3=pd.DataFrame(columns=['_id','teacher_practice','Total_Mindful_Minutes','last_practice_date'])
                df3['_id']=df2['_id'].copy()
            df3.fillna(0,inplace=True)

            df4=DataFrame(list(db.audio_track_master.aggregate([
            {"$match":
            {'$and': [
            {'USER_ID._id' : {"$in" : user_id2 }},

            {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
            {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

            {'USER_ID.EMAIL_ID':{'$ne':''}},

            {'MODIFIED_DATE':{"$gte":csy_first_date() }},

            {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
            {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
            {'USER_ID.DISTRICT_ID._id':{"$in" : disid}},
            {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
            ]}},
            {'$group':{'_id':'$USER_ID._id','pc':{'$sum':1},'last_practice_date_q1':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}},
            'Total_Mindful_Minutes':{"$sum":{"$round":[{"$divide":[{"$subtract":['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
            {'$project':{'_id':1,'teacher_practice':'$pc','Total_Mindful_Minutes':'$Total_Mindful_Minutes','last_practice_date':'$last_practice_date_q1'}}])))

            if df4.empty:
                df4=pd.DataFrame(columns=['_id','teacher_practice','Total_Mindful_Minutes','last_practice_date'])
                df4['_id']=df2_Y['_id'].copy()
            df4.fillna(0,inplace=True)

            df6=DataFrame(list(db.login_logs.aggregate([
            {"$match":
            {'$and': [
            {'USER_ID._id' : {"$in" : user_id1 }},
            {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
            {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        #         //             {'USER_ID.IS_PORTAL':'Y'},
            {'USER_ID.EMAIL_ID':{'$ne':''}},

            {'LAST_LOGGED_IN':{"$gte": csy_first_date()}},
        #         //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
            {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
            {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
            {'USER_ID.DISTRICT_ID._id':{"$in" : disid}},
            {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
            ]}},
            # {'$group':{'_id':'$USER_ID._id','pc':{'$sum':1},'LAST_LOGGED_IN':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$LAST_LOGGED_IN'}}},
            # }},
            {'$project':{'_id':'$USER_ID._id','LAST_LOGGED_IN':{"$dateToString": { "format": "%Y-%m-%d", "date":'$LAST_LOGGED_IN'}}}}])))

            if df6.empty:
                df6=pd.DataFrame(columns=['_id','LAST_LOGGED_IN'])
                df6['_id']=df2['_id'].copy()
            df6.fillna(0,inplace=True)

            df7 = DataFrame(list(db.login_logs.aggregate([
            {"$match":
            {'$and': [   
            {'USER_ID._id' : {"$in" : user_id2 }},
            {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
            {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

            {'USER_ID.EMAIL_ID':{'$ne':''}},

        #                      {'LAST_LOGGED_IN':{"$gte": datetime(2020,8,1)}},
            # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
            {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
            {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
            {'USER_ID.DISTRICT_ID._id':{"$in" : disid}},
            {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
            ]}},
            # {'$group':{'_id':'$USER_ID._id','pc':{'$sum':1},'LAST_LOGGED_IN':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$LAST_LOGGED_IN'}}},
            # }},
            {'$project':{'_id':'$USER_ID._id','LAST_LOGGED_IN':{"$dateToString": { "format": "%Y-%m-%d", "date":'$LAST_LOGGED_IN'}}}}])))

            if df7.empty:
                df7=pd.DataFrame(columns=['_id','LAST_LOGGED_IN'])
                df7['_id']=df2_Y['_id'].copy()
            df7.fillna(0,inplace=True)

            df01=pd.merge(df5,df2,how='right', on='_id')
            df02=pd.merge(df01,df3,how='left', on='_id')
            df03=pd.merge(df02,df6,how='left', on='_id')
            # dff=pd.merge(dfff,df3, how='left', on='_id')
            final_df = df03.fillna(0)
            final_df = final_df[['_id','User_Name', 'EMAIL_ID','last_practice_date','LAST_LOGGED_IN','teacher_practice','Total_Mindful_Minutes']]
            final_df.columns = ['USER_ID','USER_NAME', 'EMAIL_ID','LAST_PRACTICE_DATE','LAST_LOGIN_DATE','PRACTICE_SESSIONS','MINDFUL_MINUTES']

            df11=pd.merge(df5,df2_Y,how='right', on='_id')
            df22=pd.merge(df11,df4,how='left', on='_id')
            df33=pd.merge(df22,df7,how='left', on='_id')
            final_df1 = df33.fillna(0)
            final_df1 = final_df1[['_id','User_Name', 'EMAIL_ID','last_practice_date','LAST_LOGGED_IN','teacher_practice','Total_Mindful_Minutes']]
            final_df1.columns = ['USER_ID','USER_NAME', 'EMAIL_ID','LAST_PRACTICE_DATE','LAST_LOGIN_DATE','PRACTICE_SESSIONS','MINDFUL_MINUTES']

            temp = {"INVITE_SENT" : final_df.to_numpy().tolist(), "INVITE_ACCEPTED" : final_df1.to_numpy().tolist()}
            print('district_data',len(final_df),len(final_df1))
            return json.dumps(temp, default=str)
    
    else:
        username = urllib.parse.quote_plus('admin')
        password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
        client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
        db=client.compass

        # username = urllib.parse.quote_plus('adminIE')                                     #SwitchedToBeta
        # password = urllib.parse.quote_plus('CtZh5Nqp8Qn9LHUDx2GH')
        # client = MongoClient("mongodb://%s:%s@54.184.165.106:27017/" % (username, password))
        # db=client.compass_beta

        from datetime import datetime

        df1=DataFrame(list(db.user_master.aggregate([{"$match":
        {'$and': [
        #             {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {"IS_DISABLED":{"$ne":"Y"}},
        {"IS_BLOCKED":{"$ne":"Y"}},
        {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                        { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

        #                    {'IS_ADMIN':'Y'},
                {"_id" : ObjectId(""+userid+"")},
                         {'EMAIL_ID':{'$ne':''}},

                         {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},

                                   {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                     {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
        ]}},
        # {'$group':{'_id':'$schoolId._id','sid':{'$addToSet':'$schoolId._id'},'school_name':{'$first':'$schoolId.NAME'},
        #            'date':{'$min':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},
        #            'country':{'$first':'$schoolId.COUNTRY'},
        # 'State':{'$first':'$schoolId.STATE'},'INIVITES':{'$first':'$INVITES_ASSIGNED'},
        #            'EMAIL':{'$first':'$EMAIL_ID'},'admin':{'$first':'$IS_ADMIN'},'ROLE':{'$first':'$ROLE_ID.ROLE_id'}}},

        {'$project':{'_id':'$schoolId._id'}}])))

        if df1.empty==True:
            temp={'Result':0}
            return json.dumps(temp, default=str)

        else:
            schoolid=str(df1['_id'][0])

        #     print(schoolid)
            df5=DataFrame(list(db.user_master.aggregate([{"$match":
            {'$and': [
            {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"IS_DISABLED":{"$ne":"Y"}},
            {"IS_BLOCKED":{"$ne":"Y"}},
            {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            {'schoolId._id':ObjectId(""+schoolid+"")},
            #                    {'IS_ADMIN':'Y'},

                                 {'EMAIL_ID':{'$ne':''}},

                                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},

                                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
            ]}},
            # {'$group':{'_id':'$schoolId._id','teacher':{'$sum':1},'school_name':{'$first':'$schoolId.NAME'},'date':{'$min':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},'country':{'$first':'$schoolId.COUNTRY'},
            # 'State':{'$first':'$schoolId.STATE'},'INIVITES':{'$first':'$INVITES_ASSIGNED'},'city':{'$first':'$schoolId.CITY'},'admin':{'$first':'$IS_ADMIN'},'ROLE':{'$first':'$ROLE_ID.ROLE_id'}}},

            {'$project':{'_id': "$_id",'ADMIN':'$IS_ADMIN','INIVITES':'$INVITES_ASSIGNED'}}])))

            user_id = list(df5["_id"])


            df2=DataFrame(list(db.invite_master.aggregate([
            {"$match":
            {'$and': [
                {'USER_ID._id' : {"$in" : user_id }},
                          {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
            {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            # //             {'USER_ID.IS_PORTAL':'Y'},
            {'USER_ID.EMAIL_ID':{'$ne':''}},
            #                 {"USER_ID._id" : ObjectId("5f2e12f3592000521523721a")},


            # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
            ]}},
            # {'$group':{'_id':'$USER_ID.schoolId._id','ID':{'$addToSet':'$USER_ID._id'},
            # 'invited_user':{'$addToSet':'$INVITED_USER_ID._id'},
            # 'accepted' :  {'$sum' : {'$cond': [ {'$eq': [ '$STATUS', 'Y' ] }, 1, 0 ] } },}},

            {'$project':{'_id':'$INVITED_USER_ID._id',"User_Name" : "$INVITED_USER_ID.USER_NAME",
                         "EMAIL_ID" : '$INVITED_USER_ID.EMAIL_ID','accepted':'$STATUS'}}
            ])))

            df2_Y = df2[df2["accepted"] == "Y"]
            df2_N = df2[df2["accepted"] == "N"]
            user_id1 = list(df2["_id"])
            user_id2 = list(df2_Y["_id"])
            

            df3=DataFrame(list(db.audio_track_master.aggregate([
            {"$match":
            {'$and': [
            {'USER_ID._id' : {"$in" : user_id1 }},
            {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
            {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

                                 {'USER_ID.EMAIL_ID':{'$ne':''}},

            {'MODIFIED_DATE':{"$gte": csy_first_date()}},

                                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
            ]}},
            {'$group':{'_id':'$USER_ID._id','pc':{'$sum':1},
                       'last_practice_date_q1':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}},
            'Total_Mindful_Minutes':{"$sum":{"$round":[{"$divide":[{"$subtract":['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
            {'$project':{'_id':1,'teacher_practice':'$pc','Total_Mindful_Minutes':'$Total_Mindful_Minutes',
                        'last_practice_date':'$last_practice_date_q1'}}])))

            if df3.empty:
                df3=pd.DataFrame(columns=['_id','teacher_practice','Total_Mindful_Minutes','last_practice_date'])
                df3['_id']=df2['_id'].copy()
            df3.fillna(0,inplace=True)

            df4=DataFrame(list(db.audio_track_master.aggregate([
            {"$match":
            {'$and': [
            {'USER_ID._id' : {"$in" : user_id2 }},
            {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
            {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

                                 {'USER_ID.EMAIL_ID':{'$ne':''}},

            {'MODIFIED_DATE':{"$gte":csy_first_date() }},

                                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
            ]}},
            {'$group':{'_id':'$USER_ID._id','pc':{'$sum':1},
                       'last_practice_date_q1':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}},
            'Total_Mindful_Minutes':{"$sum":{"$round":[{"$divide":[{"$subtract":['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
            {'$project':{'_id':1,'teacher_practice':'$pc','Total_Mindful_Minutes':'$Total_Mindful_Minutes',
                        'last_practice_date':'$last_practice_date_q1'}}])))

            if df4.empty:
                df4=pd.DataFrame(columns=['_id','teacher_practice','Total_Mindful_Minutes','last_practice_date'])
                df4['_id']=df2_Y['_id'].copy()
            df4.fillna(0,inplace=True)

            df6=DataFrame(list(db.login_logs.aggregate([
            {"$match":
            {'$and': [
            {'USER_ID._id' : {"$in" : user_id1 }},
            {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
            {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        #         //             {'USER_ID.IS_PORTAL':'Y'},
                                 {'USER_ID.EMAIL_ID':{'$ne':''}},

                         {'LAST_LOGGED_IN':{"$gte": csy_first_date()}},
        #         //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
            ]}},
            # {'$group':{'_id':'$USER_ID._id','pc':{'$sum':1},'LAST_LOGGED_IN':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$LAST_LOGGED_IN'}}},
            # }},
            {'$project':{'_id':'$USER_ID._id','LAST_LOGGED_IN':{"$dateToString": { "format": "%Y-%m-%d", "date":'$LAST_LOGGED_IN'}}}}])))

            if df6.empty:
                df6=pd.DataFrame(columns=['_id','LAST_LOGGED_IN'])
                df6['_id']=df2['_id'].copy()
            df6.fillna(0,inplace=True)

            df7 = DataFrame(list(db.login_logs.aggregate([
            {"$match":
            {'$and': [
            {'USER_ID._id' : {"$in" : user_id2 }},
            {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
            {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

                                 {'USER_ID.EMAIL_ID':{'$ne':''}},

        #                      {'LAST_LOGGED_IN':{"$gte": datetime(2020,8,1)}},
            # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
            ]}},
            # {'$group':{'_id':'$USER_ID._id','pc':{'$sum':1},'LAST_LOGGED_IN':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$LAST_LOGGED_IN'}}},
            # }},
            {'$project':{'_id':'$USER_ID._id','LAST_LOGGED_IN':{"$dateToString": { "format": "%Y-%m-%d", "date":'$LAST_LOGGED_IN'}}}}])))

            if df7.empty:
                df7=pd.DataFrame(columns=['_id','LAST_LOGGED_IN'])
                df7['_id']=df2_Y['_id'].copy()
            df7.fillna(0,inplace=True)

            df01=pd.merge(df5,df2,how='right', on='_id')
            df02=pd.merge(df01,df3,how='left', on='_id')
            df03=pd.merge(df02,df6,how='left', on='_id')
            # dff=pd.merge(dfff,df3, how='left', on='_id')
            final_df = df03.fillna(0)
            final_df = final_df[['_id','User_Name', 'EMAIL_ID','last_practice_date','LAST_LOGGED_IN','teacher_practice','Total_Mindful_Minutes']]
            final_df.columns = ['USER_ID','USER_NAME', 'EMAIL_ID','LAST_PRACTICE_DATE','LAST_LOGIN_DATE','PRACTICE_SESSIONS','MINDFUL_MINUTES']


            df11=pd.merge(df5,df2_Y,how='right', on='_id')
            df22=pd.merge(df11,df4,how='left', on='_id')
            df33=pd.merge(df22,df7,how='left', on='_id')
            final_df1 = df33.fillna(0)
            final_df1 = final_df1[['_id','User_Name', 'EMAIL_ID','last_practice_date','LAST_LOGGED_IN','teacher_practice','Total_Mindful_Minutes']]
            final_df1.columns = ['USER_ID','USER_NAME', 'EMAIL_ID','LAST_PRACTICE_DATE','LAST_LOGIN_DATE','PRACTICE_SESSIONS','MINDFUL_MINUTES']

            temp = {"INVITE_SENT" : final_df.to_numpy().tolist(), "INVITE_ACCEPTED" : final_df1.to_numpy().tolist()}
            print('school_data',len(final_df),len(final_df1))
            return json.dumps(temp, default=str)

        
# admin_portal_table("5f33c1c3418467201938f2e3")

#############################################################33333



@app.route('/adminstatscards/<userid>')
def admin_stats_cards(userid):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    collection2=db.school_master
    collection=db.user_master
    collection4=db.invite_master
    collection1=db.audio_track_master
    collection3=db.subscription_master
#     district=disdic[districtid]
#     myDatetime1 = dateutil.parser.parse(startdate)
#     myDatetime2 = dateutil.parser.parse(enddate)
    from datetime import datetime
    
    df1=DataFrame(list(collection.aggregate([{"$match":
         {'$and': [
            {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

#                    {'IS_ADMIN':'Y'},
                 {"_id" : ObjectId(""+userid+"")},
                 {'EMAIL_ID':{'$ne':''}},

                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},

                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
         ]}},
            {'$group':{'_id':'$schoolId._id','sid':{'$addToSet':'$schoolId._id'},'school_name':{'$first':'$schoolId.NAME'},'date':{'$min':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},'country':{'$first':'$schoolId.COUNTRY'},
                      'State':{'$first':'$schoolId.STATE'},'INIVITES':{'$first':'$INVITES_ASSIGNED'},'EMAIL':{'$first':'$EMAIL_ID'},'admin':{'$first':'$IS_ADMIN'},'ROLE':{'$first':'$ROLE_ID.ROLE_id'}}},
            {'$project':{'_id':1,'sid':'$sid','ADMIN':'$admin','EMAIL_ID':'$EMAIL','INIVITES':'$INIVITES'}}])))
    df1= df1.fillna(0)
    print("df1",df1)
    print(df1["_id"])    
    if df1.empty==True or df1['_id'][0] == 0 :
        data={'Result':0}        
        return json.dumps(data)
    else:
        schoolid=str(df1['_id'][0])
        print(schoolid)
    

    
    df5=DataFrame(list(collection.aggregate([{"$match":
         {'$and': [
            {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                {'schoolId._id':ObjectId(""+schoolid+"")},
#                    {'IS_ADMIN':'Y'},
                
                 {'EMAIL_ID':{'$ne':''}},

                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},

                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
         ]}},
            {'$group':{'_id':'$schoolId._id','teacher':{'$addToSet':'$_id'},'school_name':{'$first':'$schoolId.NAME'},}},
            {'$project':{'_id':1,'teacher':{'$size':'$teacher'}}}])))
    
    
    
    df2=DataFrame(list(collection.aggregate([{"$match":
         {'$and': [
            {'ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                {'schoolId._id':ObjectId(""+schoolid+"")},
#                    {'IS_ADMIN':'Y'},
                
                 {'EMAIL_ID':{'$ne':''}},

                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},

                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
         ]}},
            {'$group':{'_id':'$schoolId._id','user':{'$addToSet':'$_id'},'school_name':{'$first':'$schoolId.NAME'},'date':{'$min':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},'country':{'$first':'$schoolId.COUNTRY'},
                      'State':{'$first':'$schoolId.STATE'},'INIVITES':{'$first':'$INVITES_ASSIGNED'},'city':{'$first':'$schoolId.CITY'},'admin':{'$first':'$IS_ADMIN'},'ROLE':{'$first':'$ROLE_ID.ROLE_id'}}},
            {'$project':{'_id':1,'total_users':{'$size':'$user'}}}])))
    
    if df2.empty == True:
        df2 = df2.append({'_id': schoolid, 'total_users': 0}, ignore_index=True)
#         df2=pd.DataFrame(index=[0], columns=['_id','total_users'])

#         df2["_id"] = schoolid
#         df2.fillna(0,inplace=True)
    print("df2",df2)
        
    df3=DataFrame(list(collection1.aggregate([
     {"$match":
         {'$and': [
              {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#     //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},

             {'MODIFIED_DATE':{"$gte": csy_first_date()}},
#     //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
         ]}},
            {'$group':{'_id':'$USER_ID.schoolId._id','pc':{'$sum':1},'active':{'$addToSet':'$USER_ID._id'},'last_practice_date_q1':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}},
                      'Total_Mindful_Minutes':{"$sum":{"$round":[{"$divide":[{"$subtract":['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
                  {'$project':{'_id':1,'practice':'$pc','active_users':{'$size':'$active'},'Total_Mindful_Minutes':'$Total_Mindful_Minutes'}}])))
   
    
    
    df4 = DataFrame(list(collection.aggregate([{"$match":
        {'$and':[ 
            {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

    # //               {'IS_ADMIN':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                {"_id":{"$nin":db.audio_track_master.distinct("USER_ID._id")}},
            
                                 ]}},
                {"$group":{'_id':'$schoolId._id','distincts': {'$addToSet': "$_id"}}},
                {"$project":{'_id':1,'never_practicing':{'$size':'$distincts'}}}])))
    df6 = DataFrame(list(collection.aggregate([{"$match":
        {'$and':[ 
            {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

    
                 {'EMAIL_ID':{'$ne':''}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                {"_id":{"$nin":db.login_logs.distinct("USER_ID._id")}},
            
                                 ]}},
                {"$group":{'_id':'$schoolId._id','distincts': {'$addToSet': "$_id"}}},
                {"$project":{'_id':1,'never_loggedin':{'$size':'$distincts'}}}])))

    print("df1",df1)
    print("df2",df2)
    df__=pd.merge(df1,df2, how='left', on='_id')
    dfff=pd.merge(df__,df5,how='left', on='_id')
    dff=pd.merge(dfff,df3, how='left', on='_id')
    dffff=pd.merge(dff,df4, how='left', on='_id')
    df=pd.merge(dffff,df6, how='left', on='_id')
#     df=df.fillna('')
    
#     df['remaining']=df['INIVITES']-df['invited_user']
    
    
    
    
    
    total_users=[0]
    try:
        total_users=df['total_users']
    except:
        total_users=[0]
        
    
    
    
    Email=[0]
    try:
        Email=df['EMAIL_ID']
    except:
        Email=[0]
        
    active_users=[0]
    try:
        active_users=df['active_users']
    except:
        active_users=[0]
    
    pc=[0]
    try:
        pc=df['practice']
    except:
        pc=[0]
        
    teacher=[0]
    try:
        teacher=df['teacher']
    except:
        teacher=[0]
        
    mm=[0]
    try:
        mm=df['Total_Mindful_Minutes']
    except:
        mm=[0]
    
    never_practicing=[0]
    try:
        never_practicing=df['never_practicing']
    except:
        never_practicing=[0]
        
    
    
    
    
    never_loggedin=[0]
    try:
        never_loggedin=df['never_loggedin']
    except:
        never_loggedin=[0]
    
    total_users = total_users.replace(np.nan,int(0))
    
    
    data={"total_users":str(total_users[0]),"active_users":str(active_users[0]),"never_loggedin":str(never_loggedin[0]),
                                                                                                     "Total_Mindful_Minutes":str(mm[0]),
          'never_practicing':str(never_practicing[0]),'adminEMAIL':str(Email[0]),'teachers':str(teacher[0]),'practice_count':str(pc[0])}
    return json.dumps(data)
    
    
#     return df
    
    
    
    









@app.route('/upcomingpractice/<userid>')
def upcoming_practice(userid):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    collection = db.audio_track_master
    collection3=db.class_master
    collection1=db.audio_feedback
    collection2=db.favourite_tracks
    collection4=db.subscription_master
    from datetime import datetime
    from datetime import timedelta
    df=DataFrame(list(collection.aggregate([
        {"$match":{"$and":[
#                  {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                    {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                      {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                     {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                    { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #         {"USER_ID._id" : ObjectId("5f60fe1dc1eb3755730e669c")},
    #         {"USER_ID._id" : ObjectId(""+userid+"")},ObjectId("5f33b2f48154ad36dfc2bf39")
    #         5f33ad468154ad36dfc2b7bd
            {'PROGRAM_AUDIO_ID.AUDIO_DAY':{'$not':{'$regex':'Bonus','$options':'i'}}},
                    {'PROGRAM_AUDIO_ID.AUDIO_DAY':{'$not':{'$regex':'Counselor','$options':'i'}}},
            {'PROGRAM_AUDIO_ID.AUDIO_DAY':{'$not':{'$regex':'Sound','$options':'i'}}},
            {'PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME':{'$not':{'$regex':'Wellness','$options':'i'}}},
             {'PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_ID':{'$nin':[1,2,3,4,5]}},

             {"USER_ID._id" : ObjectId(""+userid+"")},
                    {'MODIFIED_DATE':{'$gte':csy_first_date()}}, 
                 {'USER_ID.EMAIL_ID':{'$ne':''}},        
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                               {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
        ]}},

       {'$group':{'_id':'$USER_ID._id','schoolId':{'$first':'$USER_ID.schoolId._id'},
              'AUDIO_DAY':{'$last':'$PROGRAM_AUDIO_ID.AUDIO_DAY'},'LANGUAGE':{'$last':'$PROGRAM_AUDIO_ID.LANGUAGE'},'AUDIO_NAME':{'$last':'$PROGRAM_AUDIO_ID.AUDIO_NAME'},'AUDIO_ID':{'$last':'$PROGRAM_AUDIO_ID._id'},'AUDIO_LENGHT':{'$last':'$PROGRAM_AUDIO_ID.AUDIO_LENGTH'},'program':{'$last':'$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME'},
                  'program_id':{'$last':'$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_ID'},
              'practice_date_q1':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}}}} ,
        {'$project':{'_id':1,'schooId':'$schoolId','AUDIO_DAY':'$AUDIO_DAY','program_id':'$program_id','PREVIOUS_DATE':'$practice_date_q1','AUDIO_LENGTH':'$AUDIO_LENGTH','PROGRAM_NAME':'$program','LANGUAGE':'$LANGUAGE','AUDIO_NAME':'$AUDIO_NAME','AUDIO_ID':'$AUDIO_ID'
                    }},]))).fillna('')


    if df.empty==True:
        df1=DataFrame(list(collection3.aggregate([
        {'$match':{'$and':[{"USER_ID._id" : ObjectId(""+userid+"")}]}},
        {'$unwind':"$DEFAULT_PROGRAM"},
        {'$replaceRoot':{
        "newRoot":{"$mergeObjects":["$$ROOT", "$DEFAULT_PROGRAM"] }}},
        {'$project':{'DEFAULT_PROGRAM':{'$arrayElemAt':[{'$objectToArray':"$DEFAULT_PROGRAM"},1]},}},
        {'$group':{'_id':'','DEFAULT_PROGRAM':{'$last':'$DEFAULT_PROGRAM.v'}}}

        ])))
        if df1.empty==True:
            data={'Result':0}
        else:
            default=str(df1['DEFAULT_PROGRAM'][0])
            default 

            collection_user=db.programs_audio
            user= [


                {'$match':{'$and':[{'PROGRAM_ID._id':ObjectId(""+default+"")}]}},
                 {'$project':
                  {
                    "_id":0,
                    "PROGRAM_AUDIO_ID":"$_id",
                    "AUDIO_DAY" : '$AUDIO_DAY',
                      "AUDIO_NAME":'$AUDIO_NAME',
                       "PROGRAM_ID" : "$PROGRAM_ID._id",
                      "AUDIO_LENGTH":"$AUDIO_LENGTH",
                      "AUDIO_TITLE":"$AUDIO_TITLE",
                      "BACKGROUND_IMAGE":"$CLASSROOM_IMAGE_URL",

                    "PROGRAM_NAME" : "$PROGRAM_ID.PROGRAM_NAME",
                    "AGE_GROUP" : "$PROGRAM_ID.AGE_GROUP",
                    "NARRATOR_NAME" : "$NARRATOR_ID.NARRATOR_NAME",

            #         "PROG_DATE":'$PROGRAM_ID.CREATED_DATE'
                }},
                   {'$sort':{'PROGRAM_AUDIO_ID':1}},
                {'$limit':1}
            ]

            update=list(collection_user.aggregate(user))
            df_prac_teacher=pd.DataFrame(update)
            if 'NARRATOR_NAME' not in df_prac_teacher.columns:
                df_prac_teacher['NARRATOR_NAME']="No info"
            else:
                df_prac_teacher
            df2=df_prac_teacher[['AUDIO_DAY','AUDIO_NAME','PROGRAM_NAME','NARRATOR_NAME','AUDIO_LENGTH','AUDIO_TITLE','BACKGROUND_IMAGE']]
            df2['TODAY_DATE']=pd.to_datetime(datetime.now())
            df2['TODAY_DATE']=df2['TODAY_DATE'].dt.strftime('%Y-%m-%d')
            NEXT_AUDIO_NAME=str(df2['AUDIO_NAME'][0])
            NEXT_AUDIO_TITLE=str(df2['AUDIO_TITLE'][0])
            NEXT_AUDIO_DAY=str(df2['AUDIO_DAY'][0])
            NEXT_NARRATOR=str(df2['NARRATOR_NAME'][0])
            upcoming_date=str(df2['TODAY_DATE'][0])
            NEXT_PROGRAM=str(df2['PROGRAM_NAME'][0])
            AUDIO_LENGTH=str(df2['AUDIO_LENGTH'][0])
            BACKGROUND_IMAGE=str(df2['BACKGROUND_IMAGE'][0])
            dt=DataFrame(list(collection.aggregate([
            {"$match":{"$and":[
        #              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #             {"USER_ID._id" : ObjectId("5f60fe1dc1eb3755730e669c")},
                {'PROGRAM_AUDIO_ID.AUDIO_DAY':""+NEXT_AUDIO_DAY+""},
                 {'PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME':""+NEXT_PROGRAM+""},
        #         
                         {'USER_ID.EMAIL_ID':{'$ne':''}},        
                     {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
            ]}},

               {'$group':{'_id':'$PROGRAM_AUDIO_ID.LANGUAGE','language':{'$addToSet':'$PROGRAM_AUDIO_ID.LANGUAGE'}}},

                {'$project':{'_id':1,'LANGUAGE':'$PROGRAM_AUDIO_ID.language'}}])))


            if len(dt)==1:
                lang1=str(dt['_id'][0])
            #     lang2=str(dt['_id'][1])
                language=lang1
            else:
                lang1=str(dt['_id'][0])
                lang2=str(dt['_id'][1])
            #     print(lang2)
                language=lang1+'/'+lang2

            dtf=DataFrame(list(collection.aggregate([
            {"$match":{"$and":[
#                      {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                 {"USER_ID._id" : ObjectId("5f60fe1dc1eb3755730e669c")},
                {'PROGRAM_AUDIO_ID.AUDIO_NAME':""+NEXT_AUDIO_NAME+""},
        #      
                         {'USER_ID.EMAIL_ID':{'$ne':''}},        
                     {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
            ]}},

           {'$group':{'_id':'$PROGRAM_AUDIO_ID.AUDIO_NAME','playback':{'$sum':1},
                      'AUDIO_ID':{'$first':'$PROGRAM_AUDIO_ID._id'},'IMAGE':{'$first':'$PROGRAM_AUDIO_ID.NARRATOR_ID.NARRATOR_IMAGE'},'AUDIO_NAME':{'$last':'$PROGRAM_AUDIO_ID.AUDIO_NAME'},'AUDIO_LENGHT':{'$last':'$PROGRAM_AUDIO_ID.AUDIO_LENGTH'},'program':{'$last':'$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME'},
                      'practice_date_q1':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}}}},

            {'$project':{'_id':1,'playback':'$playback','IMAGE':'$IMAGE','AUDIO_ID':'$AUDIO_ID'}}])))

            AUDIO_ID=str(dtf['AUDIO_ID'][0])  
            # print(AUDIO_ID)

            collection1=db.audio_feedback
            df2=DataFrame(list(collection1.aggregate([
                {"$match":{"$and":[
            #              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                            {"USER.IS_DISABLED":{"$ne":"Y"}},
                              {"USER.IS_BLOCKED":{"$ne":"Y"}},
                             {"USER.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                            { 'USER.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                            { 'USER.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            #             {"USER_ID._id" : ObjectId("5f60fe1dc1eb3755730e669c")},
                    {'AUDIO_ID.AUDIO_NAME':""+NEXT_AUDIO_NAME+""},
                    {"RATING":{'$ne':0}}, 
                             {'USER.EMAIL_ID':{'$ne':''}},        
                         {'USER.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
                ]}},

               {'$group':{'_id':'$AUDIO_ID.AUDIO_NAME','RATING':{'$avg':'$RATING'}}},

                {'$project':{'_id':1,'RATING':'$RATING'}}])))
            
            if df2.empty is True:
                rating=''

            else:
                rating=str(round(df2['RATING'][0]))


        
            playbacks=str(dtf['playback'][0])
            IMAGE=str(dtf['IMAGE'][0])

           

            collection2=db.favourite_tracks
            df4=DataFrame(list(collection2.aggregate([
                 {"$match":{"$and":[
#                              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
    #             #                
                        {'AUDIO_ID':""+AUDIO_ID+""},
                             { "IS_FAV" : "Y"},

                                 {'USER_ID.EMAIL_ID':{'$ne':''}},        
                             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
                 ]}},

                   {'$group':{'_id':'$AUDIO_ID','likes':{'$sum':1}}},

                    {'$project':{'_id':1,'likes':'$likes'}}])))

            if df4.empty is True:
                    likes='No likes'

            else:
                likes=str(df4['likes'][0])






            data={'NEXT_AUDIO_NAME':NEXT_AUDIO_NAME,'NEXT_AUDIO_TITLE':NEXT_AUDIO_TITLE,'NEXT_AUDIO_DAY':NEXT_AUDIO_DAY,'NEXT_NARRATOR':NEXT_NARRATOR ,'upcoming_date':upcoming_date,'NEXT_PROGRAM' :NEXT_PROGRAM,'AUDIO_LENGTH':AUDIO_LENGTH,'PLAYBACKS':playbacks,'LIKES':likes,'AVG_RATING':rating,'LANGUAGE':language,'IMAGE':IMAGE,'BACKGROUND_IMAGE':BACKGROUND_IMAGE}
    else:


#         schoolid=str(df['schooId'][0])
#         schoolid=str(df['schooId'][0])
        last_prac=df['PREVIOUS_DATE'][0]
        last_audio=df['AUDIO_DAY'][0]
#         print(df)
        dmm=DataFrame(list(collection4.aggregate([
        {"$match":{"$and":[            
             {"USER_ID._id" : ObjectId(""+userid+"")},
        ]}},
        {'$project':{'_id':'$USER_ID._id','IS_PAYMENT_SUCCESS':1,'schooId':'$USER_ID.schoolId._id','expiration':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$SUBSCRIPTION_EXPIRE_DATE'}}},}},
            {'$sort':{'expiration':-1}},
            {'$limit':1}

        ]))).fillna('')
#         if dmm.empty is true:
#             data= {"NEXT_AUDIO_NAME": "Exploring Me-1 Intro to Inner Explorer-Ana.mp3", "NEXT_AUDIO_TITLE": "Intro to Inner Explorer", "NEXT_AUDIO_DAY": "Practice 1", "NEXT_NARRATOR": "Ana Driggs", "upcoming_date": "2021-10-12", "NEXT_PROGRAM": "Exploring Me Pre-k-Kindergarten", "AUDIO_LENGTH": "255.0", "PLAYBACKS": "1802", "LIKES": "15", "AVG_RATING": "5", "LANGUAGE": "English/Spanish", "IMAGE": "Ana.jpg", "BACKGROUND_IMAGE": "https://i6.innerexplorer.org/extra_cards/pexels-sagui-andrea-618833.png"}
#             return json.dumps(data)
#         else:
        payment=str(dmm['IS_PAYMENT_SUCCESS'][0])



        dum=pd.merge(df,dmm,on='_id',how='outer').fillna('')

        today=date.today().strftime('%Y-%m-%d')
        programname=(df['PROGRAM_NAME'][0])
#         print(programname)
        program=str(df['program_id'][0])
        print(program)
        collection_user=db.programs_audio
        user= [


            {'$match':{'$and':[
           {'PROGRAM_ID.PROGRAM_ID':int(""+program+"")},
            {'AUDIO_DAY':{'$not':{'$regex':'Bonus','$options':'i'}}},
            {'AUDIO_DAY':{'$not':{'$regex':'Counselor','$options':'i'}}},
            {'AUDIO_DAY':{'$not':{'$regex':'Sound','$options':'i'}}},
          {'PROGRAM_ID.PROGRAM_NAME':{'$not':{'$regex':'Wellness','$options':'i'}}},
                 {'PROGRAM_ID.PROGRAM_ID':{'$nin':[1,2,3,4,5]}},
            ]}},

             {'$project':
              {
                "_id":0,
                "PROGRAM_AUDIO_ID":"$_id",
                "AUDIO_DAY" : '$AUDIO_DAY',
                "AUDIO_TITLE" : '$AUDIO_TITLE',
                  "AUDIO_NAME":'$AUDIO_NAME',
                   "AUDIO_LENGTH":"$AUDIO_LENGTH",
                  "BACKGROUND_IMAGE1":"$CLASSROOM_IMAGE_URL",

                "PROGRAM_NAME" : "$PROGRAM_ID.PROGRAM_NAME",
                "AGE_GROUP" : "$PROGRAM_ID.AGE_GROUP",
                "NARRATOR_NAME" : "$NARRATOR_ID.NARRATOR_NAME",

        #         "PROG_DATE":'$PROGRAM_ID.CREATED_DATE'
            }},
           {'$sort':{'PROGRAM_AUDIO_ID':1}}
        ]

        update=list(collection_user.aggregate(user))
        df_prac_teacher=pd.DataFrame(update).fillna('')

        if 'NARRATOR_NAME' not in df_prac_teacher.columns:
            df_prac_teacher['NARRATOR_NAME']="No info"
        else:
            df_prac_teacher

        df_prac_teacher['NEXT_AUDIO_NAME'] = (df_prac_teacher['AUDIO_NAME'].shift(-1)).fillna(df_prac_teacher['AUDIO_NAME'].iloc[0])
        df_prac_teacher['NEXT_AUDIO_TITLE'] = (df_prac_teacher['AUDIO_TITLE'].shift(-1)).fillna(df_prac_teacher['AUDIO_TITLE'].iloc[0])
        df_prac_teacher['NEXT_AUDIO_DAY'] = (df_prac_teacher['AUDIO_DAY'].shift(-1)).fillna(df_prac_teacher['AUDIO_DAY'].iloc[0])
        df_prac_teacher['NEXT_PROGRAM'] = (df_prac_teacher['PROGRAM_NAME'].shift(-1)).fillna(df_prac_teacher['PROGRAM_NAME'].iloc[0])
        df_prac_teacher['NEXT_AUDIO_LENGTH'] = (df_prac_teacher['AUDIO_LENGTH'].shift(-1)).fillna(df_prac_teacher['AUDIO_LENGTH'].iloc[0])
        df_prac_teacher['NEXT_NARRATOR'] = (df_prac_teacher['NARRATOR_NAME'].shift(-1)).fillna(df_prac_teacher['NARRATOR_NAME'].iloc[0])
        df_prac_teacher['BACKGROUND_IMAGE'] = (df_prac_teacher['BACKGROUND_IMAGE1'].shift(-1)).fillna(df_prac_teacher['BACKGROUND_IMAGE1'].iloc[0])
        # df['Next Week Close'] = df['Close'].shift(-7)
        df_prac_teacher
        dfff=pd.merge(df,df_prac_teacher,on="AUDIO_NAME",how="left").fillna('')
#         print(dfff)
        if payment=='N' or dum['expiration'][0]<=today:

            df_com=DataFrame(list(collection.aggregate([
                {"$match":{"$and":[
            #              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                              {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            #         {"USER_ID._id" : ObjectId("5f60fe1dc1eb3755730e669c")},
                    {"USER_ID._id" : ObjectId(""+userid+"")} ,
                            {'MODIFIED_DATE':{'$gte':csy_first_date()}}, 
                        {'USER_ID.EMAIL_ID':{'$ne':''}},
                        {'PROGRAM_AUDIO_ID.AUDIO_DAY':{'$not':{'$regex':'Bonus','$options':'i'}}},
                        {'PROGRAM_AUDIO_ID.AUDIO_DAY':{'$not':{'$regex':'Counselor','$options':'i'}}},
                    {'PROGRAM_AUDIO_ID.AUDIO_DAY':{'$not':{'$regex':'Sound','$options':'i'}}},
                    {'PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME':{'$not':{'$regex':'Wellness','$options':'i'}}},
                     {'PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_ID':{'$nin':[1,2,3,4,5]}},

                         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
                ]}},

            {'$group':{'_id':'$PROGRAM_AUDIO_ID.AUDIO_DAY',
                        'IS_DONE':{'$last':'$IS_DONE'},'EVENT':{'$last':'$LAST_EVENT'},'AUDIO_NAME':{'$first':'$PROGRAM_AUDIO_ID.AUDIO_NAME'},'cStart':{'$first':'$cursorStart'},'CEND':{'$last':'$CURSOR_END'},'AUDIO_LENGHT':{'$first':'$PROGRAM_AUDIO_ID.AUDIO_LENGTH'},'program':{'$first':'$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME'},
                        'practice_date_q1':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}}}} ,
                {'$project':{'_id':1,'IS_DONE':'$IS_DONE','EVENT':'$EVENT','PREVIOUS_DATE':'$practice_date_q1','AUDIO_LENGTH':'$AUDIO_LENGHT','PROGRAM_NAME':'$program','AUDIO_NAME':'$AUDIO_NAME','cursorStart':'$cStart','CURSOR_END':'$CEND','diff':{'$sum':{'$subtract':['$CEND','$cStart']}},
                            }},


            ])))
            df_com['percent']=round((df_com['diff']/df_com['AUDIO_LENGTH'])*100)
            df_com=df_com.loc[(df_com['percent']==100)] 
            df_1=df_com[df_com._id.isin(df_prac_teacher.head(10).AUDIO_DAY)]

            if len(df_1)<9:
                df_prac_teacher = df_prac_teacher.head(10)
                df_prac_teacher['NEXT_AUDIO_NAME']=df_prac_teacher['NEXT_AUDIO_NAME'].replace((df_prac_teacher['NEXT_AUDIO_NAME'].iloc[9]),(df_prac_teacher['AUDIO_NAME'].iloc[0]))
                df_prac_teacher['NEXT_AUDIO_TITLE']=df_prac_teacher['NEXT_AUDIO_TITLE'].replace((df_prac_teacher['NEXT_AUDIO_TITLE'].iloc[9]),(df_prac_teacher['AUDIO_TITLE'].iloc[0]))
                df_prac_teacher['NEXT_AUDIO_DAY']=df_prac_teacher['NEXT_AUDIO_DAY'].replace((df_prac_teacher['NEXT_AUDIO_DAY'].iloc[9]),(df_prac_teacher['AUDIO_DAY'].iloc[0]))
                df_prac_teacher['NEXT_PROGRAM']=df_prac_teacher['NEXT_PROGRAM'].replace((df_prac_teacher['NEXT_PROGRAM'].iloc[9]),(df_prac_teacher['PROGRAM_NAME'].iloc[0]))
                df_prac_teacher['NEXT_NARRATOR']=df_prac_teacher['NEXT_NARRATOR'].replace((df_prac_teacher['NEXT_NARRATOR'].iloc[9]),(df_prac_teacher['NARRATOR_NAME'].iloc[0]))
                df_prac_teacher['NEXT_AUDIO_LENGTH']=df_prac_teacher['NEXT_AUDIO_LENGTH'].replace((df_prac_teacher['NEXT_AUDIO_LENGTH'].iloc[9]),(df_prac_teacher['AUDIO_LENGTH'].iloc[0]))
                df_prac_teacher['BACKGROUND_IMAGE']=df_prac_teacher['BACKGROUND_IMAGE'].replace((df_prac_teacher['BACKGROUND_IMAGE'].iloc[9]),(df_prac_teacher['BACKGROUND_IMAGE1'].iloc[0]))

            else:
                df_prac_teacher = df_prac_teacher.head(21)
                df_prac_teacher['NEXT_AUDIO_NAME']=df_prac_teacher['NEXT_AUDIO_NAME'].replace((df_prac_teacher['NEXT_AUDIO_NAME'].iloc[20]),(df_prac_teacher['AUDIO_NAME'].iloc[0]))
                df_prac_teacher['NEXT_AUDIO_TITLE']=df_prac_teacher['NEXT_AUDIO_TITLE'].replace((df_prac_teacher['NEXT_AUDIO_TITLE'].iloc[20]),(df_prac_teacher['AUDIO_TITLE'].iloc[0]))
                df_prac_teacher['NEXT_AUDIO_DAY']=df_prac_teacher['NEXT_AUDIO_DAY'].replace((df_prac_teacher['NEXT_AUDIO_DAY'].iloc[20]),(df_prac_teacher['AUDIO_DAY'].iloc[0]))
                df_prac_teacher['NEXT_PROGRAM']=df_prac_teacher['NEXT_PROGRAM'].replace((df_prac_teacher['NEXT_PROGRAM'].iloc[20]),(df_prac_teacher['PROGRAM_NAME'].iloc[0]))
                df_prac_teacher['NEXT_NARRATOR']=df_prac_teacher['NEXT_NARRATOR'].replace((df_prac_teacher['NEXT_NARRATOR'].iloc[20]),(df_prac_teacher['NARRATOR_NAME'].iloc[0]))
                df_prac_teacher['NEXT_AUDIO_LENGTH']=df_prac_teacher['NEXT_AUDIO_LENGTH'].replace((df_prac_teacher['NEXT_AUDIO_LENGTH'].iloc[20]),(df_prac_teacher['AUDIO_LENGTH'].iloc[0]))
                df_prac_teacher['BACKGROUND_IMAGE']=df_prac_teacher['BACKGROUND_IMAGE'].replace((df_prac_teacher['BACKGROUND_IMAGE'].iloc[20]),(df_prac_teacher['BACKGROUND_IMAGE1'].iloc[0]))

        else:
            dfff

#         dfff=pd.merge(df,df_prac_teacher,on="AUDIO_NAME",how="left")
        dfff['TODAY_DATE']=pd.to_datetime(datetime.now())
#         print(dfff)

        # if dfff[[dfff['PREVIOUS_DATE']==dfff['TODAY_DATE']]:
        #     dfff['next_date'] = dfff[['TODAY_DATE']+timedelta(days=1)]
        mydate=dfff['TODAY_DATE']

        dfff['next_date'] = mydate+timedelta(days=1)
        dfff['next_date']=dfff['next_date'].dt.strftime('%Y-%m-%d')
        dfff['TODAY_DATE']=dfff['TODAY_DATE'].dt.strftime('%Y-%m-%d')

        dfff['upcoming_date']=dfff['TODAY_DATE'].where(dfff['PREVIOUS_DATE']!=dfff['TODAY_DATE'],other=dfff['next_date'])
        finaldf=dfff[['NEXT_AUDIO_NAME','NEXT_AUDIO_TITLE','NEXT_AUDIO_DAY','NEXT_NARRATOR','upcoming_date','NEXT_PROGRAM','NEXT_AUDIO_LENGTH','BACKGROUND_IMAGE']]
        finaldf = finaldf.fillna(0)
#         print("finaldf",finaldf)
        NEXT_AUDIO_NAME=str(finaldf['NEXT_AUDIO_NAME'][0])
        NEXT_AUDIO_TITLE=str(finaldf['NEXT_AUDIO_TITLE'][0])
        NEXT_AUDIO_DAY=str(finaldf['NEXT_AUDIO_DAY'][0])
        NEXT_NARRATOR=str(finaldf['NEXT_NARRATOR'][0])
        upcoming_date=str(finaldf['upcoming_date'][0])
        NEXT_PROGRAM=str(finaldf['NEXT_PROGRAM'][0])
        AUDIO_LENGTH=str(round(finaldf['NEXT_AUDIO_LENGTH'][0]/60))
        BACKGROUND_IMAGE=str(finaldf['BACKGROUND_IMAGE'][0])

        dt=DataFrame(list(collection.aggregate([
        {"$match":{"$and":[
        #              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        #             {"USER_ID._id" : ObjectId("5f60fe1dc1eb3755730e669c")},
            {'PROGRAM_AUDIO_ID.AUDIO_DAY':""+NEXT_AUDIO_DAY+""},
            {'PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME':""+NEXT_PROGRAM+""},
        #    
                         {'USER_ID.EMAIL_ID':{'$ne':''}},        
                     {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
        ]}},

        {'$group':{'_id':'$PROGRAM_AUDIO_ID.LANGUAGE','language':{'$addToSet':'$PROGRAM_AUDIO_ID.LANGUAGE'}}},

            {'$project':{'_id':1,'LANGUAGE':'$PROGRAM_AUDIO_ID.language'}}])))
        
        if dt.empty == True:
            dt = dt.append({'_id': userid, 'LANGUAGE': ""}, ignore_index=True)
#         print("dt",dt)


        if len(dt)==1:
            lang1=str(dt['_id'][0])
        #     lang2=str(dt['_id'][1])
            language=lang1
        else:
            lang1=str(dt['_id'][0])
            lang2=str(dt['_id'][1])
        #     print(lang2)
            language=lang1+'/'+lang2

        dtf=DataFrame(list(collection.aggregate([
        {"$match":{"$and":[
        #              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        #             {"USER_ID._id" : ObjectId("5f60fe1dc1eb3755730e669c")},
            {'PROGRAM_AUDIO_ID.AUDIO_NAME':""+NEXT_AUDIO_NAME+""},

                         {'USER_ID.EMAIL_ID':{'$ne':''}},        
                     {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
        ]}},

        {'$group':{'_id':'$PROGRAM_AUDIO_ID.AUDIO_NAME','playback':{'$sum':1},
                'AUDIO_ID':{'$first':'$PROGRAM_AUDIO_ID._id'},'IMAGE':{'$first':'$PROGRAM_AUDIO_ID.NARRATOR_ID.NARRATOR_IMAGE'},'AUDIO_NAME':{'$last':'$PROGRAM_AUDIO_ID.AUDIO_NAME'},'AUDIO_LENGHT':{'$last':'$PROGRAM_AUDIO_ID.AUDIO_LENGTH'},'program':{'$last':'$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME'},
                'practice_date_q1':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}}}},

        {'$project':{'_id':1,'playback':'$playback','AUDIO_ID':'$AUDIO_ID','IMAGE':'$IMAGE'}}]))).fillna('')
        
        if dtf.empty == True:
            dtf = dtf.append({'_id': userid, 'playback': '','AUDIO_ID':'','IMAGE':''}, ignore_index=True)
        
#         print("dtf",dtf)

        AUDIO_ID=str(dtf['AUDIO_ID'][0])
        dtf=dtf.fillna('')
        #         print(AUDIO_ID)

        collection1=db.audio_feedback
        df2=DataFrame(list(collection1.aggregate([
            {"$match":{"$and":[
        #              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                            {"USER.IS_DISABLED":{"$ne":"Y"}},
                              {"USER.IS_BLOCKED":{"$ne":"Y"}},
                             {"USER.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                            { 'USER.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                            { 'USER.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        #             {"USER_ID._id" : ObjectId("5f60fe1dc1eb3755730e669c")},
                {'AUDIO_ID.AUDIO_NAME':""+NEXT_AUDIO_NAME+""},
                {"RATING":{'$ne':0}}, 
        #                      {'USER.EMAIL_ID':{'$ne':''}},        
                         {'USER.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
            ]}},

        {'$group':{'_id':'$AUDIO_ID.AUDIO_NAME','RATING':{'$avg':'$RATING'}}},

            {'$project':{'_id':1,'RATING':'$RATING'}}])))

        if df2.empty is True:
            rating=''

        else:
            rating=str(round(df2['RATING'][0]))


        
        playbacks=str(dtf['playback'][0])
        IMAGE=str(dtf['IMAGE'][0])
        

        collection2=db.favourite_tracks
        df4=DataFrame(list(collection2.aggregate([
            {"$match":{"$and":[
        #                  {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        #    
                    {'AUDIO_ID':""+AUDIO_ID+""},
                        { "IS_FAV" : "Y"},

                                 {'USER_ID.EMAIL_ID':{'$ne':''}},        
                             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
            ]}},

            {'$group':{'_id':'$AUDIO_ID','likes':{'$sum':1}}},

                {'$project':{'_id':1,'likes':'$likes'}}])))

        if df4.empty is True:
            likes='No likes'

        else:
            likes=str(df4['likes'][0])

        data={'NEXT_AUDIO_NAME':NEXT_AUDIO_NAME,'NEXT_AUDIO_TITLE': NEXT_AUDIO_TITLE,'NEXT_AUDIO_DAY':NEXT_AUDIO_DAY,'NEXT_NARRATOR':NEXT_NARRATOR ,'upcoming_date':upcoming_date,'NEXT_PROGRAM' :NEXT_PROGRAM,'AUDIO_LENGTH':AUDIO_LENGTH,'PLAYBACKS':playbacks,'LIKES':likes,'AVG_RATING':rating,'LANGUAGE':language,'IMAGE':IMAGE,'BACKGROUND_IMAGE':BACKGROUND_IMAGE}

#     
    return json.dumps(data)
#     return dfff

# upcoming_practice('5f623249525cd364f527b576')



# upcoming_practice('5fbae06048bc045ae2b68746')



# ===================
@app.route('/bubbleoverall')
def buble_district():
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.user_master
    qraaa=[
        {"$match":{'$and':[
        {'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" } )}},
        {'DISTRICT_ID':{'$exists':1}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'CREATED_DATE':{"$gte":myDatetime}},
        {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'IS_DISABLED':{"$ne":'Y'}}, {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$DISTRICT_ID._id',"month":{"$month": "$CREATED_DATE"}},
        'NAME_DISTRICT':{'$first':'$DISTRICT_ID.DISTRICT_NAME'},
        'usercount':{'$sum':1}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","MONTH":"$_id.month","NAME_DISTRICT":1,"usercount":1,
                        }}]
    merge11=list(collection.aggregate(qraaa))
    df1=pd.DataFrame(merge11)
    #######################################################
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.user_master
    qra=[
        {"$match":{'$and':[
        {'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" } )}},
        {'DISTRICT_ID':{'$exists':1}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'CREATED_DATE':{"$lt":myDatetime}},
        {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'IS_DISABLED':{"$ne":'Y'}}, {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$DISTRICT_ID._id'},
        'NAME_DISTRICT':{'$first':'$DISTRICT_ID.DISTRICT_NAME'},
        'usercount':{'$sum':1}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"usercount":1,
                        }}]
    merge11233=list(collection.aggregate(qra))
    dfCV=pd.DataFrame(merge11233)
    #########################################################################
    df1=df1.sort_values(by=['NAME_DISTRICT'], ascending=True)
    x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    x["usercount"].sum()
    dislist=list(set(df1["NAME_DISTRICT"]))
    df2=df1[["NAME_DISTRICT","MONTH","usercount"]]
    overall=pd.DataFrame(columns=["NAME_DISTRICT","MONTH","usercount"])
    # dislist
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["NAME_DISTRICT"]==k]
        df45.reset_index()
        for i in range(1,13):
            if i in list(df45["MONTH"]):
                pass
    #              print("month_present",i)
            else:
                df45.loc[i+len(df45)] = [k] +[i]+[0]
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).reset_index()
        df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).sum().groupby(level=0).cumsum().reset_index()
    #     print(df46)
        sorted_df =df46.sort_values(by=['MONTH'], ascending=True)
        sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
    buubleusercount = pd.concat(result)
    ######family ########
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.user_master
    qraaa=[
        {"$match":{'$and':[
        {'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" } )}},
        {'DISTRICT_ID':{'$exists':1}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'CREATED_DATE':{"$gte":myDatetime}},
        {'ROLE_ID._id':{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'IS_DISABLED':{"$ne":'Y'}}, {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$DISTRICT_ID._id',"month":{"$month": "$CREATED_DATE"}},
        'NAME_DISTRICT':{'$first':'$DISTRICT_ID.DISTRICT_NAME'},
        'famcount':{'$sum':1}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","MONTH":"$_id.month","NAME_DISTRICT":1,"famcount":1,
                        }}]
    merge11=list(collection.aggregate(qraaa))
    df1=pd.DataFrame(merge11)
    #######################################################
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.user_master
    qra=[
        {"$match":{'$and':[
        {'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" } )}},
        {'DISTRICT_ID':{'$exists':1}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'CREATED_DATE':{"$lt":myDatetime}},
        {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'IS_DISABLED':{"$ne":'Y'}}, {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$DISTRICT_ID._id'},
        'NAME_DISTRICT':{'$first':'$DISTRICT_ID.DISTRICT_NAME'},
        'usercount19':{'$sum':1}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"usercount19":1,
                        }}]
    merge11233=list(collection.aggregate(qra))
    dfCV=pd.DataFrame(merge11233)
    #########################################################################
    df1=df1.sort_values(by=['NAME_DISTRICT'], ascending=True)
    x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    x["famcount"].sum()
    dislist=list(set(df1["NAME_DISTRICT"]))
    df2=df1[["NAME_DISTRICT","MONTH","famcount"]]
    overall=pd.DataFrame(columns=["NAME_DISTRICT","MONTH","famcount"])
    # dislist
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["NAME_DISTRICT"]==k]
        df45.reset_index()
        for i in range(1,13):
            if i in list(df45["MONTH"]):
                pass
    #              print("month_present",i)
            else:
                df45.loc[i+len(df45)] = [k] +[i]+[0]
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).reset_index()
        df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).sum().groupby(level=0).cumsum().reset_index()
    #     print(df46)
        sorted_df =df46.sort_values(by=['MONTH'], ascending=True)
        sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
    buublefamily = pd.concat(result)
    buubleusercount["idu"]=buubleusercount["NAME_DISTRICT"]+buubleusercount["MONTH"].map(str)
    buublefamily["idf"]=buublefamily["NAME_DISTRICT"]+buublefamily["MONTH"].map(str)
    mergeucfc=pd.merge(buubleusercount, buublefamily, how='left', left_on='idu', right_on='idf')
    mergeucfc=mergeucfc.fillna(0)
    mergeucfc1=pd.merge(mergeucfc, dfCV, how='left', left_on='NAME_DISTRICT_x', right_on='NAME_DISTRICT')
    mergeucfc12=mergeucfc1.fillna(0)
    mergeucfc12["totaluser"]=mergeucfc12["usercount"]+mergeucfc12["usercount19"]
    finmerge=mergeucfc12[["NAME_DISTRICT_x","MONTH_x","idu","totaluser","famcount"]]
    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$gte":myDatetime}},
        {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.DISTRICT_ID._id',"year":{"$year": "$MODIFIED_DATE"},"month":{"$month": "$MODIFIED_DATE"}},
        'NAME_DISTRICT':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'},
        'PRACTICE':{'$sum':1},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},
        'Mindful_Minutes':{"$sum":{"$round":[{"$divide":[{"$subtract":['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","MONTH":"$_id.month","YEAR":"$_id.year","NAME_DISTRICT":1,"PRACTICE":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"},
                       "Mindful_Minutes":1 }}]
    merge121=list(collection.aggregate(qra12))
    df1=pd.DataFrame(merge121)
    df1=df1.sort_values(by=['NAME_DISTRICT'], ascending=True)
    # print(df1)
    # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    dislist=list(set(df1["NAME_DISTRICT"]))
    df2=df1[["NAME_DISTRICT","MONTH","ACTIVE_USER"]]
    overall=pd.DataFrame(columns=["NAME_DISTRICT","MONTH","ACTIVE_USER"])
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["NAME_DISTRICT"]==k]
        df45.reset_index()
        for i in range(1,13):
            if i in list(df45["MONTH"]):
                pass
    #              print("month_present",i)
            else:
                df45.loc[i+len(df45)] = [k] +[i]+[0]
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).reset_index()
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).sum().groupby(level=0).cumsum().reset_index()
    #     print(df46)
        sorted_df =df45.sort_values(by=['MONTH'], ascending=True)
        sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
    buubleactuser = pd.concat(result)
    buubleactuser["acuid"]=buubleactuser["NAME_DISTRICT"]+buubleactuser["MONTH"].map(str)
    # buubleactuser
    finmergeu=pd.merge(finmerge, buubleactuser, how='left', left_on='idu', right_on='acuid')
    ###ACTIVE FAMILY
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$gte":myDatetime}},
        {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.DISTRICT_ID._id',"year":{"$year": "$MODIFIED_DATE"},"month":{"$month": "$MODIFIED_DATE"}},
        'NAME_DISTRICT':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'},
        'PRACTICE':{'$sum':1},
        "ACTIVE_FAM":{'$addToSet':"$USER_ID._id"},
        'Mindful_Minutes':{"$sum":{"$round":[{"$divide":[{"$subtract":['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","MONTH":"$_id.month","YEAR":"$_id.year","NAME_DISTRICT":1,"PRACTICE":1,"ACTIVE_FAM":{"$size":"$ACTIVE_FAM"},
                       "Mindful_Minutes":1 }}]
    merge121=list(collection.aggregate(qra12))
    df1=pd.DataFrame(merge121)
    df1=df1.sort_values(by=['NAME_DISTRICT'], ascending=True)
    # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    dislist=list(set(df1["NAME_DISTRICT"]))
    df2=df1[["NAME_DISTRICT","MONTH","ACTIVE_FAM"]]
    overall=pd.DataFrame(columns=["NAME_DISTRICT","MONTH","ACTIVE_FAM"])
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["NAME_DISTRICT"]==k]
        df45.reset_index()
        for i in range(1,13):
            if i in list(df45["MONTH"]):
                pass
    #              print("month_present",i)
            else:
                df45.loc[i+len(df45)] = [k] +[i]+[0]
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).reset_index()
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).sum().groupby(level=0).cumsum().reset_index()
    #     print(df46)
        sorted_df =df45.sort_values(by=['MONTH'], ascending=True)
        sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
    buubleactfam = pd.concat(result)
    buubleactfam["acuidf"]=buubleactfam["NAME_DISTRICT"]+buubleactfam["MONTH"].map(str)
    finmergeuf=pd.merge(finmergeu, buubleactfam, how='left', left_on='idu', right_on='acuidf')
    finmergeuf["USER ENGAGEMENT"]=round((finmergeuf["ACTIVE_USER"]/finmergeuf["totaluser"])*100)
    finmergeuf["FAMILY ENGAGEMENT"]=round((finmergeuf["ACTIVE_FAM"]/finmergeuf["famcount"])*100)
    finmergeufo=finmergeuf[["NAME_DISTRICT_x","MONTH_x","USER ENGAGEMENT","FAMILY ENGAGEMENT"]]
    finmergeufo=finmergeufo.fillna(0)
    finmergeufo=finmergeufo.loc[:,~finmergeufo.columns.duplicated()]
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    # dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
    #     {'MODIFIED_DATE':{"$gte":myDatetime}},
    #     {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.DISTRICT_ID._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'},
        'PRACTICE':{'$sum':1},
                  }},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"PRACTICE":1 }}]
    merge1211=list(collection.aggregate(qra12))
    df1111=pd.DataFrame(merge1211)
    df1111=df1111.sort_values(by=['NAME_DISTRICT'], ascending=True)
    DISPRACTO=df1111[["NAME_DISTRICT","PRACTICE"]]
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    # dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.user_master
    qra12=[
        {"$match":{'$and':[{'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" } )}},
        {'DISTRICT_ID':{'$exists':1}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
    #     {'MODIFIED_DATE':{"$gte":myDatetime}},
    #     {'ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'IS_DISABLED':{"$ne":'Y'}}, {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$DISTRICT_ID._id'},
        'NAME_DISTRICT':{'$first':'$DISTRICT_ID.DISTRICT_NAME'},
        "SCHOOL COUNT":{'$addToSet':"$schoolId._id"},
                  }},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"SCHOOL COUNT":{"$size":"$SCHOOL COUNT"} }}]
    merge1211=list(collection.aggregate(qra12))
    df1111=pd.DataFrame(merge1211)
    df1111=df1111.sort_values(by=['NAME_DISTRICT'], ascending=True)
    DISSCHOOL=df1111[["NAME_DISTRICT","SCHOOL COUNT"]]
    finmergeufosch=pd.merge(finmergeufo, DISSCHOOL, how='left', left_on='NAME_DISTRICT_x', right_on='NAME_DISTRICT')
    finmergeufoschprac=pd.merge(finmergeufosch, DISPRACTO, how='left', left_on='NAME_DISTRICT_x', right_on='NAME_DISTRICT')
    final_buuble_data=finmergeufoschprac[["NAME_DISTRICT_x","MONTH_x","USER ENGAGEMENT","FAMILY ENGAGEMENT","SCHOOL COUNT","PRACTICE"]]
    finaldata=final_buuble_data.rename(columns={"NAME_DISTRICT_x": "DISTRICT NAME", "MONTH_x": "MONTH"})
    finaldata=finaldata.loc[:,~finaldata.columns.duplicated()]
    finaldata.to_csv("bubblesuper.csv")
    import plotly.express as px
#     import pandas as pd
    df=pd.read_csv("bubblesuper.csv")
    df1=df.fillna(0)
    fig=px.scatter(df1, x="USER ENGAGEMENT", y="FAMILY ENGAGEMENT", animation_frame="MONTH", animation_group="DISTRICT NAME",
               size="PRACTICE", color="SCHOOL COUNT", hover_name="DISTRICT NAME",
    #            log_x = True,
               size_max=40, width=1000, height=700,range_x=[-25,105],range_y=[-25,105])
    fig=fig.update_yaxes(tick0=5, dtick=10)
    fig=fig.update_xaxes(tick0=5, dtick=10)
    fig_json = fig.to_json()
    return (fig_json)

    erge11233=list(collection.aggregate(qra))
    dfCV=pd.DataFrame(merge11233)
    #########################################################################
    df1=df1.sort_values(by=['NAME_DISTRICT'], ascending=True)
    x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    x["famcount"].sum()
    dislist=list(set(df1["NAME_DISTRICT"]))
    df2=df1[["NAME_DISTRICT","MONTH","famcount"]]
    overall=pd.DataFrame(columns=["NAME_DISTRICT","MONTH","famcount"])
    # dislist
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["NAME_DISTRICT"]==k]
        df45.reset_index()
        for i in range(1,13):
            if i in list(df45["MONTH"]):
                pass
    #              print("month_present",i)
            else:
                df45.loc[i+len(df45)] = [k] +[i]+[0]
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).reset_index()
        df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).sum().groupby(level=0).cumsum().reset_index()
    #     print(df46)
        sorted_df =df46.sort_values(by=['MONTH'], ascending=True)
        sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
    buublefamily = pd.concat(result)
    buubleusercount["idu"]=buubleusercount["NAME_DISTRICT"]+buubleusercount["MONTH"].map(str)
    buublefamily["idf"]=buublefamily["NAME_DISTRICT"]+buublefamily["MONTH"].map(str)
    mergeucfc=pd.merge(buubleusercount, buublefamily, how='left', left_on='idu', right_on='idf')
    mergeucfc=mergeucfc.fillna(0)
    mergeucfc1=pd.merge(mergeucfc, dfCV, how='left', left_on='NAME_DISTRICT_x', right_on='NAME_DISTRICT')
    mergeucfc12=mergeucfc1.fillna(0)
    mergeucfc12["totaluser"]=mergeucfc12["usercount"]+mergeucfc12["usercount19"]
    finmerge=mergeucfc12[["NAME_DISTRICT_x","MONTH_x","idu","totaluser","famcount"]]
    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$gte":myDatetime}},
        {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.DISTRICT_ID._id',"year":{"$year": "$MODIFIED_DATE"},"month":{"$month": "$MODIFIED_DATE"}},
        'NAME_DISTRICT':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'},
        'PRACTICE':{'$sum':1},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},
        'Mindful_Minutes':{"$sum":{"$round":[{"$divide":[{"$subtract":['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","MONTH":"$_id.month","YEAR":"$_id.year","NAME_DISTRICT":1,"PRACTICE":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"},
                       "Mindful_Minutes":1 }}]
    merge121=list(collection.aggregate(qra12))
    df1=pd.DataFrame(merge121)
    df1=df1.sort_values(by=['NAME_DISTRICT'], ascending=True)
    # print(df1)
    # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    dislist=list(set(df1["NAME_DISTRICT"]))
    df2=df1[["NAME_DISTRICT","MONTH","ACTIVE_USER"]]
    overall=pd.DataFrame(columns=["NAME_DISTRICT","MONTH","ACTIVE_USER"])
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["NAME_DISTRICT"]==k]
        df45.reset_index()
        for i in range(1,13):
            if i in list(df45["MONTH"]):
                pass
    #              print("month_present",i)
            else:
                df45.loc[i+len(df45)] = [k] +[i]+[0]
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).reset_index()
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).sum().groupby(level=0).cumsum().reset_index()
    #     print(df46)
        sorted_df =df45.sort_values(by=['MONTH'], ascending=True)
        sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
    buubleactuser = pd.concat(result)
    buubleactuser["acuid"]=buubleactuser["NAME_DISTRICT"]+buubleactuser["MONTH"].map(str)
    # buubleactuser
    finmergeu=pd.merge(finmerge, buubleactuser, how='left', left_on='idu', right_on='acuid')
    ###ACTIVE FAMILY
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$gte":myDatetime}},
        {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.DISTRICT_ID._id',"year":{"$year": "$MODIFIED_DATE"},"month":{"$month": "$MODIFIED_DATE"}},
        'NAME_DISTRICT':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'},
        'PRACTICE':{'$sum':1},
        "ACTIVE_FAM":{'$addToSet':"$USER_ID._id"},
        'Mindful_Minutes':{"$sum":{"$round":[{"$divide":[{"$subtract":['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","MONTH":"$_id.month","YEAR":"$_id.year","NAME_DISTRICT":1,"PRACTICE":1,"ACTIVE_FAM":{"$size":"$ACTIVE_FAM"},
                       "Mindful_Minutes":1 }}]
    merge121=list(collection.aggregate(qra12))
    df1=pd.DataFrame(merge121)
    df1=df1.sort_values(by=['NAME_DISTRICT'], ascending=True)
    # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    dislist=list(set(df1["NAME_DISTRICT"]))
    df2=df1[["NAME_DISTRICT","MONTH","ACTIVE_FAM"]]
    overall=pd.DataFrame(columns=["NAME_DISTRICT","MONTH","ACTIVE_FAM"])
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["NAME_DISTRICT"]==k]
        df45.reset_index()
        for i in range(1,13):
            if i in list(df45["MONTH"]):
                pass
    #              print("month_present",i)
            else:
                df45.loc[i+len(df45)] = [k] +[i]+[0]
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).reset_index()
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).sum().groupby(level=0).cumsum().reset_index()
    #     print(df46)
        sorted_df =df45.sort_values(by=['MONTH'], ascending=True)
        sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
    buubleactfam = pd.concat(result)
    buubleactfam["acuidf"]=buubleactfam["NAME_DISTRICT"]+buubleactfam["MONTH"].map(str)
    finmergeuf=pd.merge(finmergeu, buubleactfam, how='left', left_on='idu', right_on='acuidf')
    finmergeuf["USER ENGAGEMENT"]=round((finmergeuf["ACTIVE_USER"]/finmergeuf["totaluser"])*100)
    finmergeuf["FAMILY ENGAGEMENT"]=round((finmergeuf["ACTIVE_FAM"]/finmergeuf["famcount"])*100)
    finmergeufo=finmergeuf[["NAME_DISTRICT_x","MONTH_x","USER ENGAGEMENT","FAMILY ENGAGEMENT"]]
    finmergeufo=finmergeufo.fillna(0)
    finmergeufo=finmergeufo.loc[:,~finmergeufo.columns.duplicated()]
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    # dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
    #     {'MODIFIED_DATE':{"$gte":myDatetime}},
    #     {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.DISTRICT_ID._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'},
        'PRACTICE':{'$sum':1},
                  }},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"PRACTICE":1 }}]
    merge1211=list(collection.aggregate(qra12))
    df1111=pd.DataFrame(merge1211)
    df1111=df1111.sort_values(by=['NAME_DISTRICT'], ascending=True)
    DISPRACTO=df1111[["NAME_DISTRICT","PRACTICE"]]
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    # dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.user_master
    qra12=[
        {"$match":{'$and':[{'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" } )}},
        {'DISTRICT_ID':{'$exists':1}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
    #     {'MODIFIED_DATE':{"$gte":myDatetime}},
    #     {'ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'IS_DISABLED':{"$ne":'Y'}}, {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$DISTRICT_ID._id'},
        'NAME_DISTRICT':{'$first':'$DISTRICT_ID.DISTRICT_NAME'},
        "SCHOOL COUNT":{'$addToSet':"$schoolId._id"},
                  }},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"SCHOOL COUNT":{"$size":"$SCHOOL COUNT"} }}]
    merge1211=list(collection.aggregate(qra12))
    df1111=pd.DataFrame(merge1211)
    df1111=df1111.sort_values(by=['NAME_DISTRICT'], ascending=True)
    DISSCHOOL=df1111[["NAME_DISTRICT","SCHOOL COUNT"]]
    finmergeufosch=pd.merge(finmergeufo, DISSCHOOL, how='left', left_on='NAME_DISTRICT_x', right_on='NAME_DISTRICT')
    finmergeufoschprac=pd.merge(finmergeufosch, DISPRACTO, how='left', left_on='NAME_DISTRICT_x', right_on='NAME_DISTRICT')
    final_buuble_data=finmergeufoschprac[["NAME_DISTRICT_x","MONTH_x","USER ENGAGEMENT","FAMILY ENGAGEMENT","SCHOOL COUNT","PRACTICE"]]
    finaldata=final_buuble_data.rename(columns={"NAME_DISTRICT_x": "DISTRICT_NAME","USER ENGAGEMENT":"USER_ENGAGEMENT","SCHOOL COUNT":"SCHOOL_COUNT", "FAMILY ENGAGEMENT":"FAMILY_ENGAGEMENT","MONTH_x": "MONTH"})
    finaldata=finaldata.loc[:,~finaldata.columns.duplicated()]
    # findict=finaldata.T.to_dict().values()
    # response = make_response(finaldata.to_csv())
    # response.headers['Content-Type'] = 'text/csv'
    li = [finaldata.columns.values.tolist()] + finaldata.values.tolist() 
    sheet = pe.Sheet(li)
    print(sheet,"sheet")
    print(type(sheet),"sheet type")
    ioO = io.StringIO()
    sheet.save_to_memory("csv", ioO)
    output = make_response(ioO.getvalue())
    # output.headers["Content-Disposition"] = "attachment; filename=export.csv"
    output.headers["Content-type"] = "text/csv"
    return output
    # return Response(finaldata.to_csv())
# py2.7, for python3, please use import io

# app = Flask(__name__)
@app.route('/bubble/<disid>/csv')
def schdistrict(disid):  
    disdic={
    '620f3d6132c6d4813f4c9887':'Jackson County Schools',
    "5f2609807a1c0000950bb459":"North Special School District",    
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',
    '5f2609807a1c0000950bb465':'Middleton - Cross Plains Area School District',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '619268dd81f00a4319a65a52':'Access Community',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District(sd71)',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '5f2609807a1c0000950bb450':'Goleta District',
    '5f2609807a1c0000950bb474':'Greenburgh-North Castle (GNC) Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '5f2609807a1c0000950bb45d':'Youngstown'}

    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.user_master
    district=disdic[disid]
    qraaa=[
        {"$match":{'$and':[
        {'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'DISTRICT_ID':{'$exists':1}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'CREATED_DATE':{"$gte":myDatetime}},
        {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'IS_DISABLED':{"$ne":'Y'}}, {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$schoolId._id',"month":{"$month": "$CREATED_DATE"}},
        'NAME_DISTRICT':{'$first':'$schoolId.NAME'},
        'usercount':{'$sum':1}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","MONTH":"$_id.month","NAME_DISTRICT":1,"usercount":1,
                        }}]
    merge11=list(collection.aggregate(qraaa))
    df1=pd.DataFrame(merge11)
    # df1
    #######################################################
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.user_master
    qra=[
        {"$match":{'$and':[
        {'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'DISTRICT_ID':{'$exists':1}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'CREATED_DATE':{"$lt":myDatetime}},
        {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'IS_DISABLED':{"$ne":'Y'}}, {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$schoolId._id'},
        'NAME_DISTRICT':{'$first':'$schoolId.NAME'},
        'usercount':{'$sum':1}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"usercount":1,
                        }}]
    merge11233=list(collection.aggregate(qra))
    dfCV=pd.DataFrame(merge11233)
    if dfCV.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","usercount","DISTRICT_ID"]
        dfCV = pd.DataFrame(data,columns = column_names1)
    # print(dfCV)
    #########################################################################
    df1=df1.sort_values(by=['NAME_DISTRICT'], ascending=True)
    x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    x["usercount"].sum()
    dislist=list(set(df1["NAME_DISTRICT"]))
    df2=df1[["NAME_DISTRICT","MONTH","usercount"]]
    overall=pd.DataFrame(columns=["NAME_DISTRICT","MONTH","usercount"])
    # dislist
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["NAME_DISTRICT"]==k]
        df45.reset_index()
        for i in range(1,13):
            if i in list(df45["MONTH"]):
                pass
    #              print("month_present",i)
            else:
                df45.loc[i+len(df45)] = [k] +[i]+[0]
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).reset_index()
        df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).sum().groupby(level=0).cumsum().reset_index()
    #     print(df46)
        sorted_df =df46.sort_values(by=['MONTH'], ascending=True)
        sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
    buubleusercount = pd.concat(result)
    # buubleusercount
    ######family ########
    # username = urllib.parse.quote_plus('admin')
    # password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    # client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.user_master
    qraaa=[
        {"$match":{'$and':[
        {'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'DISTRICT_ID':{'$exists':1}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'CREATED_DATE':{"$gte":myDatetime}},
        {'ROLE_ID._id':{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'IS_DISABLED':{"$ne":'Y'}}, {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$schoolId._id',"month":{"$month": "$CREATED_DATE"}},
        'NAME_DISTRICT':{'$first':'$schoolId.NAME'},
        'famcount':{'$sum':1}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","MONTH":"$_id.month","NAME_DISTRICT":1,"famcount":1,
                        }}]
    merge11=list(collection.aggregate(qraaa))
    df1=pd.DataFrame(merge11)
    # print(df1)
    #######################################################
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.user_master
    qra=[
        {"$match":{'$and':[
        {'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'DISTRICT_ID':{'$exists':1}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'CREATED_DATE':{"$lt":myDatetime}},
        {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'IS_DISABLED':{"$ne":'Y'}}, {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$schoolId._id'},
        'NAME_DISTRICT':{'$first':'$schoolId.NAME'},
        'usercount19':{'$sum':1}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"usercount19":1,
                        }}]
    merge11233=list(collection.aggregate(qra))
    dfCV=pd.DataFrame(merge11233)
    if dfCV.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","usercount19","DISTRICT_ID"]
        dfCV = pd.DataFrame(data,columns = column_names1)
    # dfCV
    # #########################################################################
    df1=df1.sort_values(by=['NAME_DISTRICT'], ascending=True)
    x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    x["famcount"].sum()
    dislist=list(set(df1["NAME_DISTRICT"]))
    df2=df1[["NAME_DISTRICT","MONTH","famcount"]]
    overall=pd.DataFrame(columns=["NAME_DISTRICT","MONTH","famcount"])
    # dislist
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["NAME_DISTRICT"]==k]
        df45.reset_index()
        for i in range(1,13):
            if i in list(df45["MONTH"]):
                pass
    #              print("month_present",i)
            else:
                df45.loc[i+len(df45)] = [k] +[i]+[0]
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).reset_index()
        df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).sum().groupby(level=0).cumsum().reset_index()
    #     print(df46)
        sorted_df =df46.sort_values(by=['MONTH'], ascending=True)
        sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
    buublefamily = pd.concat(result)
    buubleusercount["idu"]=buubleusercount["NAME_DISTRICT"]+buubleusercount["MONTH"].map(str)
    buublefamily["idf"]=buublefamily["NAME_DISTRICT"]+buublefamily["MONTH"].map(str)
    mergeucfc=pd.merge(buubleusercount, buublefamily, how='left', left_on='idu', right_on='idf')
    mergeucfc=mergeucfc.fillna(0)
    mergeucfc1=pd.merge(mergeucfc, dfCV, how='left', left_on='NAME_DISTRICT_x', right_on='NAME_DISTRICT')
    mergeucfc12=mergeucfc1.fillna(0)
    mergeucfc12["totaluser"]=mergeucfc12["usercount"]+mergeucfc12["usercount19"]
    finmerge=mergeucfc12[["NAME_DISTRICT_x","MONTH_x","idu","totaluser","famcount"]]
    # finmerge
    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$gte":myDatetime}},
        {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id',"month":{"$month": "$MODIFIED_DATE"}},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","MONTH":"$_id.month","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    df1=pd.DataFrame(merge121)
    # print(df1)
    df1=df1.sort_values(by=['NAME_DISTRICT'], ascending=True)
    # df1
    # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    dislist=list(set(df1["NAME_DISTRICT"]))
    df2=df1[["NAME_DISTRICT","MONTH","ACTIVE_USER"]]
    overall=pd.DataFrame(columns=["NAME_DISTRICT","MONTH","ACTIVE_USER"])
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["NAME_DISTRICT"]==k]
        df45.reset_index()
        for i in range(1,13):
            if i in list(df45["MONTH"]):
                pass
    #              print("month_present",i)
            else:
                df45.loc[i+len(df45)] = [k] +[i]+[0]
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).reset_index()
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).sum().groupby(level=0).cumsum().reset_index()
    #     print(df46)
        sorted_df =df45.sort_values(by=['MONTH'], ascending=True)
        sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
    buubleactuser = pd.concat(result)
    buubleactuser["acuid"]=buubleactuser["NAME_DISTRICT"]+buubleactuser["MONTH"].map(str)
    # buubleactuser
    finmergeu=pd.merge(finmerge, buubleactuser, how='left', left_on='idu', right_on='acuid')
    ###ACTIVE FAMILY
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$gte":myDatetime}},
        {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id',"year":{"$year": "$MODIFIED_DATE"},"month":{"$month": "$MODIFIED_DATE"}},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        'PRACTICE':{'$sum':1},
        "ACTIVE_FAM":{'$addToSet':"$USER_ID._id"},
        'Mindful_Minutes':{"$sum":{"$round":[{"$divide":[{"$subtract":['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","MONTH":"$_id.month","YEAR":"$_id.year","NAME_DISTRICT":1,"PRACTICE":1,"ACTIVE_FAM":{"$size":"$ACTIVE_FAM"},
                       "Mindful_Minutes":1 }}]
    merge121=list(collection.aggregate(qra12))
    df1=pd.DataFrame(merge121)
    df1=pd.DataFrame(merge121)
    if df1.empty == True:
            data = [[district,0,0,0,disid,0,0]]
            column_names1 = ["NAME_DISTRICT","PRACTICE","ACTIVE_FAM","YEAR","DISTRICT_ID","MONTH","Mindful_Minutes"]
            df1 = pd.DataFrame(data,columns = column_names1)
    df1=df1.sort_values(by=['NAME_DISTRICT'], ascending=True)

    # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    dislist=list(set(df1["NAME_DISTRICT"]))
    df2=df1[["NAME_DISTRICT","MONTH","ACTIVE_FAM"]]
    overall=pd.DataFrame(columns=["NAME_DISTRICT","MONTH","ACTIVE_FAM"])
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["NAME_DISTRICT"]==k]
        df45.reset_index()
        for i in range(1,13):
            if i in list(df45["MONTH"]):
                pass
    #              print("month_present",i)
            else:
                df45.loc[i+len(df45)] = [k] +[i]+[0]
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).reset_index()
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).sum().groupby(level=0).cumsum().reset_index()
    #     print(df46)
        sorted_df =df45.sort_values(by=['MONTH'], ascending=True)
        sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
    buubleactfam = pd.concat(result)
    buubleactfam["acuidf"]=buubleactfam["NAME_DISTRICT"]+buubleactfam["MONTH"].map(str)
    finmergeuf=pd.merge(finmergeu, buubleactfam, how='left', left_on='idu', right_on='acuidf')
    finmergeuf["USER ENGAGEMENT"]=round((finmergeuf["ACTIVE_USER"]/finmergeuf["totaluser"])*100)
    finmergeuf["FAMILY ENGAGEMENT"]=round((finmergeuf["ACTIVE_FAM"]/finmergeuf["famcount"])*100)
    finmergeufo=finmergeuf[["NAME_DISTRICT_x","MONTH_x","USER ENGAGEMENT","FAMILY ENGAGEMENT"]]
    finmergeufo=finmergeufo.fillna(0)
    finmergeufo=finmergeufo.loc[:,~finmergeufo.columns.duplicated()]
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    # dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
    #     {'MODIFIED_DATE':{"$gte":myDatetime}},
    #     {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        'PRACTICE':{'$sum':1},
                  }},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"PRACTICE":1 }}]
    merge1211=list(collection.aggregate(qra12))
    df1111=pd.DataFrame(merge1211)
    # print("check1")
    df1111=df1111.sort_values(by=['NAME_DISTRICT'], ascending=True)
    DISPRACTO=df1111[["NAME_DISTRICT","PRACTICE"]]
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    # dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.user_master
    qra12=[
        {"$match":{'$and':[{'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'DISTRICT_ID':{'$exists':1}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
    #     {'MODIFIED_DATE':{"$gte":myDatetime}},
    #     {'ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'IS_DISABLED':{"$ne":'Y'}}, {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$schoolId._id'},
        'NAME_DISTRICT':{'$first':'$schoolId.NAME'},
        "USER COUNT":{'$addToSet':"$_id"},
                  }},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"USER COUNT":{"$size":"$USER COUNT"} }}]
    merge1211=list(collection.aggregate(qra12))
    df1111=pd.DataFrame(merge1211)
    df1111=df1111.sort_values(by=['NAME_DISTRICT'], ascending=True)
    DISSCHOOL=df1111[["NAME_DISTRICT","USER COUNT"]]
    finmergeufosch=pd.merge(finmergeufo, DISSCHOOL, how='left', left_on='NAME_DISTRICT_x', right_on='NAME_DISTRICT')
    finmergeufoschprac=pd.merge(finmergeufosch, DISPRACTO, how='left', left_on='NAME_DISTRICT_x', right_on='NAME_DISTRICT')
    finmergeufoschprac=finmergeufoschprac.fillna(0)
    final_buuble_data=finmergeufoschprac[["NAME_DISTRICT_x","MONTH_x","USER ENGAGEMENT","FAMILY ENGAGEMENT","USER COUNT","PRACTICE"]]
    finaldata=final_buuble_data.rename(columns={"NAME_DISTRICT_x": "DISTRICT_NAME","USER ENGAGEMENT":"USER_ENGAGEMENT","USER COUNT":"USER_COUNT", "FAMILY ENGAGEMENT":"FAMILY_ENGAGEMENT","MONTH_x": "MONTH"})
    finaldata=finaldata.loc[:,~finaldata.columns.duplicated()]
    li = [finaldata.columns.values.tolist()] + finaldata.values.tolist() 
    sheet = pe.Sheet(li)
    print(sheet,"sheet")
    print(type(sheet),"sheet type")
    ioO = io.StringIO()
    sheet.save_to_memory("csv", ioO)
    output = make_response(ioO.getvalue())
    # output.headers["Content-Disposition"] = "attachment; filename=export.csv"
    output.headers["Content-type"] = "text/csv"
    return output







# ==========================

# ========================UWBA==============
@app.route('/uwbaheatmappractices/')

def UWBA_heatmap_prac():

    import collections
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    collection2=db.user_master

    df=DataFrame(list(collection2.aggregate([{"$match":
             {'$and': [
                

                    {"IS_DISABLED":{"$ne":"Y"}},
                      {"IS_BLOCKED":{"$ne":"Y"}},
                     {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                    { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                     {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':'UWBA', '$options':'i'}})}},

                    {'schoolId._id':{'$ne':None}},
                     {'EMAIL_ID':{'$ne':''}},

                     {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                               {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

                {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$schoolId._id'}}},
                      {'$project':{'_id':1,'schools':'$ID'}},

                      ])))

    ids=list(df['_id'])
    
    
    df3=DataFrame(list(collection.aggregate([
{"$match":
    {'$and': [

         
        {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
{'USER_ID.schoolId._id':{'$in':ids}},


 {'MODIFIED_DATE':{'$gte':datetime.datetime(2021,1,1)}},]}},


        {'$group':{'_id':'$USER_ID.schoolId._id','uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
              {'$project':{'_id':1,'active_user_count':{'$size':'$uc'},'name':'$NAME','practice_count':'$pc'}},
    { '$sort' : { 'active_user_count' : -1} },
    {'$limit':30}])))
    top=list(df3['_id'])
#     print(df3)
#     df3.to_csv('file1.csv')
    df2=DataFrame(list(collection.aggregate([
    {"$match":
        {'$and': [
            
#              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
    {'USER_ID.schoolId._id':{'$in':top}},
    # {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
  
     {'MODIFIED_DATE':{'$gte':datetime.datetime(2021,1,1)}},]}},


            {'$group':{'_id':{'school':'$USER_ID.schoolId._id','month':{'$month':'$MODIFIED_DATE'}},'uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
                  {'$project':{'_id':0,'school':'$_id.school','month':'$_id.month','active_user_count':{'$size':'$uc'},'name':'$NAME','practice_count':'$pc'}},
        { '$sort' : { 'name' : 1,'month'  :1} },


    # //               {'$count':'count'}
                  ])))
    # df2

    df1=df2
    df1=df1.sort_values(by=['name'], ascending=True)
    # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    dislist=list(set(df1["name"]))
    # print(len(dislist))
    df2=df1[["name","month","active_user_count","practice_count"]]
    # print(df2)
    overall=pd.DataFrame(columns=["name","month","active_user_count","practice_count"])
    # overall
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["name"]==k]
        df45.reset_index()
    #     print(df45)
        for i in range(1,13):
            if i in list(df45["month"]):
                pass
            else:
                a=max(list(df45.index))
                df45.loc[a+i] = [k] +[i]+[0]+[0]
  
        sorted_df =df45.sort_values(by=['month'], ascending=True)
    #     sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
        finaldf = pd.concat(result)
    #     finaldf=finaldf.sort_values(by=['name'])


    data={}
    for i in dislist:


        schoolname= finaldf[(finaldf.name ==i)].reset_index(drop = True)
        active_user_count = schoolname['active_user_count'].tolist()
        practice_count = schoolname['practice_count'].tolist()


        data[i] =practice_count
    data=collections.OrderedDict(sorted(data.items()))
    data={'meanTemp':data}

    
    return json.dumps(data)    

@app.route('/uwba_schoolwisefamilypracticecount_/')
def UWBA_schppcfamily():

    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass  
    collection = db.audio_track_master
    collection1 = db.user_master
#     district=disdic[districtid]
    df1 = DataFrame(list(collection.aggregate([
    {"$match":
         {'$and': [
              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                {'USER_ID.schoolId._id':{'$ne':None}},
                      {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':'UWBA', '$options':'i'}})}},
    # //               {'IS_ADMIN':'Y'},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#               {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#                  {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},

    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$USER_ID.schoolId._id','pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
                  {'$project':{'_id':1,'practice_count':'$pc'}},
            { '$sort' : { 'practice_count' : -1}}
    # //               {'$count':'count'}
                  ])))
    df2=DataFrame(list(collection1.aggregate([{"$match":
     {'$and': [
           {'ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
            {"IS_DISABLED":{"$ne":"Y"}},
              {"IS_BLOCKED":{"$ne":"Y"}},
             {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #                  {'_id':{'$in':user}},
    # //               {'IS_ADMIN':'Y'},

             {'EMAIL_ID':{'$ne':''}},
             {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
         {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                       {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

        {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$schoolId._id'},'name':{'$first':'$schoolId.NAME'},'user_name':{'$first':'$USER_NAME'}
                  }},


        {'$project':{'_id':1,'name':1}},])))

    df=pd.merge(df1,df2, how='left', on='_id')
    
    if df.empty == True:
        
        schname=[]
        pc=[]
      
    else:
        schname=df['name'].tolist()
        pc=df['practice_count'].tolist()
    data={'schname':schname[0:20],'Familypracticecount':pc[0:20]}
    
    return json.dumps(data)

@app.route('/uwba_schoolwisefamilycount_/')
def uwba__schpuc():
   
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection= db.user_master
#     district=disdic[districtid]
    df = DataFrame(list(collection.aggregate([
    {"$match":
         {'$and': [
             {'ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //               {'IS_ADMIN':'Y'},
#                 {'IS_PORTAL':'Y'},
                      {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':'UWBA', '$options':'i'}})}},
                 {'EMAIL_ID':{'$ne':''}},
#                    {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#                  {'DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$_id'},'NAME':{'$first':'$schoolId.NAME'},'district':{'$first':'$DISTRICT_ID.DISTRICT_NAME'}}},
                  {'$project':{'_id':1,'user_count':{'$size':'$ID'},'name':'$NAME','district':'$district'}},
                   { '$sort' : { 'user_count' : -1}}
    # //               {'$count':'count'}
                  ])))

    # df['SCH_CREATED_DATE']=pd.to_datetime(df['SCH_CREATED_DATE'])

#     df=df.nlargest(20,'user_count')
#     df= df.groupby(df['district'])
#     df= df.get_group(''+district+'')


    if df.empty == True:
        
        schname=[]
        uc=[]
      
    else:
        schname=df['name'].tolist()
        uc=df['user_count'].tolist()
    
    

    data={'schname':schname[0:20],'Familycount':uc[0:20]}
    
    return json.dumps(data)


@app.route('/uwba_schoolwisepracticecounttop20_/')
def uwbachwisepc():
    
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    collection1 = db.user_master
#     district=disdic[districtid]
    df1 = DataFrame(list(collection.aggregate([
    {"$match":
         {'$and': [
              {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                {'USER_ID.schoolId._id':{'$ne':None}},
                      {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':'UWBA', '$options':'i'}})}},
    # //               {'IS_ADMIN':'Y'},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#               {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#                  {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},

    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$USER_ID.schoolId._id','pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
                  {'$project':{'_id':1,'practice_count':'$pc'}},
            { '$sort' : { 'practice_count' : -1}}
    # //               {'$count':'count'}
                  ])))
    df2=DataFrame(list(collection1.aggregate([{"$match":
     {'$and': [
           {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"IS_DISABLED":{"$ne":"Y"}},
              {"IS_BLOCKED":{"$ne":"Y"}},
             {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #                  {'_id':{'$in':user}},
    # //               {'IS_ADMIN':'Y'},

             {'EMAIL_ID':{'$ne':''}},
             {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
         {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                       {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

        {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$schoolId._id'},'name':{'$first':'$schoolId.NAME'},'user_name':{'$first':'$USER_NAME'}
                  }},


        {'$project':{'_id':1,'name':1}},])))

    df=pd.merge(df1,df2, how='left', on='_id')
#     print(df)
    if df.empty == True:
        
        schname=[]
        pc=[]
      
    else:
        schname=df['name'].tolist()
        pc=df['practice_count'].tolist()
    data={'schname':schname[0:20],'Familypracticecount':pc[0:20]}
    
    return json.dumps(data)

@app.route('/uwba_top20userspractisinginfo_/')
def uwba__topusers_practice():
    
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
#     district=disdic[districtid]


    collection1 = db.user_master
    df1 = DataFrame(list(collection.aggregate([
    {"$match":
    {'$and': [
    #           {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
              {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            {'USER_ID.schoolId._id':{'$ne':None}},
    # //               {'IS_ADMIN':'Y'},
    # //             {'USER_ID.IS_PORTAL':'Y'},
             {'USER_ID.EMAIL_ID':{'$ne':''}},
             {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':'UWBA', '$options':'i'}})}},

             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
         {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
        {'$group':{'_id':'$USER_ID._id','pc':{'$sum':1}}},
              {'$project':{'_id':1,'practice_count':'$pc'}},
    { '$sort' : { 'practice_count' : -1} }



    # //               {'$count':'count'}
              ])))
    df1

    df2=DataFrame(list(collection1.aggregate([{"$match":
     {'$and': [
    #         {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"IS_DISABLED":{"$ne":"Y"}},
              {"IS_BLOCKED":{"$ne":"Y"}},
             {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #                  {'_id':{'$in':user}},
    # //               {'IS_ADMIN':'Y'},

             {'EMAIL_ID':{'$ne':''}},
             {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
         {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                       {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

        {'$group':{'_id':'$_id','ID':{'$addToSet':'$_id'},'school_name':{'$first':'$schoolId.NAME'},'user_name':{'$first':'$USER_NAME'}
                  }},


        {'$project':{'_id':1,'user_name':1,'school_name':1}},])))

    df=pd.merge(df1,df2, how='left', on='_id')
    df
    if df.empty == True:

        schname=[]
        pc=[]

    else:
        df["users"] = df["user_name"] +','+' ' + df["school_name"]
        schname=df['users'].tolist()
        pc=df['practice_count'].tolist()



    #     data=[]    
    #     for i,k in zip(schname,uc):

    #         data.append([i,k])

    #     for i in range(len(schname)):
    #             schname[i] = schname[i]
    data={'schname':schname[0:20],'practicecount':pc[0:20]}

    return json.dumps(data)

@app.route('/uwba_schoolwiseusercounttop20_/')
def uwba__schwiseuc():
   
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass  
    collection = db.user_master
#     district=disdic[districtid]
    df = DataFrame(list(collection.aggregate([
    {"$match":
         {'$and': [
             {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //               {'IS_ADMIN':'Y'},
#                 {'IS_PORTAL':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
                      {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':'UWBA', '$options':'i'}})}},
#                    {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#                  {'DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$_id'},'NAME':{'$first':'$schoolId.NAME'},'district':{'$first':'$DISTRICT_ID.DISTRICT_NAME'}}},
                  {'$project':{'_id':1,'user_count':{'$size':'$ID'},'name':'$NAME','district':'$district'}},
                   { '$sort' : { 'user_count' : -1}}
    # //               {'$count':'count'}
                  ])))

    # df['SCH_CREATED_DATE']=pd.to_datetime(df['SCH_CREATED_DATE'])

#     df=df.nlargest(20,'user_count')
#     df= df.groupby(df['district'])
#     df= df.get_group(''+district+'')

    if df.empty == True:
        
        schname=[]
        pc=[]
      
    else:
        schname=df['name'].tolist()
        uc=df['user_count'].tolist()
   
    data={'schname':schname[0:20],'usercount':uc[0:20]}
    
    return json.dumps(data)

@app.route('/monthwisepracticeuwba')
def uwba__monthwisepc():
    
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
#     district=disdic[districtid]
    df = DataFrame(list(collection.aggregate([
    {"$match":
    {'$and': [
    #           {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.schoolId._id':{'$ne':None}},
    # //               {'IS_ADMIN':'Y'},
    # //             {'USER_ID.IS_PORTAL':'Y'},
         {'USER_ID.EMAIL_ID':{'$ne':''}},
                 {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':'UWBA', '$options':'i'}})}},
#                {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
         {'MODIFIED_DATE':{'$gte':datetime.datetime(2020,8,1)}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
    {'$group':{'_id':{'$month':'$MODIFIED_DATE'},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
          {'$project':{'_id':1,'practice_count':'$pc'}},
    { '$sort' : { '_id' : 1} }
              ])))


    df.rename(columns = { '_id': 'Month'}, inplace = True)

    data = [['Aug', 8], ['Sep', 9], ['Oct', 10],['Nov', 11], ['Dec', 12], ['Jan', 1],['Feb', 2], ['Mar', 3], ['Apr', 4],['May', 5], ['Jun', 6], ['Jul', 7]] 


# Create the pandas DataFrame 
    df1 = pd.DataFrame(data, columns = ['Monthname', 'Month']) 

    DF=pd.merge(df1,df, on='Month',how='left')
    DF=DF.fillna(0)

#         d = dict(enumerate(calendar.month_abbr))    # to convert monthnumber of dataframe into monthname

#         try:
#             df['Month'] = df['Month'].map(d)
#         except:
#             pass

#         if df.empty == True:
#             Month=['Aug','Sep','Oct','Nov','Dec','Jan','Feb','Mar','Apr','May','Jun','Jul',]

#             pc=[0,0,0,0,0,0,0,0,0,0,0,0]
#         else:
    Month=DF['Monthname'].tolist()

    pc=DF['practice_count'].tolist()


    data={'monthname':Month,'practice_count':pc}
    return json.dumps(data)



@app.route('/uwbapartnercardsinfo_/')
def uwba_count_cards():
    from datetime import datetime
    from datetime import timedelta
    
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection1 = db.user_master
    collection2=db.audio_track_master
    collection3=db.login_logs
#     district=disdic[districtid]
#     print(district)
    df1 = DataFrame(list(collection1.aggregate([
     {"$match":
         {'$and': [
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                  {'IS_PORTAL':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
#                  {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
             {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':'UWBA', '$options':'i'}})}},
    #              {'DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','ID':{'$addToSet':'$schoolId._id'},'dn':{'$first':'$DISTRICT_ID.DISTRICT_NAME'}}},
                  {'$project':{'_id':1,'school_count':{'$size':'$ID'},'district':'$dn'}}
                  ])))
    df2 = DataFrame(list(collection1.aggregate([ {"$match":
         {'$and': [
              {'ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2a")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                  {'IS_PORTAL':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
                {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':'UWBA', '$options':'i'}})}},
#                  {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','ID':{'$addToSet':'$_id'}}},
                  {'$project':{'_id':1,'teacher_count':{'$size':'$ID'}}}
                  ])))
    df5 = DataFrame(list(collection1.aggregate([ {"$match":
         {'$and': [
              {'ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                  {'IS_PORTAL':'Y'},
                  {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':'UWBA', '$options':'i'}})}},
                 {'EMAIL_ID':{'$ne':''}},
#                  {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','ID':{'$addToSet':'$_id'}}},
                  {'$project':{'_id':1,'family_count':{'$size':'$ID'}}}
                  ])))
    today1= datetime.utcnow()
    tod1= today1+ timedelta(hours=4)
    start1= tod1-timedelta(days=30)
    df3=DataFrame(list(collection2.aggregate([
     {"$match":
         {'$and': [
    # //          {'ROLE_ID._id' :{'$':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':'UWBA', '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
                 {'MODIFIED_DATE':{'$gte':datetime(2020,8,1)}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','pc':{'$sum':1},'MINDFUL_MINUTES':{'$sum':{'$round':[{'$divide':[{'$subtract':['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
                  {'$project':{'_id':1,'practice_sessions':'$pc','MINDFUL_MINUTES':'$MINDFUL_MINUTES'}}])))
   

    df4=DataFrame(list(collection3.aggregate([{"$match":
         {'$and': [
    #           {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                {'USER_ID.schoolId._id':{'$ne':None}},
    # //               {'IS_ADMIN':'Y'},
                  {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':'UWBA', '$options':'i'}})}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
                 {'LAST_LOGGED_IN':{'$gte':start1}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','pc':{'$sum':1}}},
                  {'$project':{'_id':1,'logins':'$pc'}}])))
    df6=DataFrame(list(collection2.aggregate([
     {"$match":
         {'$and': [
             {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':'UWBA', '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
                 {'MODIFIED_DATE':{'$gte':datetime(2020,8,1)}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','pc':{'$sum':1},'MINDFUL_MINUTES':{'$sum':{'$round':[{'$divide':[{'$subtract':['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
                  {'$project':{'_id':1,'practice_sessions_t':'$pc'}}])))
   
    df7=DataFrame(list(collection2.aggregate([
     {"$match":
         {'$and': [
             {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':'UWBA', '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
                 {'MODIFIED_DATE':{'$gte':datetime(2020,8,1)}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','pc':{'$sum':1},'MINDFUL_MINUTES':{'$sum':{'$round':[{'$divide':[{'$subtract':['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
                  {'$project':{'_id':1,'practice_sessions_p':'$pc'}}])))
   

    sc=[0]
    try:
        sc=df1['school_count']
    except:
        sc=[0]
        
    tc=[0]
    try:
        tc=df2['teacher_count']
    except:
        tc=[0]
    
    pct=[0]
    try:
        pct=df6['practice_sessions_t']
    except:
        pct=[0]
    pcp=[0]
    try:
        pcp=df7['practice_sessions_p']
    except:
        pcp=[0]
    mm=[0]
    try:
        mm=df3['MINDFUL_MINUTES']
    except:
        mm=[0]
    
    lc=[0]
    try:
        lc=df4['logins']
    except:
        lc=[0]
        
    fc=[0]
    try:
        fc=df5['family_count']
    except:
        fc=[0]
    
    
    
    
    dn=[0]
    try:
        dn=df1['district']
    except:
        dn=[0]
    
    
#     print(lc)
    
    data={"schoolcount":str(sc[0]),"teachercount":str(tc[0]),"familycount":str(fc[0]),"teacherpracticecount":str(pct[0]),"parentspracticecount":str(pcp[0]),"logincount":str(lc[0]),
          'MINDFUL_MINUTES':str(mm[0]),'district':'UWBA Works'}
    return json.dumps(data)







# =======================


@app.route('/portal_newd2_test_api/<smcategory>')
def portal_newd2_test_api(smcategory):   
    from flask import request
    username123 = request.args.get('name')
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    collection = db.school_master
    print(smcategory,"uadhauisdhaiusdasu") 
    from bson.objectid import ObjectId
    smcategory1=smcategory.replace("%20"," ")
    
    import re
    smcategory12=smcategory1.replace("?"," hello ")

    smc=re.split(" hello ", smcategory12)
    smcategory=smc[0]
    print(smcategory,"school name")
    print(smc,"list")
    newd=username123
    print(newd,"hola")
    query=[{'$match':{'$and':[
    { 'CATEGORY':{"$regex":""+smcategory+"",'$options':'i'}},
    { 'NAME':{"$regex":""+newd+"",'$options':'i'}},
    
    ]
    }},
    {"$project":{"_id":0,
    "UMSCHOOLID":'$_id',
    "UMSCHOOLNAME":'$NAME',
    "is_paid":"$FULL_EXPERIENCE",
                }},
    ]
    merge11=list(collection.aggregate(query))

    overallum11=pd.DataFrame(merge11)
    collection = db.district_master
    queryt=[{'$match':{'$and':[
    { 'DISTRICT_NAME':{"$regex":""+smcategory+"",'$options':'i'}},]
    }},
    {"$project":{"_id":0,
    "to_school":'$TOTAL_SCHOOLS',
    
                }},
    ]
    merget=list(collection.aggregate(queryt))

    overallumt=pd.DataFrame(merget)
    discount=0
    try:
        discount=overallumt["to_school"][0]
    except:
        discount=0
#     print(overallum11,"helloooooooooooo1achsdkjcbsdkjcbsdku")
    # print(len(set(list(overallum11["UMSCHOOLID"]))),"school_count")
    lifetimelist=list(set(overallum11["UMSCHOOLID"]))
    total_school=len(lifetimelist)
    collection = db.user_master
    query=[{'$match':{'$and':[{
    "schoolId._id": {
    "$in":lifetimelist
    }   
    },
    { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
    {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
    {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
    {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
    {'IS_DISABLED':{"$ne":'Y'}},
    {'IS_BLOCKED':{"$ne":'Y'}},
    {'schoolId.BLOCKED_BY_CAP':{'$exists':0}},
    ]
    }},
    {"$project":{"_id":0,
    'ROLE':'$ROLE_ID.ROLE_NAME',
    'UMUSER_ID':'$_id',"USER_NAME":'$USER_NAME',
    "UMSCHOOLID":'$schoolId._id',
    "DISTRICT_NAME":"$DISTRICT_ID.DISTRICT_NAME",
                 "UMSCHOOLNAME":'$schoolId.NAME',
                }},
    ]
    merge1=list(collection.aggregate(query))
    overallum=pd.DataFrame(merge1)
#     print(overallum,"overallum")
    email=""
    schoolid=[]
    try:
        email=list(overallum["UMUSER_ID"])
        schoolid=list(overallum["UMSCHOOLID"])
    except:
        pass
    ################################sub_master################################
    collection = db.subscription_master
    qr=[
    {"$match":{"$and":[{'USER_ID._id':{"$in":email}},]}},
    {"$project":{"_id":0,
    'SMUSER_ID':'$USER_ID._id',
    "RENEWAL_DATE":"$SUBSCRIPTION_EXPIRE_DATE",
    }},]
    merge=[]
    overall=[]
    mergeddf=[]
    try:
        merge=list(collection.aggregate(qr))
        overall=pd.DataFrame(merge)
        mergeddf=pd.merge(overallum, overall, how='left', left_on='UMUSER_ID', right_on='SMUSER_ID')
    except:
        pass
    db=client.compass
    collection = db.audio_track_master
    qra=[
    {"$match":{'$and':[
        {'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
    {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
    {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
    {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
    {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
    {'USER_ID.schoolId._id':{'$in':schoolid}},
    ]}},
    {'$group':{'_id':'$USER_ID.schoolId._id', 
    'atdLastpractice':{'$max':'$MODIFIED_DATE'},
    'atdPracticecount':{'$sum':1},
    'atdTotal_Mindful_Minutes':{"$sum":{"$round":[{"$divide":[{"$subtract":['$CURSOR_END','$cursorStart']}, 60]},0]}}}}]
    merge110=[]
    atd=[]
    mmm=0
    try:
        merge110=list(collection.aggregate(qra))
        atd=pd.DataFrame(merge110)
        mmm=str(round(sum(atd["atdTotal_Mindful_Minutes"])))
        finalmerge=pd.merge(mergeddf, atd, how='left', left_on='UMSCHOOLID', right_on='_id')
        finaldata=finalmerge[["DISTRICT_NAME","UMSCHOOLID","UMSCHOOLNAME","UMUSER_ID","ROLE","atdLastpractice","RENEWAL_DATE","atdPracticecount"]]
        finaldata["atdPracticecount"] = finaldata['atdPracticecount'].fillna(0)
        finaldata["atdPracticecount"] = finaldata['atdPracticecount'].astype('int')
        finaldata["atdPracticecount"] = finaldata['atdPracticecount'].astype('str')
    except:
        pass
#     print(finaldata)
    usercount=0
    try:
        usercount=len(finaldata[finaldata["ROLE"]=='user'])
    except:
        pass
    familycount=0
    try:
        familycount=len(finaldata[finaldata["ROLE"]=='PRESENT'])
    except:
        pass

    data2=[]
    totschnew=0
    try:
        totschnew=len(overallum11[overallum11["is_paid"]=="Y"])
        
    except:
        pass
    try:
        overallum11["is_paid"].fillna("N",inplace=True)
    except:
        overallum11["is_paid"]="N"
    overallum11["UMSCHOOLID"] = overallum11["UMSCHOOLID"].astype('str')
    overallum11=overallum11.sort_values(by=['UMSCHOOLNAME'], ascending=True)
    overallum11=overallum11.reset_index()
    
    
    # print(overallum11)
    for i in range(len(overallum11)):
        data2.append({"school_id":overallum11["UMSCHOOLID"][i],"school_name":overallum11["UMSCHOOLNAME"][i],"is_paid":overallum11["is_paid"][i]})
    finaldata={"data":data2,"total_school_district":discount,"total_school":totschnew,"user_count":usercount,"family_count":familycount,"mindful_minutes":mmm}
    return json.dumps(finaldata)


@app.route('/portal_newd2_api/<smcategory>')
def portal_newd2_api(smcategory):   
    from flask import request
    username123 = request.args.get('name')
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    collection = db.school_master
    print(smcategory,"uadhauisdhaiusdasu") 
    from bson.objectid import ObjectId
    smcategory1=smcategory.replace("%20"," ")
    
    import re
    smcategory12=smcategory1.replace("?"," hello ")

    smc=re.split(" hello ", smcategory12)
    smcategory=smc[0]
    print(smcategory,"school name")
    print(smc,"list")
    newd=username123
    print(newd,"hola")
    query=[{'$match':{'$and':[
    { 'CATEGORY':{"$regex":""+smcategory+"",'$options':'i'}},
    { 'NAME':{"$regex":""+newd+"",'$options':'i'}},
    
    ]
    }},
    {"$project":{"_id":0,
    "UMSCHOOLID":'$_id',
    "UMSCHOOLNAME":'$NAME',
    "is_paid":"$FULL_EXPERIENCE",
                }},
    ]
    merge11=list(collection.aggregate(query))

    overallum11=pd.DataFrame(merge11)
    collection = db.district_master
    queryt=[{'$match':{'$and':[
    { 'DISTRICT_NAME':{"$regex":""+smcategory+"",'$options':'i'}},]
    }},
    {"$project":{"_id":0,
    "to_school":'$TOTAL_SCHOOLS',
    
                }},
    ]
    merget=list(collection.aggregate(queryt))

    overallumt=pd.DataFrame(merget)
    discount=0
    try:
        discount=overallumt["to_school"][0]
    except:
        discount=0
#     print(overallum11,"helloooooooooooo1achsdkjcbsdkjcbsdku")
    # print(len(set(list(overallum11["UMSCHOOLID"]))),"school_count")
    lifetimelist=list(set(overallum11["UMSCHOOLID"]))
    total_school=len(lifetimelist)
    collection = db.user_master
    query=[{'$match':{'$and':[{
    "schoolId._id": {
    "$in":lifetimelist
    }   
    },
    { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
    {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
    {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
    {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
    {'IS_DISABLED':{"$ne":'Y'}},
    {'IS_BLOCKED':{"$ne":'Y'}},
    {'schoolId.BLOCKED_BY_CAP':{'$exists':0}},
    ]
    }},
    {"$project":{"_id":0,
    'ROLE':'$ROLE_ID.ROLE_NAME',
    'UMUSER_ID':'$_id',"USER_NAME":'$USER_NAME',
    "UMSCHOOLID":'$schoolId._id',
    "DISTRICT_NAME":"$DISTRICT_ID.DISTRICT_NAME",
                 "UMSCHOOLNAME":'$schoolId.NAME',
                }},
    ]
    merge1=list(collection.aggregate(query))
    overallum=pd.DataFrame(merge1)
#     print(overallum,"overallum")
    email=""
    schoolid=[]
    try:
        email=list(overallum["UMUSER_ID"])
        schoolid=list(overallum["UMSCHOOLID"])
    except:
        pass
    ################################sub_master################################
    collection = db.subscription_master
    qr=[
    {"$match":{"$and":[{'USER_ID._id':{"$in":email}},]}},
    {"$project":{"_id":0,
    'SMUSER_ID':'$USER_ID._id',
    "RENEWAL_DATE":"$SUBSCRIPTION_EXPIRE_DATE",
    }},]
    merge=[]
    overall=[]
    mergeddf=[]
    try:
        merge=list(collection.aggregate(qr))
        overall=pd.DataFrame(merge)
        mergeddf=pd.merge(overallum, overall, how='left', left_on='UMUSER_ID', right_on='SMUSER_ID')
    except:
        pass
    db=client.compass
    collection = db.audio_track_master
    qra=[
    {"$match":{'$and':[
        {'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
    {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
    {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
    {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
    {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
    {'USER_ID.schoolId._id':{'$in':schoolid}},
    ]}},
    {'$group':{'_id':'$USER_ID.schoolId._id', 
    'atdLastpractice':{'$max':'$MODIFIED_DATE'},
    'atdPracticecount':{'$sum':1},
    'atdTotal_Mindful_Minutes':{"$sum":{"$round":[{"$divide":[{"$subtract":['$CURSOR_END','$cursorStart']}, 60]},0]}}}}]
    merge110=[]
    atd=[]
    mmm=0
    try:
        merge110=list(collection.aggregate(qra))
        atd=pd.DataFrame(merge110)
        mmm=str(round(sum(atd["atdTotal_Mindful_Minutes"])))
        finalmerge=pd.merge(mergeddf, atd, how='left', left_on='UMSCHOOLID', right_on='_id')
        finaldata=finalmerge[["DISTRICT_NAME","UMSCHOOLID","UMSCHOOLNAME","UMUSER_ID","ROLE","atdLastpractice","RENEWAL_DATE","atdPracticecount"]]
        finaldata["atdPracticecount"] = finaldata['atdPracticecount'].fillna(0)
        finaldata["atdPracticecount"] = finaldata['atdPracticecount'].astype('int')
        finaldata["atdPracticecount"] = finaldata['atdPracticecount'].astype('str')
    except:
        pass
#     print(finaldata)
    usercount=0
    try:
        usercount=len(finaldata[finaldata["ROLE"]=='user'])
    except:
        pass
    familycount=0
    try:
        familycount=len(finaldata[finaldata["ROLE"]=='PRESENT'])
    except:
        pass

    data2=[]
    totschnew=0
    try:
        totschnew=len(overallum11[overallum11["is_paid"]=="Y"])
        
    except:
        pass
    try:
        overallum11["is_paid"].fillna("N",inplace=True)
    except:
        overallum11["is_paid"]="N"
    overallum11["UMSCHOOLID"] = overallum11["UMSCHOOLID"].astype('str')
    overallum11=overallum11.sort_values(by=['UMSCHOOLNAME'], ascending=True)
    overallum11=overallum11.reset_index()
    
    
    # print(overallum11)
    for i in range(len(overallum11)):
        data2.append({"school_id":overallum11["UMSCHOOLID"][i],"school_name":overallum11["UMSCHOOLNAME"][i],"is_paid":overallum11["is_paid"][i]})
    finaldata={"data":data2,"total_school_district":discount,"total_school":totschnew,"user_count":usercount,"family_count":familycount,"mindful_minutes":mmm}
    return json.dumps(finaldata)




@app.route('/portal_test_new_api/<smcategory>')
def portal_testing_new_api(smcategory):    
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    collection = db.school_master
    from bson.objectid import ObjectId
#     smcategory="Agawam School district"
    query=[{'$match':{'$and':[
    { 'CATEGORY':{"$regex":""+smcategory+"",'$options':'i'}},]
    }},
    {"$project":{"_id":0,
    "UMSCHOOLID":'$_id',
    "UMSCHOOLNAME":'$NAME',
    "is_paid":"$FULL_EXPERIENCE",
                }},
    ]
    merge11=list(collection.aggregate(query))

    overallum11=pd.DataFrame(merge11)
    
    ###################
    collection = db.district_master
    queryt=[{'$match':{'$and':[
    { 'DISTRICT_NAME':{"$regex":""+smcategory+"",'$options':'i'}},]
    }},
    {"$project":{"_id":0,
    "to_school":'$TOTAL_SCHOOLS',
    
                }},
    ]
    merget=list(collection.aggregate(queryt))

    overallumt=pd.DataFrame(merget)
    discount=0
    try:
        discount=overallumt["to_school"][0]
    except:
        discount=0
#     print(overallum11,"helloooooooooooo1achsdkjcbsdkjcbsdku")
    # print(len(set(list(overallum11["UMSCHOOLID"]))),"school_count")
    lifetimelist=[]
    try:
        
        lifetimelist=list(set(overallum11["UMSCHOOLID"]))
    except:
        pass
    total_school=len(lifetimelist)
    collection = db.user_master
    query=[{'$match':{'$and':[{
    "schoolId._id": {
    "$in":lifetimelist
    }   
    },
    
    {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
    {'IS_DISABLED':{"$ne":'Y'}},
    {'IS_BLOCKED':{"$ne":'Y'}},
    {'schoolId.BLOCKED_BY_CAP':{'$exists':0}},
    ]
    }},
    {"$project":{"_id":0,
    'ROLE':'$ROLE_ID.ROLE_NAME',
    'UMUSER_ID':'$_id',"USER_NAME":'$USER_NAME',
    "UMSCHOOLID":'$schoolId._id',
    "DISTRICT_NAME":"$DISTRICT_ID.DISTRICT_NAME",
                 "UMSCHOOLNAME":'$schoolId.NAME',
                }},
    ]
    merge1=list(collection.aggregate(query))
    overallum=pd.DataFrame(merge1)
#     print(overallum,"overallum")
    email=""
    schoolid=[]
    try:
        email=list(overallum["UMUSER_ID"])
        schoolid=list(overallum["UMSCHOOLID"])
    except:
        pass
    ################################sub_master################################
    collection = db.subscription_master
    qr=[
    {"$match":{"$and":[{'USER_ID._id':{"$in":email}},]}},
    {"$project":{"_id":0,
    'SMUSER_ID':'$USER_ID._id',
    "RENEWAL_DATE":"$SUBSCRIPTION_EXPIRE_DATE",
    }},]
    merge=[]
    overall=[]
    mergeddf=[]
    try:
        merge=list(collection.aggregate(qr))
        overall=pd.DataFrame(merge)
        mergeddf=pd.merge(overallum, overall, how='left', left_on='UMUSER_ID', right_on='SMUSER_ID')
    except:
        pass
    db=client.compass
    collection = db.audio_track_master
    qra=[
    {"$match":{'$and':[
    {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
    {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
    {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
    {'USER_ID.schoolId._id':{'$in':schoolid}},
    ]}},
    {'$group':{'_id':'$USER_ID.schoolId._id', 
    'atdLastpractice':{'$max':'$MODIFIED_DATE'},
    'atdPracticecount':{'$sum':1},
    'atdTotal_Mindful_Minutes':{"$sum":{"$round":[{"$divide":[{"$subtract":['$CURSOR_END','$cursorStart']}, 60]},0]}}}}]
    merge110=[]
    atd=[]
    mmm=0
    try:
        merge110=list(collection.aggregate(qra))
        atd=pd.DataFrame(merge110)
        mmm=str(round(sum(atd["atdTotal_Mindful_Minutes"])))
        finalmerge=pd.merge(mergeddf, atd, how='left', left_on='UMSCHOOLID', right_on='_id')
        finaldata=finalmerge[["DISTRICT_NAME","UMSCHOOLID","UMSCHOOLNAME","UMUSER_ID","ROLE","atdLastpractice","RENEWAL_DATE","atdPracticecount"]]
        finaldata["atdPracticecount"] = finaldata['atdPracticecount'].fillna(0)
        finaldata["atdPracticecount"] = finaldata['atdPracticecount'].astype('int')
        finaldata["atdPracticecount"] = finaldata['atdPracticecount'].astype('str')
    except:
        pass
#     print(finaldata)
    usercount=0
    try:
        usercount=len(finaldata[finaldata["ROLE"]=='user'])
    except:
        pass
    familycount=0
    try:
        familycount=len(finaldata[finaldata["ROLE"]=='PRESENT'])
    except:
        pass

    data2=[]
    totschnew=0
    try:
        totschnew=len(overallum11[overallum11["is_paid"]=="Y"])
        
    except:
        pass
    try:
        overallum11["is_paid"].fillna("N",inplace=True)
    except:
        overallum11["is_paid"]="N"
    overallum11["UMSCHOOLID"] = overallum11["UMSCHOOLID"].astype('str')
    overallum11=overallum11.sort_values(by=['UMSCHOOLNAME'], ascending=True)
    overallum11=overallum11.reset_index()
    for i in range(len(overallum11)):
        data2.append({"school_id":overallum11["UMSCHOOLID"][i],"school_name":overallum11["UMSCHOOLNAME"][i],"is_paid":overallum11["is_paid"][i]})
    finaldata={"data":data2,"total_school_district":discount,"total_school":totschnew,"user_count":usercount,"family_count":familycount,"mindful_minutes":mmm}
    return json.dumps(finaldata)





@app.route('/bubblecum/<disid>/csv')
def schdistrictCUM(disid):  
    disdic={
    '620f3d6132c6d4813f4c9887':'Jackson County Schools',
    "5f2609807a1c0000950bb459":"North Special School District",    
    '61af3b75870dba387bcd86cd':'Holyoke Public Schools',
    '5f2609807a1c0000950bb465':'Middleton - Cross Plains Area School District',
    '5f2609807a1c0000950bb475':'Agawam School district',
    '619268dd81f00a4319a65a52':'Access Community',
    '5f2609807a1c0000950bb481':'Alameda Unified School District',
    '5f2609807a1c0000950bb47a':'Alpine School District',
    '5f2609807a1c0000950bb47b':'Ann Arbor Public Schools',
    '5f2609807a1c0000950bb463':'Austin Independent School District',
    '5f59e4836451a9089d7d4007':'Belleville School District',
    '61aa08a4afeab44256f54074':'Benton Harbor',
    '5f2609807a1c0000950bb46d':'Broward County Public Schools',
    '5f2609807a1c0000950bb46c':'Chico Unified School District',
    '5f2609807a1c0000950bb460':'Clarksville-Montgomery County School System',
    '5f2609807a1c0000950bb47f':'Community Consolidated School District 89',
    '5f2609807a1c0000950bb45c':'Comox Valley School District(sd71)',
    '5f2609807a1c0000950bb480':'Dell Texas',
    '5f7413ef9387fd71ce6387cb':'Douglas County School District',
    '5f895191609e08b76029f641':'Early learning Sarasota',
    '5f2609807a1c0000950bb462':'Englewood Cliffs Public Schools',
    '5f2609807a1c0000950bb461':'Englewood Public School District',
    '5f2609807a1c0000950bb45e':'Fairfield-Suisun Unified School District',
    '5f2609807a1c0000950bb47d':'Flint Public Schools',
    '5f2609807a1c0000950bb46b':'FundaciÃ³n La Puerta',
    '5f2609807a1c0000950bb450':'Goleta District',
    '5f2609807a1c0000950bb474':'Greenburgh-North Castle (GNC) Union Free School District',
    '5f2609807a1c0000950bb45f':'Griffin-Spalding County School System',
    '5f2609807a1c0000950bb476':'Hillsborough County',
    '5f2609807a1c0000950bb455':'Krum Independent School District',
    '5f2609807a1c0000950bb47e':'La Joya School District',
    '5f2609807a1c0000950bb467':'Lincolnshire Schools',
    '5f2609807a1c0000950bb45a':'LAUSD',
    '5f2609807a1c0000950bb482':'Massachusetts Institute of Technology',
    '5fb4efce4139b9d4c5a86a69':'Mt. Lebanon School District',
    '5fbcdf0ba84e48a64412a798':'Needham School District',
    '5f7c01fa9387fd71ce6387cc':'NYC - Queens South',
    '5f6994386451a9089d7d4009':'Ogden school district',
    '5f2609807a1c0000950bb472':'Oroville City Elementary School District',
    '5fd704da04a848e368de5dc6':'Oakland Unified School District',
    '5f8fcd33609e08b76029f644':'Paradise Unified School District',
    '5f2609807a1c0000950bb466':'Pinellas County Schools',
    '5f2609807a1c0000950bb471':'Racine Unified Schools',
    '5f6d7cbce6452eb06384db20':'Salt Lake City School District',
    '5f2609807a1c0000950bb478':'San Diego Unified School District',
    '5f2609807a1c0000950bb470':'San Leandro Unified School District',
    '5f2609807a1c0000950bb477':'Sarasota County',
    '5f2609807a1c0000950bb473':'Skillman Foundation',
    
    '5f2609807a1c0000950bb468':'Utah Board of Education',
    '5f698b826451a9089d7d4008':'Wayne Metro',
    '5f2609807a1c0000950bb45b':'Westfield Public School District',
    '5f2609807a1c0000950bb368':'Wichita Falls Independent School District',
    '5f2609807a1c0000950bb45d':'Youngstown',
    '5f2609807a1c0000950bb464':'Equity Education',
    '5f2609807a1c0000950bb469':'LSF -  Head Start',
    '5f2609807a1c0000950bb46e':'District 25 New York Schools',
    '5f2609807a1c0000950bb46f':'Paradise Schools',
    '5f2609807a1c0000950bb479':'Panorama Education',
    '5f2609807a1c0000950bb47c':'Hawaii Public Schools',
    '5f9aa5e526edbed399d56c92':'Hamilton-Wenham Regional School District',
    '5fe2e1ee4d0ca68d7baf889c':'LSF-Head Start',
    '5fe2e25d4d0ca68d7baf889d':'BGCA',
    '5fe318b14d0ca68d7baf889e':'BLUE',
    '5ffd8176469a86e28635f512':'Chula Vista Elementary School District',
    '6017ab3043ca9c39151838d4':'Oswego School District',
    '60239a84e57dc27613699d57':'Austin Independent School District',
    '6023a6d79e8e623753fc305c':'Boulder Valley School District',
    '6023a7019e8e623753fc305d':'Miami-Dade County Public Schools',
    '6023a7269e8e623753fc305e':'Fulton County School System',
    '6023a7499e8e623753fc305f':'Manatee County School District',
    '6023a76f9e8e623753fc3060':'San Jose Unified School District',
    '6023a7949e8e623753fc3061':'Wasatch County School District'}

    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.user_master
    district=disdic[disid]
    qraaa=[
        {"$match":{'$and':[
        {'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'DISTRICT_ID':{'$exists':1}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'CREATED_DATE':{"$gte":myDatetime}},
        {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'IS_DISABLED':{"$ne":'Y'}}, {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$schoolId._id',"month":{"$month": "$CREATED_DATE"}},
        'NAME_DISTRICT':{'$first':'$schoolId.NAME'},
        'usercount':{'$sum':1}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","MONTH":"$_id.month","NAME_DISTRICT":1,"usercount":1,
                        }}]
    merge11=list(collection.aggregate(qraaa))
    df1=pd.DataFrame(merge11)
    if df1.empty == True:
        data = [[district,0,disid,0]]
        column_names1 = ["NAME_DISTRICT","usercount","DISTRICT_ID","MONTH"]
        df1 = pd.DataFrame(data,columns = column_names1)
    # df1
    #######################################################
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.user_master
    qra=[
        {"$match":{'$and':[
        {'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'DISTRICT_ID':{'$exists':1}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'CREATED_DATE':{"$lt":myDatetime}},
        {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'IS_DISABLED':{"$ne":'Y'}}, {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$schoolId._id'},
        'NAME_DISTRICT':{'$first':'$schoolId.NAME'},
        'usercount':{'$sum':1}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"usercount":1,
                        }}]
    merge11233=list(collection.aggregate(qra))
    dfCV=pd.DataFrame(merge11233)
    if dfCV.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","usercount","DISTRICT_ID"]
        dfCV = pd.DataFrame(data,columns = column_names1)
    # print(dfCV)
    #########################################################################
    df1=df1.sort_values(by=['NAME_DISTRICT'], ascending=True)
    x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    x["usercount"].sum()
    dislist=list(set(df1["NAME_DISTRICT"]))
    df2=df1[["NAME_DISTRICT","MONTH","usercount"]]
    overall=pd.DataFrame(columns=["NAME_DISTRICT","MONTH","usercount"])
    # dislist
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["NAME_DISTRICT"]==k]
        df45.reset_index()
        for i in range(1,13):
            if i in list(df45["MONTH"]):
                pass
    #              print("month_present",i)
            else:
                a=max(list(df45.index))
                df45.loc[a+i] = [k] +[i]+[0]
                # df45.loc[i+len(df45)] = [k] +[i]+[0]
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).reset_index()
        df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).sum().groupby(level=0).cumsum().reset_index()
    #     print(df46)
        sorted_df =df46.sort_values(by=['MONTH'], ascending=True)
        sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
    buubleusercount = pd.concat(result)
    # buubleusercount
    ######family ########
    # username = urllib.parse.quote_plus('admin')
    # password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    # client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.user_master
    qraaa=[
        {"$match":{'$and':[
        {'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'DISTRICT_ID':{'$exists':1}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'CREATED_DATE':{"$gte":myDatetime}},
        {'ROLE_ID._id':{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'IS_DISABLED':{"$ne":'Y'}}, {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$schoolId._id',"month":{"$month": "$CREATED_DATE"}},
        'NAME_DISTRICT':{'$first':'$schoolId.NAME'},
        'famcount':{'$sum':1}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","MONTH":"$_id.month","NAME_DISTRICT":1,"famcount":1,
                        }}]
    merge11=list(collection.aggregate(qraaa))
    df1=pd.DataFrame(merge11)
    if df1.empty == True:
        data = [[district,0,disid,0]]
        column_names1 = ["NAME_DISTRICT","famcount","DISTRICT_ID","MONTH"]
        df1 = pd.DataFrame(data,columns = column_names1)
    # print(df1)
    #######################################################
    db=client.compass
    dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.user_master
    qra=[
        {"$match":{'$and':[
        {'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'DISTRICT_ID':{'$exists':1}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'CREATED_DATE':{"$lt":myDatetime}},
        {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'IS_DISABLED':{"$ne":'Y'}}, {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$schoolId._id'},
        'NAME_DISTRICT':{'$first':'$schoolId.NAME'},
        'usercount19':{'$sum':1}}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"usercount19":1,
                        }}]
    merge11233=list(collection.aggregate(qra))
    dfCV=pd.DataFrame(merge11233)
    if dfCV.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","usercount19","DISTRICT_ID"]
        dfCV = pd.DataFrame(data,columns = column_names1)
    # dfCV
    # #########################################################################
    df1=df1.sort_values(by=['NAME_DISTRICT'], ascending=True)
    x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    x["famcount"].sum()
    dislist=list(set(df1["NAME_DISTRICT"]))
    df2=df1[["NAME_DISTRICT","MONTH","famcount"]]
    overall=pd.DataFrame(columns=["NAME_DISTRICT","MONTH","famcount"])
    # dislist
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["NAME_DISTRICT"]==k]
        df45.reset_index()
        for i in range(1,13):
            if i in list(df45["MONTH"]):
                pass
    #              print("month_present",i)
            else:
                a=max(list(df45.index))
                df45.loc[a+i] = [k] +[i]+[0]
                # df45.loc[i+len(df45)] = [k] +[i]+[0]
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).reset_index()
        df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).sum().groupby(level=0).cumsum().reset_index()
    #     print(df46)
        sorted_df =df46.sort_values(by=['MONTH'], ascending=True)
        sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
    buublefamily = pd.concat(result)
    buubleusercount["idu"]=buubleusercount["NAME_DISTRICT"]+buubleusercount["MONTH"].map(str)
    buublefamily["idf"]=buublefamily["NAME_DISTRICT"]+buublefamily["MONTH"].map(str)
    mergeucfc=pd.merge(buubleusercount, buublefamily, how='left', left_on='idu', right_on='idf')
    mergeucfc=mergeucfc.fillna(0)
    mergeucfc1=pd.merge(mergeucfc, dfCV, how='left', left_on='NAME_DISTRICT_x', right_on='NAME_DISTRICT')
    mergeucfc12=mergeucfc1.fillna(0)
    mergeucfc12["totaluser"]=mergeucfc12["usercount"]+mergeucfc12["usercount19"]
    finmerge=mergeucfc12[["NAME_DISTRICT_x","MONTH_x","idu","totaluser","famcount"]]
    # finmerge


    # In[8]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-02-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    a=pd.DataFrame(merge121)
    if a.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        a = pd.DataFrame(data,columns = column_names1)
    a["MONTH"]=1
    # print(a)


    # In[9]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-03-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    b=pd.DataFrame(merge121)
    if b.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        b = pd.DataFrame(data,columns = column_names1)
    b["MONTH"]=2
    # print(a)


    # In[10]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-04-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    c=pd.DataFrame(merge121)
    if c.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        c = pd.DataFrame(data,columns = column_names1)
    c["MONTH"]=3
    # print(a)


    # In[11]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-05-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    d=pd.DataFrame(merge121)
    if d.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        d = pd.DataFrame(data,columns = column_names1)
    d["MONTH"]=4
    # print(a)


    # In[12]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-06-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    e=pd.DataFrame(merge121)
    if e.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        e = pd.DataFrame(data,columns = column_names1)
    e["MONTH"]=5
    # print(a)


    # In[13]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-07-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    f=pd.DataFrame(merge121)
    if f.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        f = pd.DataFrame(data,columns = column_names1)
    f["MONTH"]=6
    # print(a)


    # In[14]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-08-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    g=pd.DataFrame(merge121)
    if g.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        g = pd.DataFrame(data,columns = column_names1)
    g["MONTH"]=7
    # print(a)


    # In[15]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-09-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    h=pd.DataFrame(merge121)
    if h.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        h = pd.DataFrame(data,columns = column_names1)
    h["MONTH"]=8
    # print(a)


    # In[16]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-10-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    i=pd.DataFrame(merge121)
    if i.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        i = pd.DataFrame(data,columns = column_names1)
    i["MONTH"]=9
    # print(a)


    # In[17]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-11-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    j=pd.DataFrame(merge121)
    if j.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        j = pd.DataFrame(data,columns = column_names1)
    j["MONTH"]=10
    # print(a)


    # In[18]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-12-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    k=pd.DataFrame(merge121)
    if k.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        k = pd.DataFrame(data,columns = column_names1)
    k["MONTH"]=11
    # print(a)


    # In[19]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2021-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    l=pd.DataFrame(merge121)
    if l.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        l = pd.DataFrame(data,columns = column_names1)
    l["MONTH"]=12
    # print(a)


    # In[29]:


    df1=pd.concat([a,b,c,d,e,f,g,h,i,j,k,l])
    # print(a,b,c,d,e,f,g,h,i,j,k,l)


    # In[30]:

    print(df1)
    df1=df1.sort_values(by=['NAME_DISTRICT'], ascending=True)
    dislist=list(set(df1["NAME_DISTRICT"]))
    df2=df1[["NAME_DISTRICT","MONTH","ACTIVE_USER"]]
    overall=pd.DataFrame(columns=["NAME_DISTRICT","MONTH","ACTIVE_USER"])
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["NAME_DISTRICT"]==k]
        df45.reset_index()
        for i in range(1,13):
            if i in list(df45["MONTH"]):
                pass
    #              print("month_present",i)
            else:
                df45.loc[i+len(df45)] = [k] +[i]+[0]
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).reset_index()
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).sum().groupby(level=0).cumsum().reset_index()
    #     print(df46)
        sorted_df =df45.sort_values(by=['MONTH'], ascending=True)
        sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
    buubleactuser = pd.concat(result)
    buubleactuser["acuid"]=buubleactuser["NAME_DISTRICT"]+buubleactuser["MONTH"].map(str)
    # buubleactuser
    finmergeu=pd.merge(finmerge, buubleactuser, how='left', left_on='idu', right_on='acuid')


    # In[31]:


    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-02-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    a=pd.DataFrame(merge121)
    if a.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        a = pd.DataFrame(data,columns = column_names1)
    a["MONTH"]=1
    # print(a)


    # In[9]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-03-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    b=pd.DataFrame(merge121)
    if b.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        b = pd.DataFrame(data,columns = column_names1)
    b["MONTH"]=2
    # print(a)


    # In[10]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-04-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    c=pd.DataFrame(merge121)
    if c.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        c = pd.DataFrame(data,columns = column_names1)
    c["MONTH"]=3
    # print(a)


    # In[11]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-05-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    d=pd.DataFrame(merge121)
    if d.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        d = pd.DataFrame(data,columns = column_names1)
    d["MONTH"]=4
    # print(a)


    # In[12]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-06-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    e=pd.DataFrame(merge121)
    if e.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        e = pd.DataFrame(data,columns = column_names1)
    e["MONTH"]=5
    # print(a)


    # In[13]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-07-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    f=pd.DataFrame(merge121)
    if f.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        f = pd.DataFrame(data,columns = column_names1)
    f["MONTH"]=6
    # print(a)


    # In[14]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-08-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    g=pd.DataFrame(merge121)
    if g.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        g = pd.DataFrame(data,columns = column_names1)
    g["MONTH"]=7
    # print(a)


    # In[15]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-09-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    h=pd.DataFrame(merge121)
    if h.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        h = pd.DataFrame(data,columns = column_names1)
    h["MONTH"]=8
    # print(a)


    # In[16]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-10-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    i=pd.DataFrame(merge121)
    if i.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        i = pd.DataFrame(data,columns = column_names1)
    i["MONTH"]=9
    # print(a)


    # In[17]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-11-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    j=pd.DataFrame(merge121)
    if j.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        j = pd.DataFrame(data,columns = column_names1)
    j["MONTH"]=10
    # print(a)


    # In[18]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2020-12-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    k=pd.DataFrame(merge121)
    if k.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        k = pd.DataFrame(data,columns = column_names1)
    k["MONTH"]=11
    # print(a)


    # In[19]:


    ###ACTIVE USER
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dateStr = "2021-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
        {'MODIFIED_DATE':{"$lt":myDatetime}},
        {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        "ACTIVE_USER":{'$addToSet':"$USER_ID._id"},}},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"ACTIVE_USER":{"$size":"$ACTIVE_USER"}}}]
    merge121=list(collection.aggregate(qra12))
    l=pd.DataFrame(merge121)
    if l.empty == True:
        data = [[district,0,disid]]
        column_names1 = ["NAME_DISTRICT","ACTIVE_USER","DISTRICT_ID"]
        l = pd.DataFrame(data,columns = column_names1)
    l["MONTH"]=12
    # print(a)


    # In[29]:


    df1=pd.concat([a,b,c,d,e,f,g,h,i,j,k,l])


    # In[ ]:


    # ###ACTIVE FAMILY
    # username = urllib.parse.quote_plus('admin')
    # password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    # client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    # db=client.compass
    # dateStr = "2020-01-01T00:00:00.000Z"
    # myDatetime = dateutil.parser.parse(dateStr)
    # collection = db.audio_track_master
    # qra12=[
    #     {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
    #     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
    #     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #     {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
    #     {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
    #     {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
    #     {'USER_ID.DISTRICT_ID':{'$exists':1}},
    #     {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
    #     {'MODIFIED_DATE':{"$gte":myDatetime}},
    #     {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
    #     {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
    #     {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
    #     ]}},
    #     {'$group':{'_id':{"district":'$USER_ID.schoolId._id',"year":{"$year": "$MODIFIED_DATE"},"month":{"$month": "$MODIFIED_DATE"}},
    #     'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
    #     'PRACTICE':{'$sum':1},
    #     "ACTIVE_FAM":{'$addToSet':"$USER_ID._id"},
    #     'Mindful_Minutes':{"$sum":{"$round":[{"$divide":[{"$subtract":['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
    #         {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","MONTH":"$_id.month","YEAR":"$_id.year","NAME_DISTRICT":1,"PRACTICE":1,"ACTIVE_FAM":{"$size":"$ACTIVE_FAM"},
    #                    "Mindful_Minutes":1 }}]
    # merge121=list(collection.aggregate(qra12))
    # df1=pd.DataFrame(merge121)


    # In[33]:


    df1=df1.rename(columns={"ACTIVE_USER": "ACTIVE_FAM"})


    # In[34]:


    df1=df1.sort_values(by=['NAME_DISTRICT'], ascending=True)
    df1
    # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    dislist=list(set(df1["NAME_DISTRICT"]))
    df2=df1[["NAME_DISTRICT","MONTH","ACTIVE_FAM"]]
    overall=pd.DataFrame(columns=["NAME_DISTRICT","MONTH","ACTIVE_FAM"])
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["NAME_DISTRICT"]==k]
        df45.reset_index()
        for i in range(1,13):
            if i in list(df45["MONTH"]):
                pass
    #              print("month_present",i)
            else:
                df45.loc[i+len(df45)] = [k] +[i]+[0]
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).reset_index()
    #     df46=df45.groupby(['NAME_DISTRICT', 'MONTH']).sum().groupby(level=0).cumsum().reset_index()
    #     print(df46)
        sorted_df =df45.sort_values(by=['MONTH'], ascending=True)
        sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
    buubleactfam = pd.concat(result)
    buubleactfam["acuidf"]=buubleactfam["NAME_DISTRICT"]+buubleactfam["MONTH"].map(str)
    finmergeuf=pd.merge(finmergeu, buubleactfam, how='left', left_on='idu', right_on='acuidf')
    finmergeuf["USER ENGAGEMENT"]=round((finmergeuf["ACTIVE_USER"]/finmergeuf["totaluser"])*100)
    finmergeuf["FAMILY ENGAGEMENT"]=round((finmergeuf["ACTIVE_FAM"]/finmergeuf["famcount"])*100)
    finmergeufo=finmergeuf[["NAME_DISTRICT_x","MONTH_x","USER ENGAGEMENT","FAMILY ENGAGEMENT"]]
    finmergeufo=finmergeufo.fillna(0)
    finmergeufo=finmergeufo.loc[:,~finmergeufo.columns.duplicated()]
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    # dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.audio_track_master
    qra12=[
        {"$match":{'$and':[{'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'USER_ID.DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'USER_ID.DISTRICT_ID':{'$exists':1}},
        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
    #     {'MODIFIED_DATE':{"$gte":myDatetime}},
    #     {'USER_ID.ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}}, 
        {'USER_ID.IS_DISABLED':{"$ne":'Y'}}, {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$USER_ID.schoolId._id'},
        'NAME_DISTRICT':{'$first':'$USER_ID.schoolId.NAME'},
        'PRACTICE':{'$sum':1},
                  }},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"PRACTICE":1 }}]
    merge1211=list(collection.aggregate(qra12))
    df1111=pd.DataFrame(merge1211)
    # print("check1")
    df1111=df1111.sort_values(by=['NAME_DISTRICT'], ascending=True)
    DISPRACTO=df1111[["NAME_DISTRICT","PRACTICE"]]
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    # dateStr = "2020-01-01T00:00:00.000Z"
    myDatetime = dateutil.parser.parse(dateStr)
    collection = db.user_master
    qra12=[
        {"$match":{'$and':[{'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{'$not':{'$regex':'1gen', '$options':'i'}}},
        {'DISTRICT_ID.DISTRICT_NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':district, '$options':'i'} } )}},
        {'DISTRICT_ID':{'$exists':1}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
    #     {'MODIFIED_DATE':{"$gte":myDatetime}},
    #     {'ROLE_ID._id':ObjectId("5f155b8a3b6800007900da2b")},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'IS_DISABLED':{"$ne":'Y'}}, {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        ]}},
        {'$group':{'_id':{"district":'$schoolId._id'},
        'NAME_DISTRICT':{'$first':'$schoolId.NAME'},
        "USER COUNT":{'$addToSet':"$_id"},
                  }},
            {"$project":{"_id":0,"DISTRICT_ID":"$_id.district","NAME_DISTRICT":1,"USER COUNT":{"$size":"$USER COUNT"} }}]
    merge1211=list(collection.aggregate(qra12))
    df1111=pd.DataFrame(merge1211)
    df1111=df1111.sort_values(by=['NAME_DISTRICT'], ascending=True)
    DISSCHOOL=df1111[["NAME_DISTRICT","USER COUNT"]]
    finmergeufosch=pd.merge(finmergeufo, DISSCHOOL, how='left', left_on='NAME_DISTRICT_x', right_on='NAME_DISTRICT')
    finmergeufoschprac=pd.merge(finmergeufosch, DISPRACTO, how='left', left_on='NAME_DISTRICT_x', right_on='NAME_DISTRICT')
    finmergeufoschprac=finmergeufoschprac.fillna(0)
    final_buuble_data=finmergeufoschprac[["NAME_DISTRICT_x","MONTH_x","USER ENGAGEMENT","FAMILY ENGAGEMENT","USER COUNT","PRACTICE"]]
    finaldata=final_buuble_data.rename(columns={"NAME_DISTRICT_x": "DISTRICT_NAME","USER ENGAGEMENT":"USER_ENGAGEMENT","USER COUNT":"USER_COUNT", "FAMILY ENGAGEMENT":"FAMILY_ENGAGEMENT","MONTH_x": "MONTH"})
    finaldata=finaldata.loc[:,~finaldata.columns.duplicated()]
    li = [finaldata.columns.values.tolist()] + finaldata.values.tolist() 
    sheet = pe.Sheet(li)
    print(sheet,"sheet")
    print(type(sheet),"sheet type")
    ioO = io.StringIO()
    sheet.save_to_memory("csv", ioO)
    output = make_response(ioO.getvalue())
    # output.headers["Content-Disposition"] = "attachment; filename=export.csv"
    output.headers["Content-type"] = "text/csv"
    return output




@app.route('/schoolsearchtunein/<name>')
def school_search_tunein(name):
    name1=name.replace("%20"," ")
    print(name1,"hola")
    from bson.regex import Regex
    from pymongo import MongoClient
    from flask import Flask,json

    import urllib 
    import pandas as pd
    # mongo_uri = "mongodb://admin:" + urllib.parse.quote("I#L@teST^m0NGO_2o20!") + "@54.184.165.106:27017/"
    # client = MongoClient(mongo_uri)
    # # client = MongoClient("mongodb://host:port/")
    # database = client["compass"]

    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    database = client.compass

    collection = database["user_master"]

    # Created with Studio 3T, the IDE for MongoDB - https://studio3t.com
    query = {}
#     query["schoolId.NAME"] = name1
    query["schoolId._id"] = ObjectId(name)
    #     query["EMAIL_ID"] = Regex(u".*amorgan@methacton\\.org.*", "i")
    query["USER_NAME"] = {
        u"$not": Regex(u".*TEST.*", "i")
    }
    ###############
    query["schoolId.NAME"] = {
        u"$not": Regex(u".*TEST.*", "i")
    }
    ###############
    query["IS_BLOCKED"] = {
        u"$ne": u"Y"
    }

    query["ROLE_ID.ROLE_NAME"] = {
        u"$not": Regex(u".*PRESENT.*", "i")
    }

    query["IS_DISABLED"] = {
        u"$ne": u"Y"
    }

    query["INCOMPLETE_SIGNUP"] = {
        u"$ne": u"Y"
    }

    # query["DEVICE_USED"] = Regex(u".*webapp.*", "i")

    projection = {}
    projection["USER_ID.USER_ID"] = 1.0
    projection["EMAIL_ID"] = 1.0
    projection["CREATED_DATE"] = 1.0
    projection["IS_ADMIN"] = 1.0
    projection["USER_NAME"] = 1.0
    projection["IS_ADMIN"] = 1.0
    projection["schoolId.ADDRESS"] = 1.0
    projection["schoolId.CITY"] = 1.0
    projection["schoolId.STATE"] = 1.0
    projection["schoolId.COUNTRY"] = 1.0
    projection["schoolId.NAME"] = 1.0
    projection["schoolId.LONGITUDE"]=1.0
    projection["schoolId.LATITUDE"]=1.0
    projection["DISTRICT_ID._id"]=1.0

    cursor = collection.find(query, projection = projection)
    dfum=(list(cursor))
    dfum=pd.json_normalize(dfum, max_level=1).fillna(0)
    print(dfum,'dfum')
    if dfum.empty == True:        
        collection = database["school_master"]
        query = {}
        query["_id"] = ObjectId(name)
        ###############
        query["NAME"] = {
            u"$not": Regex(u".*TEST.*", "i")
        }
        ###############

        projection = {}
        projection["CREATED_DATE"] = 1.0
        projection["ADDRESS"] = 1.0
        projection["CITY"] = 1.0
        projection["STATE"] = 1.0
        projection["COUNTRY"] = 1.0
        projection["NAME"] = 1.0
        projection["LONGITUDE"]=1.0
        projection["LATITUDE"]=1.0
        projection["COUNTYCODE"]=1.0

        cursor = collection.find(query, projection = projection)
        dfum=(list(cursor))
        dfum=pd.json_normalize(dfum, max_level=1).fillna(0)
        # print(dfum,'dfum')
        dfum
        if dfum.empty == True:
            temp={"result":"NO INFO FOR THIS SCHOOL"}
        else:
            Latitude=dfum["LATITUDE"][0]
            longitude=dfum["LONGITUDE"][0]
            CREATED_DATE_SCHOOL=dfum["CREATED_DATE"][0]
            CREATED_DATE_SCHOOL=pd.to_datetime(CREATED_DATE_SCHOOL).strftime("%b %d, %Y ")
            ccode=dfum["COUNTYCODE"][0]        
            schoolname=dfum["NAME"][0]
            country=dfum["COUNTRY"][0]
            city=dfum["CITY"][0]
            state=dfum["STATE"][0]
            address=dfum["ADDRESS"][0]

            data=[]
            pracsum=str(0)
            totaluser=str(0)
            dlink=int(0)
            admin=""
            adminemail=""
            EXPIRE=""

            temp={"data":data,"lat":Latitude,"long":longitude,"school_practice_count":str(pracsum),
                  "school_name":schoolname,"country":country,"state":state,"city":city,"address":address,
                  "admin_name":admin,"admin_email":adminemail,"user_count":totaluser,"EXPIRE_STATUS":EXPIRE,
                  "CREATED_DATE_SCHOOL":CREATED_DATE_SCHOOL,"dis": dlink,"Country_code": ccode}
        return json.dumps(temp)
        
    else:    
        schoolname=dfum["schoolId.NAME"][0]
        country=dfum["schoolId.COUNTRY"][0]
        city=dfum["schoolId.CITY"][0]
        state=dfum["schoolId.STATE"][0]
        address=dfum["schoolId.ADDRESS"][0]
        if "schoolId.LATITUDE" in dfum.columns:
            Latitude=dfum["schoolId.LATITUDE"][0]       
        else:
            Latitude=int(0)
        if "schoolId.LONGITUDE" in dfum.columns:
            longitude=dfum["schoolId.LONGITUDE"][0]       
        else:
            longitude=int(0)        
            
        if "DISTRICT_ID._id" in dfum.columns:
            disid=dfum["DISTRICT_ID._id"][0] 
            print(disid,'if-disid')
            
            collection = database["district_master"]
            # Created with Studio 3T, the IDE for MongoDB - https://studio3t.com
            
            ### Change for single schools
            if dfum["DISTRICT_ID._id"][0] == 0:
                dlink=int(0)
                ccode=int(0) 
            if dfum["DISTRICT_ID._id"][0] == 'NULL':
                dlink=int(0)
                ccode=int(0) 
                
            if dfum["DISTRICT_ID._id"][0] != 0:

                query = {}
                query["_id"] = ObjectId(disid)    ##

                projection = {}
                projection["DISTRICT_LINK"] = 1.0
                projection["COUNTY_CODE"] = 1.0
                cursor = collection.find(query, projection = projection)
                dfdm=(list(cursor))
                dfdm=pd.json_normalize(dfdm, max_level=1)
                if "DISTRICT_LINK" in dfdm.columns:
                    dlink=dfdm["DISTRICT_LINK"][0]      
                else:
                    dlink=int(0)
                if "COUNTY_CODE" in dfdm.columns:
                    ccode=dfdm["COUNTY_CODE"][0]       
                else:
                    ccode=int(0)
                      
        else:
            dlink=int(0)
            ccode=int(0)          
        
#########################CREATED_DATE_SCHOOL#############################
        if 'IS_ADMIN' in dfum.columns:
            CREATED_DATE_SCHOOL1=dfum.loc[dfum['IS_ADMIN'] == 'Y']
            CREATED_DATE_SCHOOL=CREATED_DATE_SCHOOL1["CREATED_DATE"]
            print(CREATED_DATE_SCHOOL,'admin')

            if CREATED_DATE_SCHOOL1.empty==True:
                CREATED_DATE_SCHOOL=min(dfum["CREATED_DATE"])
                print(CREATED_DATE_SCHOOL,'not-admin')
            CREATED_DATE_SCHOOL=pd.to_datetime(CREATED_DATE_SCHOOL).dt.strftime("%b %d, %Y ")
            CREATED_DATE_SCHOOL = list(max(CREATED_DATE_SCHOOL))
            CREATED_DATE_SCHOOL = ''.join(CREATED_DATE_SCHOOL)
            CREATED_DATE_SCHOOL
            #################

            admin1=dfum[dfum['IS_ADMIN']=='Y']

            admin2=admin1['USER_NAME']
            admin3=list(admin2)
            admin=admin3[0]
            adminemail1=admin1['EMAIL_ID']
            admine=list(adminemail1)
            # adminemail=[dfum['EMAIL_ID'][dfum['IS_ADMIN']=='Y']][0]
            adminemail=admine[0]
            #     print(adminemail)
        else:
            CREATED_DATE_SCHOOL=int(0)
            admin=int(0)
            adminemail=int(0)
            
        email=list(dfum['EMAIL_ID'])
        #     print(email)
        totaluser=len(email)
        collection = database["audio_track_master"]

        #     Created with Studio 3T, the IDE for MongoDB - https://studio3t.com/

        pipeline = [
            {
                u"$match": {
                    u"USER_ID.EMAIL_ID": {
                        u"$in": email
                    }
                }

            }, 
            {
                u"$group": {
                    u"_id": {
                        u"USER_ID\u1390_id": u"$USER_ID._id"
                    },
                    u"MAX(MODIFIED_DATE)": {
                        u"$max": u"$MODIFIED_DATE"
                    },
                    u"COUNT(USER_ID\u1390_id)": {
                        u"$sum": 1
                    }
                }
            }, 
            {
                u"$project": {
                    u"USER_ID._id": u"$_id.USER_ID\u1390_id",
                    u"MAX(MODIFIED_DATE)": u"$MAX(MODIFIED_DATE)",
                    u"COUNT(USER_ID\u1390_id)": u"$COUNT(USER_ID\u1390_id)",
                    u"_id": 0
                }
            }
        ]

        cursor = collection.aggregate(
            pipeline, 
            allowDiskUse = True
        )
        dfatd=list(cursor)
#         collection = database["district_master"]

#         # Created with Studio 3T, the IDE for MongoDB - https://studio3t.com
#         ### Change for single schools
#         if "DISTRICT_ID._id" in dfum.columns:
        
#             query = {}
#             query["_id"] = ObjectId(disid)    ##

#             projection = {}
#             projection["DISTRICT_LINK"] = 1.0
#             projection["COUNTY_CODE"] = 1.0
#             cursor = collection.find(query, projection = projection)
#             dfdm=(list(cursor))
#             dfdm=pd.json_normalize(dfdm, max_level=1)
#             if "DISTRICT_LINK" in dfdm.columns:
#                 dlink=dfdm["DISTRICT_LINK"][0]       
#             else:
#                 dlink=int(0)
#             if "COUNTY_CODE" in dfdm.columns:
#                 ccode=dfdm["COUNTY_CODE"][0]       
#             else:
#                 ccode=int(0)
        
#         else:
#             dlink=int(0)
#             ccode=int(0)           
    
        dfatd=pd.json_normalize(dfatd, max_level=1)
        print(dfatd)
#         if dfatd.empty == True:
#             temp={"data":"NO PRACTICE FOR THIS SCHOOL"}
#             return json.dumps(temp)
            
        collection = database["subscription_master"]

        # Created with Studio 3T, the IDE for MongoDB - https://studio3t.com/

        pipeline = [
            {
                u"$match": {
                    u"USER_ID.EMAIL_ID": {
                        u"$in": email
                    }
                }
            }, 
            {
                u"$group": {
                    u"_id": {
                        u"USER_ID\u1390_id": u"$USER_ID._id"
                    },
                    u"MAX(SUBSCRIPTION_EXPIRE_DATE)": {
                        u"$max": u"$SUBSCRIPTION_EXPIRE_DATE"
                    }
                }
            }, 
            {
                u"$project": {
                    u"MAX(SUBSCRIPTION_EXPIRE_DATE)": u"$MAX(SUBSCRIPTION_EXPIRE_DATE)",
                    u"USER_ID._id": u"$_id.USER_ID\u1390_id",
                    u"_id": 0
                }
            }
        ]

        cursor = collection.aggregate(
            pipeline, 
            allowDiskUse = True
        )
        dfsbm=list(cursor)
        dfsbm=pd.json_normalize(dfsbm, max_level=1)
        print(dfsbm,"dfsbm")

        try:
            dffinal=pd.merge(dfum,dfatd,left_on='_id',right_on='USER_ID._id',how='left',suffixes=('_',''))
            dffinalnew=pd.merge(dffinal,dfsbm,left_on='_id',right_on='USER_ID._id',how='left',suffixes=('_',''))
        except:
            dfum['MAX(MODIFIED_DATE)']='NO PRACTICE'
            dfum['COUNT(USER_ID᎐_id)']=0
            dffinal=dfum
            dffinalnew=pd.merge(dffinal,dfsbm,left_on='_id',right_on='USER_ID._id',how='left',suffixes=('_',''))


        #     schoolname=dfum["schoolId.NAME"][0]
        country=dfum["schoolId.COUNTRY"][0]
        city=dfum["schoolId.CITY"][0]
        state=dfum["schoolId.STATE"][0]
        address=dfum["schoolId.ADDRESS"][0]
        #     admin=[dfum['USER_NAME'][dfum['IS_ADMIN']=='Y']][0]
        #     admin=admin[0]
        #     adminemail=[dfum['EMAIL_ID'][dfum['IS_ADMIN']=='Y']][0]
        #     adminemail=adminemail[0]
        email=list(dfum['EMAIL_ID'])
        totaluser=len(email)
        dffinalnew['MAX(MODIFIED_DATE)'].fillna("NO PRACTICE", inplace=True)
        dffinalnew['MAX(SUBSCRIPTION_EXPIRE_DATE)'].fillna(" ", inplace=True)
        dffinalnew['COUNT(USER_ID᎐_id)'].fillna(0, inplace=True)
        pracsum=sum(list(dffinalnew['COUNT(USER_ID᎐_id)']))
        dffinalnew.fillna(value=pd.np.nan, inplace=True)

        MAX=[]
        for i in dffinalnew['MAX(MODIFIED_DATE)']:
            if  i != 'NO PRACTICE' :
                MAX.append(i.strftime("%d %b %Y "))
            else:
                MAX.append("NO PRACTICE")
        SUBSCRIPTION_EXPIRE_DATE=[]
        for i in dffinalnew['MAX(SUBSCRIPTION_EXPIRE_DATE)']:
            if  i != ' ' :
                SUBSCRIPTION_EXPIRE_DATE.append(i.strftime("%d %b %Y "))
            else:
                SUBSCRIPTION_EXPIRE_DATE.append(" ")        
        CREATED_DATE=[]
        for i in dffinalnew['CREATED_DATE']:
            if  i != ' ' :
                CREATED_DATE.append(i.strftime("%d %b %Y "))
            else: 
                CREATED_DATE.append(" ")
        data=[]
        today = date.today()
        d4 = today
        if d4 > dffinalnew['MAX(SUBSCRIPTION_EXPIRE_DATE)'][0]:
            EXPIRE="EXPIRED"
        else:
            EXPIRE="NOT EXPIRED"
        for T,k,l,m,o,p in zip(dffinalnew['USER_NAME'].tolist(),dffinalnew['EMAIL_ID'].tolist(),CREATED_DATE,MAX,SUBSCRIPTION_EXPIRE_DATE,dffinalnew['COUNT(USER_ID᎐_id)'].tolist()):
            #print(p,q,r)
            data.append([T,k,l,m,o,p])
            
        if dfatd.empty == True:
            pracsum=str(0)
#             totaluser=str(0)
            
        temp={
            "data":data,
            "lat":Latitude,"long":longitude,"school_practice_count":str(pracsum),
              "school_name":schoolname,"country":country,"state":state,"city":city,"address":address,
              "admin_name":admin,"admin_email":adminemail,"user_count":totaluser,"EXPIRE_STATUS":EXPIRE,
              "CREATED_DATE_SCHOOL":CREATED_DATE_SCHOOL,"dis": dlink,"Country_code": ccode}

    return json.dumps(temp)

@app.route('/sub_detail_table/<dates>/<type>')
def SUBSCRIPTION_DETAIL_TABLE(dates,type):
    mongo_uri = "mongodb://admin:" + urllib.parse.quote("F5tMazRj47cYqm33e") + "@52.41.36.115:27017/"
    client = pymongo.MongoClient(mongo_uri)
    db = client.compass
    mydoc = db.subscription_master.aggregate([
    {"$match":{"$and":[{"USER_ID.USER_NAME":{"$not":{ "$regex":"Test",'$options':'i'}}},
        {"USER_ID.USER_NAME":{"$not":{ "$regex":"test",'$options':'i'}}},
            {"USER_ID.EMAIL_ID":{"$not":{ "$regex":"1gen",'$options':'i'}}},
            {"USER_ID.EMAIL_ID":{"$not":{ "$regex":"test",'$options':'i'}}},
            {"IS_PAYMENT_SUCCESS" : "Y"},
            {"LAST_PAYMENT_AMOUNT":{"$ne":0}}]
    }},
    {"$project":{"_id":1,"USER_ID":"$USER_ID._id","USER_NAME":"$USER_ID.USER_NAME","EMAIL_ID":"$USER_ID.EMAIL_ID","DEVICE_USED":"$USER_ID.DEVICE_USED","CREATED_DATE": { "$dateToString": { "format": "%Y-%m-%d", "date": "$USER_ID.CREATED_DATE"}},
    "MODE_OF_PAYMENT":"$MODE_OF_PAYMENT","Last_Payment_Date": { "$dateToString": { "format": "%Y-%m-%d", "date": "$LAST_PAYMENT_DATE"}},"Payment_Amount":"$LAST_PAYMENT_AMOUNT","CUSTOMER_CARD_ID":"$CUSTOMER_CARD_ID",
                 "APPLE_PAY_ID":"$APPLE_PAY_ID","GOOGLE_PAY_ID":"$GOOGLE_PAY_ID","PAYER_ID":"$PAYER_ID",
    "EXPIRATION_DATE": { "$dateToString": { "format": "%Y-%m-%d", "date": "$SUBSCRIPTION_EXPIRE_DATE"}}}}
    ,{"$unwind":"$Last_Payment_Date"}
    ])
    payment_df1= DataFrame(list(mydoc)).fillna("OTHERS")
    payment_df1["Transaction ID"]=payment_df1["CUSTOMER_CARD_ID"]+payment_df1["PAYER_ID"]+payment_df1["APPLE_PAY_ID"]+payment_df1["GOOGLE_PAY_ID"]
    spec_chars = ["OTHERS"]
    for char in spec_chars:
        payment_df1["Transaction ID"] = payment_df1["Transaction ID"].str.replace(char, '')
    payment_df1["Transaction ID"].replace('', np.nan, inplace=True)
    payment_df1["Transaction ID"].fillna(value="NO INFO",inplace=True)
    payment_df1= payment_df1[payment_df1['MODE_OF_PAYMENT']!='payLater']
    payment_df1= payment_df1[payment_df1['DEVICE_USED']!='OTHERS']
    payment_df1['DEVICE_USED'] = payment_df1['DEVICE_USED'].str.upper()
    payment_df1['DEVICE_USED'] = payment_df1['DEVICE_USED'].str.upper() 
    payment_df1['MODE_OF_PAYMENT'] = payment_df1['MODE_OF_PAYMENT'].str.upper()
    payment_df1['DEVICE_USED'] = payment_df1['DEVICE_USED'].str.upper()
    payment_df1['MODE_OF_PAYMENT'] = payment_df1['MODE_OF_PAYMENT'].str.replace("POMOCODE", "PROMOCODE")
    payment_df1['MODE_OF_PAYMENT'] = payment_df1['MODE_OF_PAYMENT'].str.replace("SQUAREPAYMENT", "SQUARE PAYMENT")
    payment_df1['MODE_OF_PAYMENT'] = payment_df1['MODE_OF_PAYMENT'].str.replace("INVITED_USER", "INVITED USER")
    payment_df1['MODE_OF_PAYMENT'] = payment_df1['MODE_OF_PAYMENT'].str.replace("INVITEDUSER", "INVITED USER")
    payment_df1['Last_Payment_Date'] =  pd.to_datetime(payment_df1['Last_Payment_Date'])
    today = date.today()
    d1 = today.strftime("%Y-%m-%d")
    d1 =  pd.to_datetime(d1)
    d2=d1.strftime("%Y-%m-%d")
    date1=dates
    if date1=="All" and type=="All":
        date3="2017-01-01"
        newdf1=payment_df1[(payment_df1.Last_Payment_Date <= d2)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1[['Last_Payment_Date','CREATED_DATE',"EXPIRATION_DATE"]] = newdf1[['Last_Payment_Date','CREATED_DATE',"EXPIRATION_DATE"]].apply(pd.to_datetime)
        newdf1["EXPIRATION_DATE"] = newdf1["EXPIRATION_DATE"].dt.strftime("%m/%d/%Y")
        newdf1['CREATED_DATE']=newdf1['CREATED_DATE'].dt.strftime("%m/%d/%Y")
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","Payment_Amount","Transaction ID","USER_NAME","EMAIL_ID","CREATED_DATE","EXPIRATION_DATE","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())
    elif date1=="30"and type=="All":
        date2=d1- timedelta(days=30)
        date3=date2.strftime("%Y-%m-%d")
        newdf1=payment_df1[(payment_df1.Last_Payment_Date >= date3) & (payment_df1.Last_Payment_Date <= d2)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1[['Last_Payment_Date','CREATED_DATE',"EXPIRATION_DATE"]] = newdf1[['Last_Payment_Date','CREATED_DATE',"EXPIRATION_DATE"]].apply(pd.to_datetime)
        newdf1["EXPIRATION_DATE"] = newdf1["EXPIRATION_DATE"].dt.strftime("%m/%d/%Y")
        newdf1['CREATED_DATE']=newdf1['CREATED_DATE'].dt.strftime("%m/%d/%Y")
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","Payment_Amount","Transaction ID","USER_NAME","EMAIL_ID","CREATED_DATE","EXPIRATION_DATE","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())
    elif date1=="60" and type=="All":
        date2=d1- timedelta(days=60)
        date3=date2.strftime("%Y-%m-%d")
        newdf1=payment_df1[(payment_df1.Last_Payment_Date >= date3) & (payment_df1.Last_Payment_Date <= d2)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1[['Last_Payment_Date','CREATED_DATE',"EXPIRATION_DATE"]] = newdf1[['Last_Payment_Date','CREATED_DATE',"EXPIRATION_DATE"]].apply(pd.to_datetime)
        newdf1["EXPIRATION_DATE"] = newdf1["EXPIRATION_DATE"].dt.strftime("%m/%d/%Y")
        newdf1['CREATED_DATE']=newdf1['CREATED_DATE'].dt.strftime("%m/%d/%Y")
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","Payment_Amount","Transaction ID","USER_NAME","EMAIL_ID","CREATED_DATE","EXPIRATION_DATE","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())
    elif date1=="90" and type=="All":
        date2=d1- timedelta(days=90)
        date3=date2.strftime("%Y-%m-%d")
        newdf1=payment_df1[(payment_df1.Last_Payment_Date >= date3) & (payment_df1.Last_Payment_Date <= d2)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1[['Last_Payment_Date','CREATED_DATE',"EXPIRATION_DATE"]] = newdf1[['Last_Payment_Date','CREATED_DATE',"EXPIRATION_DATE"]].apply(pd.to_datetime)
        newdf1["EXPIRATION_DATE"] = newdf1["EXPIRATION_DATE"].dt.strftime("%m/%d/%Y")
        newdf1['CREATED_DATE']=newdf1['CREATED_DATE'].dt.strftime("%m/%d/%Y")
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","Payment_Amount","Transaction ID","USER_NAME","EMAIL_ID","CREATED_DATE","EXPIRATION_DATE","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())
    elif date1=="All":
        date3="2017-01-01"
        newdf1=payment_df1[(payment_df1.Last_Payment_Date >= date3) & (payment_df1.Last_Payment_Date <= d2)& (payment_df1.MODE_OF_PAYMENT == type)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1[['Last_Payment_Date','CREATED_DATE',"EXPIRATION_DATE"]] = newdf1[['Last_Payment_Date','CREATED_DATE',"EXPIRATION_DATE"]].apply(pd.to_datetime)
        newdf1["EXPIRATION_DATE"] = newdf1["EXPIRATION_DATE"].dt.strftime("%m/%d/%Y")
        newdf1['CREATED_DATE']=newdf1['CREATED_DATE'].dt.strftime("%m/%d/%Y")
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","Payment_Amount","Transaction ID","USER_NAME","EMAIL_ID","CREATED_DATE","EXPIRATION_DATE","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())
    elif date1=="30":
        date2=d1- timedelta(days=30)
        date3=date2.strftime("%Y-%m-%d")
        newdf1=payment_df1[(payment_df1.Last_Payment_Date >= date3) & (payment_df1.Last_Payment_Date <= d2)& (payment_df1.MODE_OF_PAYMENT == type)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1[['Last_Payment_Date','CREATED_DATE',"EXPIRATION_DATE"]] = newdf1[['Last_Payment_Date','CREATED_DATE',"EXPIRATION_DATE"]].apply(pd.to_datetime)
        newdf1["EXPIRATION_DATE"] = newdf1["EXPIRATION_DATE"].dt.strftime("%m/%d/%Y")
        newdf1['CREATED_DATE']=newdf1['CREATED_DATE'].dt.strftime("%m/%d/%Y")
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","Payment_Amount","Transaction ID","USER_NAME","EMAIL_ID","CREATED_DATE","EXPIRATION_DATE","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())
    elif date1=="60":
        date2=d1- timedelta(days=60)
        date3=date2.strftime("%Y-%m-%d")
        newdf1=payment_df1[(payment_df1.Last_Payment_Date >= date3) & (payment_df1.Last_Payment_Date <= d2)& (payment_df1.MODE_OF_PAYMENT == type)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1[['Last_Payment_Date','CREATED_DATE',"EXPIRATION_DATE"]] = newdf1[['Last_Payment_Date','CREATED_DATE',"EXPIRATION_DATE"]].apply(pd.to_datetime)
        newdf1["EXPIRATION_DATE"] = newdf1["EXPIRATION_DATE"].dt.strftime("%m/%d/%Y")
        newdf1['CREATED_DATE']=newdf1['CREATED_DATE'].dt.strftime("%m/%d/%Y")
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","Payment_Amount","Transaction ID","USER_NAME","EMAIL_ID","CREATED_DATE","EXPIRATION_DATE","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())
    elif date1=="90":
        date2=d1- timedelta(days=90)
        date3=date2.strftime("%Y-%m-%d")
        newdf1=payment_df1[(payment_df1.Last_Payment_Date >= date3) & (payment_df1.Last_Payment_Date <= d2)& (payment_df1.MODE_OF_PAYMENT == type)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1[['Last_Payment_Date','CREATED_DATE',"EXPIRATION_DATE"]] = newdf1[['Last_Payment_Date','CREATED_DATE',"EXPIRATION_DATE"]].apply(pd.to_datetime)
        newdf1["EXPIRATION_DATE"] = newdf1["EXPIRATION_DATE"].dt.strftime("%m/%d/%Y")
        newdf1['CREATED_DATE']=newdf1['CREATED_DATE'].dt.strftime("%m/%d/%Y")
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","Payment_Amount","Transaction ID","USER_NAME","EMAIL_ID","CREATED_DATE","EXPIRATION_DATE","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())

@app.route('/Tran_detail_table/<dates>/<type>')
def TRANSACTION_DETAIL_TABLE(dates,type):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    dfdb = DataFrame(list(db.subscription_master.aggregate([
        {"$match":{
            "USER_ID.IS_BLOCKED" :{"$ne": "Y"},
            "USER_ID.IS_DISABLED" :{"$ne": "Y"},
            "USER_ID.INCOMPLETE_SIGNUP" : {"$ne": "Y"},
    #         "USER_ID.DEVICE_USED" : {'$regex' : 'Webapp', '$options' : 'i'},
            "MODE_OF_PAYMENT" :{'$regex' : 'later', '$options' : 'i'},
    #         "LAST_PAYMENT_AMOUNT" :{'$gt' :100},
            "$and":[
            {"USER_ID.EMAIL_ID" :{"$not": {'$regex' : 'test', '$options' : 'i'}}},
            {"USER_ID.EMAIL_ID" :{"$not": {'$regex' : '1gen', '$options' : 'i'}}},
            {"USER_ID.USER_NAME" :{"$not": {'$regex' : 'test', '$options' : 'i'}}},
                {"USER_ID.USER_NAME" :{"$not": {'$regex' : '1gen', '$options' : 'i'}}}
            ]}},
        {"$project":{"_id":1,"USER_ID":"$USER_ID._id","EMAIL_ID":"$USER_ID.EMAIL_ID","NAME":"$USER_ID.USER_NAME","CREATED_DATE": { "$dateToString": { "format": "%Y-%m-%d", "date": "$USER_ID.CREATED_DATE"}},
            "SUBSCRIPTION_EXPIRE_DATE" : { "$dateToString": { "format": "%Y-%m-%d", "date": "$SUBSCRIPTION_EXPIRE_DATE" } },
            "MODE_OF_PAYMENT" :1,"LAST_PAYMENT_AMOUNT":1,"Last_Payment_Date": { "$dateToString": { "format": "%Y-%m-%d", "date": "$LAST_PAYMENT_DATE"}}}},
        ]))).fillna("NO INFO")
    payment_df1= dfdb[["MODE_OF_PAYMENT","Last_Payment_Date","LAST_PAYMENT_AMOUNT","NAME","EMAIL_ID","CREATED_DATE","SUBSCRIPTION_EXPIRE_DATE","_id","USER_ID"]]
    today = date.today()
    d1 = today.strftime("%Y-%m-%d")
    d1 =  pd.to_datetime(d1)
    d2=d1.strftime("%Y-%m-%d")
    date1=dates
    if date1=="All" and type=="All":
        date3="2017-01-01"
        newdf1=payment_df1[(payment_df1.Last_Payment_Date <= d2)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1[['Last_Payment_Date','CREATED_DATE','SUBSCRIPTION_EXPIRE_DATE']] = newdf1[['Last_Payment_Date','CREATED_DATE','SUBSCRIPTION_EXPIRE_DATE']].apply(pd.to_datetime)
        newdf1['SUBSCRIPTION_EXPIRE_DATE'] = newdf1['SUBSCRIPTION_EXPIRE_DATE'].dt.strftime("%m/%d/%Y")
        newdf1['CREATED_DATE']=newdf1['CREATED_DATE'].dt.strftime("%m/%d/%Y")
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","LAST_PAYMENT_AMOUNT","NAME","EMAIL_ID","CREATED_DATE","SUBSCRIPTION_EXPIRE_DATE","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())
    elif date1=="30"and type=="All":
        date2=d1- timedelta(days=30)
        date3=date2.strftime("%Y-%m-%d")
        newdf1=payment_df1[(payment_df1.Last_Payment_Date >= date3) & (payment_df1.Last_Payment_Date <= d2)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1[['Last_Payment_Date','CREATED_DATE','SUBSCRIPTION_EXPIRE_DATE']] = newdf1[['Last_Payment_Date','CREATED_DATE','SUBSCRIPTION_EXPIRE_DATE']].apply(pd.to_datetime)
        newdf1['SUBSCRIPTION_EXPIRE_DATE'] = newdf1['SUBSCRIPTION_EXPIRE_DATE'].dt.strftime("%m/%d/%Y")
        newdf1['CREATED_DATE']=newdf1['CREATED_DATE'].dt.strftime("%m/%d/%Y")
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","LAST_PAYMENT_AMOUNT","NAME","EMAIL_ID","CREATED_DATE","SUBSCRIPTION_EXPIRE_DATE","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())
    elif date1=="60" and type=="All":
        date2=d1- timedelta(days=60)
        date3=date2.strftime("%Y-%m-%d")
        newdf1=payment_df1[(payment_df1.Last_Payment_Date >= date3) & (payment_df1.Last_Payment_Date <= d2)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1[['Last_Payment_Date','CREATED_DATE','SUBSCRIPTION_EXPIRE_DATE']] = newdf1[['Last_Payment_Date','CREATED_DATE','SUBSCRIPTION_EXPIRE_DATE']].apply(pd.to_datetime)
        newdf1['SUBSCRIPTION_EXPIRE_DATE'] = newdf1['SUBSCRIPTION_EXPIRE_DATE'].dt.strftime("%m/%d/%Y")
        newdf1['CREATED_DATE']=newdf1['CREATED_DATE'].dt.strftime("%m/%d/%Y")
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","LAST_PAYMENT_AMOUNT","NAME","EMAIL_ID","CREATED_DATE","SUBSCRIPTION_EXPIRE_DATE","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())
    elif date1=="90" and type=="All":
        date2=d1- timedelta(days=90)
        date3=date2.strftime("%Y-%m-%d")
        newdf1=payment_df1[(payment_df1.Last_Payment_Date >= date3) & (payment_df1.Last_Payment_Date <= d2)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1[['Last_Payment_Date','CREATED_DATE','SUBSCRIPTION_EXPIRE_DATE']] = newdf1[['Last_Payment_Date','CREATED_DATE','SUBSCRIPTION_EXPIRE_DATE']].apply(pd.to_datetime)
        newdf1['SUBSCRIPTION_EXPIRE_DATE'] = newdf1['SUBSCRIPTION_EXPIRE_DATE'].dt.strftime("%m/%d/%Y")
        newdf1['CREATED_DATE']=newdf1['CREATED_DATE'].dt.strftime("%m/%d/%Y")
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","LAST_PAYMENT_AMOUNT","NAME","EMAIL_ID","CREATED_DATE","SUBSCRIPTION_EXPIRE_DATE","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())
    elif date1=="All":
        date3="2017-01-01"
        newdf1=payment_df1[(payment_df1.Last_Payment_Date >= date3) & (payment_df1.Last_Payment_Date <= d2)& (payment_df1.MODE_OF_PAYMENT == type)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1[['Last_Payment_Date','CREATED_DATE','SUBSCRIPTION_EXPIRE_DATE']] = newdf1[['Last_Payment_Date','CREATED_DATE','SUBSCRIPTION_EXPIRE_DATE']].apply(pd.to_datetime)
        newdf1['SUBSCRIPTION_EXPIRE_DATE'] = newdf1['SUBSCRIPTION_EXPIRE_DATE'].dt.strftime("%m/%d/%Y")
        newdf1['CREATED_DATE']=newdf1['CREATED_DATE'].dt.strftime("%m/%d/%Y")
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","LAST_PAYMENT_AMOUNT","NAME","EMAIL_ID","CREATED_DATE","SUBSCRIPTION_EXPIRE_DATE","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())
    elif date1=="30":
        date2=d1- timedelta(days=30)
        date3=date2.strftime("%Y-%m-%d")
        newdf1=payment_df1[(payment_df1.Last_Payment_Date >= date3) & (payment_df1.Last_Payment_Date <= d2)& (payment_df1.MODE_OF_PAYMENT == type)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1[['Last_Payment_Date','CREATED_DATE','SUBSCRIPTION_EXPIRE_DATE']] = newdf1[['Last_Payment_Date','CREATED_DATE','SUBSCRIPTION_EXPIRE_DATE']].apply(pd.to_datetime)
        newdf1['SUBSCRIPTION_EXPIRE_DATE'] = newdf1['SUBSCRIPTION_EXPIRE_DATE'].dt.strftime("%m/%d/%Y")
        newdf1['CREATED_DATE']=newdf1['CREATED_DATE'].dt.strftime("%m/%d/%Y")
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","LAST_PAYMENT_AMOUNT","NAME","EMAIL_ID","CREATED_DATE","SUBSCRIPTION_EXPIRE_DATE","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())
    elif date1=="60":
        date2=d1- timedelta(days=60)
        date3=date2.strftime("%Y-%m-%d")
        newdf1=payment_df1[(payment_df1.Last_Payment_Date >= date3) & (payment_df1.Last_Payment_Date <= d2)& (payment_df1.MODE_OF_PAYMENT == type)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1[['Last_Payment_Date','CREATED_DATE','SUBSCRIPTION_EXPIRE_DATE']] = newdf1[['Last_Payment_Date','CREATED_DATE','SUBSCRIPTION_EXPIRE_DATE']].apply(pd.to_datetime)
        newdf1['SUBSCRIPTION_EXPIRE_DATE'] = newdf1['SUBSCRIPTION_EXPIRE_DATE'].dt.strftime("%m/%d/%Y")
        newdf1['CREATED_DATE']=newdf1['CREATED_DATE'].dt.strftime("%m/%d/%Y")
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","LAST_PAYMENT_AMOUNT","NAME","EMAIL_ID","CREATED_DATE","SUBSCRIPTION_EXPIRE_DATE","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())
    elif date1=="90":
        date2=d1- timedelta(days=90)
        date3=date2.strftime("%Y-%m-%d")
        newdf1=payment_df1[(payment_df1.Last_Payment_Date >= date3) & (payment_df1.Last_Payment_Date <= d2)& (payment_df1.MODE_OF_PAYMENT == type)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1[['Last_Payment_Date','CREATED_DATE','SUBSCRIPTION_EXPIRE_DATE']] = newdf1[['Last_Payment_Date','CREATED_DATE','SUBSCRIPTION_EXPIRE_DATE']].apply(pd.to_datetime)
        newdf1['SUBSCRIPTION_EXPIRE_DATE'] = newdf1['SUBSCRIPTION_EXPIRE_DATE'].dt.strftime("%m/%d/%Y")
        newdf1['CREATED_DATE']=newdf1['CREATED_DATE'].dt.strftime("%m/%d/%Y")
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","LAST_PAYMENT_AMOUNT","NAME","EMAIL_ID","CREATED_DATE","SUBSCRIPTION_EXPIRE_DATE","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())

@app.route('/Don_detail_table/<dates>/<type>')
def DONATION_DETAIL_TABLE(dates,type):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    payment_df1 = DataFrame(list(db.campaign_payment.aggregate([
        {"$match":{
            "USER_ID.IS_BLOCKED" :{"$ne": "Y"},
            "USER_ID.IS_DISABLED" :{"$ne": "Y"},
            "USER_ID.INCOMPLETE_SIGNUP" : {"$ne": "Y"},
            "IS_PAYMENT_COMPLETED" : "Y",
            "$and":[
            {"USER_ID.EMAIL_ID" :{"$not": {'$regex' : 'test', '$options' : 'i'}}},
            {"USER_ID.EMAIL_ID" :{"$not": {'$regex' : '1gen', '$options' : 'i'}}},
            {"USER_ID.USER_NAME" :{"$not": {'$regex' : 'test', '$options' : 'i'}}},
                {"USER_ID.USER_NAME" :{"$not": {'$regex' : '1gen', '$options' : 'i'}}}
            ]}},
        {"$project":{"_id":1,"USER_ID":"$CONTRIBUTION_ID._id","EMAIL_ID":"$CONTRIBUTION_ID.EMAIL","NAME":"$CONTRIBUTION_ID.FIRST_NAME"
                     ,"SQUARE":"$SQUARE_TRX_ID",
                     "APPLE":"$APPLE_TRX_ID","GOOGLE":"$GOOGLE_TRX_ID","PAYPAL":"$PAYPAL_TRX_ID",
            "MODE_OF_PAYMENT" :"$PAYMENT_TYPE","Payment_Amount":"$CONTRIBUTION_ID.AMOUNT","Last_Payment_Date": { "$dateToString": { "format": "%Y-%m-%d", "date": "$CREATED_DATE"}}}},
        ]))).fillna("NO INFO")
    if 'APPLE' not in payment_df1.columns:
        payment_df1["APPLE"]="NO INFO"
    if 'GOOGLE' not in payment_df1.columns:
        payment_df1["GOOGLE"]="NO INFO"


    payment_df1['MODE_OF_PAYMENT'] = payment_df1['MODE_OF_PAYMENT'].str.upper()
    payment_df1['MODE_OF_PAYMENT'] = payment_df1['MODE_OF_PAYMENT'].str.replace("SQUAREPAYMENT", "SQUARE PAYMENT")
    payment_df1["Transaction ID"]=payment_df1["SQUARE"]+payment_df1["APPLE"]+payment_df1["GOOGLE"]+payment_df1["PAYPAL"]
    spec_chars = ["NO INFO"]
    for char in spec_chars:
        payment_df1["Transaction ID"] = payment_df1["Transaction ID"].str.replace(char, '')
    payment_df1["Transaction ID"].replace('', np.nan, inplace=True)
    payment_df1["Transaction ID"].fillna(value="NO INFO",inplace=True)
    today = date.today()
    d1 = today.strftime("%Y-%m-%d")
    d1 =  pd.to_datetime(d1)
    d2=d1.strftime("%Y-%m-%d")
    date1=dates
    if date1=="All" and type=="All":
        date3="2017-01-01"
        newdf1=payment_df1[(payment_df1.Last_Payment_Date <= d2)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1["Last_Payment_Date"] =  pd.to_datetime(newdf1["Last_Payment_Date"])
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","Payment_Amount","Transaction ID","NAME","EMAIL_ID","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())
    elif date1=="30"and type=="All":
        date2=d1- timedelta(days=30)
        date3=date2.strftime("%Y-%m-%d")
        newdf1=payment_df1[(payment_df1.Last_Payment_Date >= date3) & (payment_df1.Last_Payment_Date <= d2)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1["Last_Payment_Date"] =  pd.to_datetime(newdf1["Last_Payment_Date"])
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","Payment_Amount","Transaction ID","NAME","EMAIL_ID","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())
    elif date1=="60" and type=="All":
        date2=d1- timedelta(days=60)
        date3=date2.strftime("%Y-%m-%d")
        newdf1=payment_df1[(payment_df1.Last_Payment_Date >= date3) & (payment_df1.Last_Payment_Date <= d2)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1["Last_Payment_Date"] =  pd.to_datetime(newdf1["Last_Payment_Date"])
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","Payment_Amount","Transaction ID","NAME","EMAIL_ID","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())
    elif date1=="90" and type=="All":
        date2=d1- timedelta(days=90)
        date3=date2.strftime("%Y-%m-%d")
        newdf1=payment_df1[(payment_df1.Last_Payment_Date >= date3) & (payment_df1.Last_Payment_Date <= d2)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1["Last_Payment_Date"] =  pd.to_datetime(newdf1["Last_Payment_Date"])
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","Payment_Amount","Transaction ID","NAME","EMAIL_ID","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())
    elif date1=="All":
        date3="2017-01-01"
        newdf1=payment_df1[(payment_df1.Last_Payment_Date >= date3) & (payment_df1.Last_Payment_Date <= d2)& (payment_df1.MODE_OF_PAYMENT == type)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1["Last_Payment_Date"] =  pd.to_datetime(newdf1["Last_Payment_Date"])
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","Payment_Amount","Transaction ID","NAME","EMAIL_ID","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())
    elif date1=="30":
        date2=d1- timedelta(days=30)
        date3=date2.strftime("%Y-%m-%d")
        newdf1=payment_df1[(payment_df1.Last_Payment_Date >= date3) & (payment_df1.Last_Payment_Date <= d2)& (payment_df1.MODE_OF_PAYMENT == type)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1["Last_Payment_Date"] =  pd.to_datetime(newdf1["Last_Payment_Date"])
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","Payment_Amount","Transaction ID","NAME","EMAIL_ID","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())
    elif date1=="60":
        date2=d1- timedelta(days=60)
        date3=date2.strftime("%Y-%m-%d")
        newdf1=payment_df1[(payment_df1.Last_Payment_Date >= date3) & (payment_df1.Last_Payment_Date <= d2)& (payment_df1.MODE_OF_PAYMENT == type)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1["Last_Payment_Date"] =  pd.to_datetime(newdf1["Last_Payment_Date"])
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","Payment_Amount","Transaction ID","NAME","EMAIL_ID","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())
    elif date1=="90":
        date2=d1- timedelta(days=90)
        date3=date2.strftime("%Y-%m-%d")
        newdf1=payment_df1[(payment_df1.Last_Payment_Date >= date3) & (payment_df1.Last_Payment_Date <= d2)& (payment_df1.MODE_OF_PAYMENT == type)]
        newdf1.sort_values(by=["Last_Payment_Date"], inplace=True, ascending=False)
        newdf1["Last_Payment_Date"] =  pd.to_datetime(newdf1["Last_Payment_Date"])
        newdf1["Last_Payment_Date"]=newdf1["Last_Payment_Date"].dt.strftime("%m/%d/%Y")
        temp=newdf1[["MODE_OF_PAYMENT","Last_Payment_Date","Payment_Amount","Transaction ID","NAME","EMAIL_ID","_id","USER_ID"]].astype(str)
        return json.dumps(temp.values.tolist())

#Below api has been updated on 27 july2021 

@app.route('/activityfeed/<userid>/<lower>/<upper>')
def user_activity_feed(userid,lower,upper):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass

    collection = db.user_master.aggregate([
    {"$match":
        {"$and":[
        {"_id":{"$in":[ObjectId(""+userid+"")]}},
             {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'IS_DISABLED':{"$ne":'Y'}},
    {'IS_BLOCKED':{"$ne":'Y'}}, 
    {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
    {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}}]}},
    # {"$match":
    # {"$and":[{'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
    # {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}]}},
    {"$project":{"_id":0,"USER_ID":"$_id","ID":"$schoolId._id","DID":"$DISTRICT_ID._id",
                 "school_name":"$schoolId.NAME","USER_NAME":"$USER_NAME","email_id":"$EMAIL_ID",
                 "district_name":"$DISTRICT_ID.DISTRICT_NAME",'district_admin':'$IS_DISTRICT_ADMIN'}}

    ])
    df= DataFrame(list(collection)).fillna(0)
    print(df)
    
    # query for program_audio
    collectionpa = db.programs_audio.aggregate([
        {"$project":{"_id":0,"program_name":"$AUDIO_TITLE","NARRATOR":"$NARRATOR_ID.NARRATOR_NAME","IMAGE_URL":1}}

        ])
    dfpa= DataFrame(list(collectionpa)).fillna(0)
#     print(dfpa,'dfpa')
    
    if df.empty == True:
        temp="NO INFO"
        return json.dumps({'data':temp})
    else:
        user_email=df["email_id"]
    ####
    if 'district_admin' not in df.columns:
        df['district_admin']=0

    if df['district_admin'][0]=='Y':
        user_email=df["email_id"]

        if 'DID' not in list(df.columns):
            temp="NO INFO"
            return json.dumps({'data':temp})
        else:
            DISTRICT_ID=df["DID"].tolist()
            user_email=df["email_id"]

            collectionTU = db.user_master.aggregate([
            {"$match":
                {"$and":[
                {"DISTRICT_ID._id":{"$in":DISTRICT_ID}},
                    {"EMAIL_ID":{"$ne":user_email[0]}},
                {'IS_DISABLED':{"$ne":'Y'}},
            {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
            {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}}]}},
            # {"$match":
            # {"$and":[{'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
            # {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}]}},
            {"$project":{"_id":0,"USER_ID":"$_id","USER_NAME":"$USER_NAME","email_id":"$EMAIL_ID"}}

            ])
            dfTU= DataFrame(list(collectionTU)).fillna(0)

            if dfTU.empty == True:
                temp="NO INFO"
            else:
                EMAIL_list=dfTU["email_id"].tolist()
                USER_ID_list=dfTU["USER_ID"].tolist()
                2##########
                collectionTU2 = db.user_master.aggregate([
                {"$match":
                    {"$and":[
                    {"DISTRICT_ID._id":{"$in":DISTRICT_ID}},
                    {'IS_DISABLED':{"$ne":'Y'}},
                {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}}]}},
                # {"$match":
                # {"$and":[{'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
                # {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}]}},
                {"$project":{"_id":0,"USER_ID":"$_id","USER_NAME":"$USER_NAME","email_id":"$EMAIL_ID"}}

                ])
                dfTU2= DataFrame(list(collectionTU2)).fillna(0)
                EMAIL_list1=dfTU2["email_id"].tolist()
                ##########################Practice_info##################################
                collection1 = db.audio_track_master.aggregate([{"$match":{
                         '$and':[ {"USER_ID.EMAIL_ID":{"$in":EMAIL_list}},
                                #  { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                #    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                #      {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                          {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                          {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                #           {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                          {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                          {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                        #   {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},
        #                  {'MODIFIED_DATE':{'$gte':Ddate}}       
                          ]}},
                         {"$project":{"USER_ID":'$USER_ID._id',"PROGRAM":"$PROGRAM_AUDIO_ID._id","program_name":"$PROGRAM_AUDIO_ID.AUDIO_TITLE",
                                     "NARRATOR":"$PROGRAM_AUDIO_ID.NARRATEDBY",'Last_Prac_Date':'$MODIFIED_DATE',"DISTRICT_NAME":"$DISTRICT_ID.DISTRICT_NAME",
                                     "USER_NAME":"$USER_ID.USER_NAME","email_id":"$USER_ID.EMAIL_ID","CURSOR_END":'$CURSOR_END',
                                      "cursorStart":'$cursorStart'}},
                          {'$group':{
                              '_id':{"USER_ID":'$USER_ID',"PROGRAM":"$PROGRAM"},
                              "program_name":{'$first':"$program_name"},
                              "NARRATOR":{'$first':"$NARRATOR"},
                              'Last_Prac_Date':{'$max':'$Last_Prac_Date'},
                              "DISTRICT_NAME":{'$first':"$DISTRICT_NAME"},
                             "USER_NAME":{'$first':"$USER_NAME"},
                             "email_id":{'$first':"$email_id"},
                              'Practice_Sessions':{'$sum':1},
                              'Mindful_Minutes':{'$sum':{'$round':
                                  [{'$divide':[{'$subtract':
                                      ['$CURSOR_END','$cursorStart']},60]},0]}}  
                              }},
                         {'$project':{'_id':0,
                             'USER_ID':'$_id.USER_ID',
                            "program_name":"$program_name",
                              "NARRATOR":"$NARRATOR",
                             "DISTRICT_NAME":"$DISTRICT_NAME",
                             "USER_NAME":"$USER_NAME",
                             "email_id":"$email_id",
                             'Last_Practice_Date':{ "$dateToString": { "format": "%Y-%m-%d", "date": '$Last_Prac_Date'}},
                             'Practice_Sessions':'$Practice_Sessions',
                             'Mindful_Minutes':'$Mindful_Minutes'
                             }
                             },
                             { "$sort" : { 'Last_Practice_Date' : -1}}
                                                              ])
                df1= DataFrame(list(collection1)).fillna(0)
                print(df1)
                if df1.empty == True:
                    practice_detail="NO INFO"
                else:
                    df11=pd.merge(dfpa,df1,on=["program_name","NARRATOR"],how="right")
                    practice_detail=df11[["USER_NAME","program_name","NARRATOR","Last_Practice_Date","IMAGE_URL"]]
    #                     [int(lower):int(upper)].values.tolist()
                    practice_detail=practice_detail[(practice_detail['Last_Practice_Date'] >= lower) & 
                                (practice_detail['Last_Practice_Date'] < upper)].values.tolist()
                ########################Feedback_Rating_detail##############################
                collection2=db.audio_feedback.aggregate([{"$match":{'$and':[
                    {"USER.EMAIL_ID":{"$in":EMAIL_list}},
                        # { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        # {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                        #  {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                          {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                          {'USER.IS_DISABLED':{"$ne":'Y'}}, 
                         ]}},

                         {"$project":{"_id":0, "USER_ID":'$USER._id',"USER_NAME":'$USER.USER_NAME',"EMAIL_ID":'$USER.EMAIL_ID',
                                      'MODIFIED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$MODIFIED_DATE"}}, 
                                      "RATING":'$RATING',"COMMENT":'$COMMENT',
                                      "AUDIO_NAME":"$AUDIO_ID.AUDIO_TITLE","NARRATOR":"$AUDIO_ID.NARRATEDBY"}},
                            #  { "$sort" : { 'MODIFIED_DATE' : -1}}
                            ])
                df2= DataFrame(list(collection2)).fillna(0)
                df2=df2.sort_values(by=['MODIFIED_DATE'],ascending=False).reset_index(drop=True)
                if df2.empty == True:
                    feedback_detail="NO INFO"
                else:
                    feedback_detail=df2[["USER_NAME","RATING","COMMENT","AUDIO_NAME","NARRATOR","MODIFIED_DATE"]]
    #                     [int(lower):int(upper)].values.tolist()
                    feedback_detail=feedback_detail[(feedback_detail['MODIFIED_DATE'] >= lower) & 
                                (feedback_detail['MODIFIED_DATE'] < upper)].values.tolist()
                ########################Comment_detail##############################
                collection3=db.story_comments.aggregate([{"$match":{'$and':[
                            {"EMAIL":{"$in":EMAIL_list}},
                            {'COMMENT_TEXT':{'$ne': " "}},
                            {'COMMENT_TEXT':{'$ne': ""}},
                            {'COMMENT_TEXT':{'$exists':1}},
        #                     {'CREATED_DATE':{'$gte':Ddate}}  
                            ]}},

                         {"$project":{"_id":0,"EMAIL":1,'CREATED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$CREATED_DATE"}},"COMMENT_TEXT":1}}
                                                        ,
                             { "$sort" : { 'CREATED_DATE' : -1}}])
                df3= DataFrame(list(collection3)).fillna(0)
                if df3.empty == True:
                    comments_detail="NO INFO"
                else:
                    df3=pd.merge(df3,dfTU,how="left",left_on="EMAIL",right_on="email_id")
                    comments_detail=df3[["USER_NAME","COMMENT_TEXT",'CREATED_DATE']]
    #                     [int(lower):int(upper)].values.tolist()
                    comments_detail=comments_detail[(comments_detail['CREATED_DATE'] >= lower) & 
                                (comments_detail['CREATED_DATE'] < upper)].values.tolist()
                #################teacher_signup#####################
                collection4 = db.user_master.aggregate([
                {"$match":
                    {"$and":[
                    {"DISTRICT_ID._id":{"$in":DISTRICT_ID}},
                         {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                    {'IS_DISABLED':{"$ne":'Y'}},
                {'IS_BLOCKED':{"$ne":'Y'}}, 
                {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
        #         {'CREATED_DATE':{'$gte':Ddate}},          
                {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}}]}},
                # {"$match":
                # {"$and":[{'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
                # {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}]}},
                {"$project":{"_id":0,"USER_ID":"$_id","ID":"$DISTRICT_ID._id","USER_NAME":"$USER_NAME",
                             'CREATED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$CREATED_DATE"}},
                            "email_id":"$EMAIL_ID"}},
                             { "$sort" : { 'CREATED_DATE' : -1}}

                ])
                df5= DataFrame(list(collection4)).fillna(0)
                if df5.empty == True:
                    teacher_signup="NO INFO"
                else:
                    teacher_signup=df5[["USER_NAME",'CREATED_DATE']]
    #                     [int(lower):int(upper)].values.tolist()
                    teacher_signup=teacher_signup[(teacher_signup['CREATED_DATE'] >= lower) & 
                                (teacher_signup['CREATED_DATE'] < upper)].values.tolist()
                #################parent_signup#####################
                collection5 = db.user_master.aggregate([
                {"$match":
                    {"$and":[
                    {"DISTRICT_ID._id":{"$in":DISTRICT_ID}},
                         {'ROLE_ID._id':{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                    {'IS_DISABLED':{"$ne":'Y'}},
                {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
        #         {'CREATED_DATE':{'$gte':Ddate}},          
                {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}}]}},
                # {"$match":
                # {"$and":[{'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
                # {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}]}},
                {"$project":{"_id":0,"USER_ID":"$_id","ID":"$DISTRICT_ID._id","USER_NAME":"$USER_NAME",
                             'CREATED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$CREATED_DATE"}},
                            "email_id":"$EMAIL_ID"}},
                             { "$sort" : { 'CREATED_DATE' : -1}}

                ])
                df6= DataFrame(list(collection5)).fillna(0)
                if df6.empty == True:
                    parent_signup="NO INFO"
                else:
                    parent_signup=df6[["USER_NAME",'CREATED_DATE']]
    #                     [int(lower):int(upper)].values.tolist()
                    parent_signup=parent_signup[(parent_signup['CREATED_DATE'] >= lower) & 
                                (parent_signup['CREATED_DATE'] < upper)].values.tolist()
                ################tunein_signup####################
                collection6 = db.tune_in_master.aggregate([
                       {"$match":{
                                 '$and':[
                                    #  { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                    #        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                    #          {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                                          {"USER_ID.EMAIL_ID":{"$in":EMAIL_list1}},
                                  {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                                  {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
        #                         {'CREATED_DATE':{'$gte':Ddate}}, 
                                {'IS_OPTED_OUT':"N"},
                                  {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                                  {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                                #   {'EMAIL':{"$not":{"$regex":"test",'$options':'i'}}},
                                #   {'EMAIL':{"$not":{"$regex":"1gen",'$options':'i'}}}
                                  ]}},
                    {"$group":{"_id":{"NAME":"$NAME","EMAIL":"$EMAIL",'CREATED_DATE':'$CREATED_DATE'},
                              'IS_OPTED_OUT':{"$first":'$IS_OPTED_OUT'},
                              'DISTRICT_NAME':{"$first":'$DISTRICT_ID.DISTRICT_NAME'}}}
                                      ,{'$project':{
                                          '_id':1,
                                          'IS_OPTED_OUT':1,
                                          'Parent_EMAIL':"$_id.EMAIL",
                                          'CREATED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$_id.CREATED_DATE"}},
                                          "Parent_NAME":"$_id.NAME",
                                          'DISTRICT_NAME':'$DISTRICT_NAME',
                                          }
                                          },
                             { "$sort" : { 'CREATED_DATE' : -1}}
                        ])
                df7= DataFrame(list(collection6)).fillna(0)
                if df7.empty == True:
                    Tunein_email=["no_email"]
                else:
                    Tunein_email=df7["Parent_EMAIL"].tolist()
                if df7.empty == True:
                    tunein_signup="NO INFO"
                else:
                    if 'Parent_NAME' not in df7.columns:
                        df7["Parent_NAME"]="Parent"
                        tunein_signup=df7[["Parent_NAME",'CREATED_DATE']]
    #                         [int(lower):int(upper)].values.tolist()
                        tunein_signup=tunein_signup[(tunein_signup['CREATED_DATE'] >= lower) & 
                                    (tunein_signup['CREATED_DATE'] < upper)].values.tolist()
                    else:
                        df7.loc[df7["Parent_NAME"] == 0, "Parent_NAME"] = "Parent"
                        tunein_signup=df7[["Parent_NAME",'CREATED_DATE']]
    #                         [int(lower):int(upper)].values.tolist()
                        tunein_signup=tunein_signup[(tunein_signup['CREATED_DATE'] >= lower) & 
                                    (tunein_signup['CREATED_DATE'] < upper)].values.tolist()
                ################tunein_audio_track####################
                collection7 = db.tune_in_audio_track_detail.aggregate([{"$match":{
                         '$and':[ {"USER_ID.EMAIL_ID":{"$in":EMAIL_list1}},
                                #  { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                #    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                #      {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                          {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                          {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                          {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                          {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                          {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},
        #                  {'CREATED_DATE':{'$gte':Ddate}}       
                          ]}},
                            {"$project":{"INVITEE_EMAIL":'$INVITEE_EMAIL',"PROGRAM":"$PROGRAM_AUDIO_ID._id","program_name":"$PROGRAM_AUDIO_ID.AUDIO_TITLE",
                            "NARRATOR":"$PROGRAM_AUDIO_ID.NARRATEDBY",'Last_Prac_Date':'$CREATED_DATE',"DISTRICT_NAME":"$DISTRICT_ID.DISTRICT_NAME",
                            "USER_NAME":"$USER_ID.USER_NAME","CURSOR_END":'$CURSOR_END',
                            "CURSOR_START":'$CURSOR_START'}},
                          {'$group':{
                              '_id':{"INVITEE_EMAIL":'$INVITEE_EMAIL',"PROGRAM":"$PROGRAM"},
                              "program_name":{'$first':"$program_name"},
                              "NARRATOR":{'$first':"$NARRATOR"},
                              'Last_Prac_Date':{'$max':'$Last_Prac_Date'},
                             "USER_NAME":{'$first':"$USER_NAME"},
                              'Practice_Sessions':{'$sum':1},
                              'Mindful_Minutes':{'$sum':{'$round':
                                  [{'$divide':[{'$subtract':
                                      ['$CURSOR_END','$CURSOR_START']},60]},0]}}  
                              }},
                         {'$project':{'_id':0,
                             'Parent_Email':'$_id.INVITEE_EMAIL',
                            "program_name":"$program_name",
                              "NARRATOR":"$NARRATOR",
                             "Parent_NAME":"$USER_NAME",
                             'Last_Practice_Date':{ "$dateToString": { "format": "%Y-%m-%d", "date":'$Last_Prac_Date'}},
                             'Practice_Sessions':'$Practice_Sessions',
                             'Mindful_Minutes':'$Mindful_Minutes'
                             }
                             },
                             { "$sort" : {'Last_Practice_Date' : -1}}])
                df8= DataFrame(list(collection7)).fillna(0)
                if df8.empty == True:
                    tunein_audio_track="NO INFO"
                else:
                    if 'Parent_NAME' not in df8.columns:
                        df8["Parent_NAME"]="Parent"
                        df18=pd.merge(dfpa,df8,on=["program_name","NARRATOR"],how="right")
                        tunein_audio_track=df18[["Parent_NAME","program_name","NARRATOR",'Last_Practice_Date',"IMAGE_URL"]]
    #                         [int(lower):int(upper)].values.tolist()
                        tunein_audio_track=tunein_audio_track[(tunein_audio_track['Last_Practice_Date'] >= lower) & 
                                    (tunein_audio_track['Last_Practice_Date'] < upper)].values.tolist()
                    else:
                        df8.loc[df8["Parent_NAME"] == 0, "Parent_NAME"] = "Parent"
                        df18=pd.merge(dfpa,df8,on=["program_name","NARRATOR"],how="right")
                        tunein_audio_track=df18[["Parent_NAME","program_name","NARRATOR",'Last_Practice_Date',"IMAGE_URL"]]
    #                         [int(lower):int(upper)].values.tolist()
                        tunein_audio_track=tunein_audio_track[(tunein_audio_track['Last_Practice_Date'] >= lower) & 
                                    (tunein_audio_track['Last_Practice_Date'] < upper)].values.tolist()

                temp={"practice_detail":practice_detail,"comments_detail":comments_detail,"feedback_detail":feedback_detail,"teacher_signup":teacher_signup,
                     "parent_signup":parent_signup,"tunein_signup":tunein_signup,"tunein_audio_track":tunein_audio_track}
                print(len(practice_detail),len(comments_detail),len(feedback_detail),len(teacher_signup),
                      len(parent_signup),len(tunein_signup),len(tunein_audio_track))
                print('district')
            return json.dumps(temp)
    
    ################################# 
    else:
        
        if 'ID' not in list(df.columns):
            channel=['schoology_master','clever_master']
            cat=[]
            for i in range(len(channel)):
                mycollection = db[channel[i]]
                output = mycollection.find({'USER_ID._id':ObjectId(""+userid+"")})
                df_check= DataFrame(list(output))
#                 print(df_check)
                if df_check.empty:
                    pass        
                else:
                    cat.append(channel[i])

            if len(cat)>0:
                index_value=channel.index(cat[0])

                if index_value==0:
                    channel_userids=db.schoology_master.distinct('USER_ID._id')
                else:
                    channel_userids=db.clever_master.distinct('USER_ID._id')
#                 print(channel_userids,'channel_userids')

                collectionTU = db.user_master.aggregate([

                {"$match":
                    {"$and":[
                    {"_id":{"$in":channel_userids}}, #schoolid removed
                        {"EMAIL_ID":{"$ne":user_email[0]}},
                    {'IS_DISABLED':{"$ne":'Y'}},
                {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}}]}},
                # {"$match":
                # {"$and":[{'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
                # {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}]}},
                {"$project":{"_id":0,"USER_ID":"$_id","USER_NAME":"$USER_NAME","email_id":"$EMAIL_ID"}}

                ])

                dfTU= DataFrame(list(collectionTU)).fillna(0)

                if dfTU.empty == True:
                    temp="NO INFO"
                else:
                    EMAIL_list=dfTU["email_id"].tolist()
                    USER_ID_list=dfTU["USER_ID"].tolist()
                    2##########
                    collectionTU2 = db.user_master.aggregate([
                    {"$match":
                        {"$and":[
                        {"_id":{"$in":channel_userids}},#schoolid removed
                        {'IS_DISABLED':{"$ne":'Y'}},
                    {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                    {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}}]}},
                    # {"$match":
                    # {"$and":[{'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
                    # {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}]}},
                    {"$project":{"_id":0,"USER_ID":"$_id","USER_NAME":"$USER_NAME","email_id":"$EMAIL_ID"}}

                    ])
                    dfTU2= DataFrame(list(collectionTU2)).fillna(0)
                    EMAIL_list1=dfTU2["email_id"].tolist()
                    ##########################Practice_info##################################
                    collection1 = db.audio_track_master.aggregate([{"$match":{
                             '$and':[ {"USER_ID.EMAIL_ID":{"$in":EMAIL_list}},
                                    #  { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                    #    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                    #      {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                              {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                              {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                    #           {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                              {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                            #   {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},
            #                  {'MODIFIED_DATE':{'$gte':Ddate}}       
                              ]}},
                             {"$project":{"USER_ID":'$USER_ID._id',"PROGRAM":"$PROGRAM_AUDIO_ID._id","program_name":"$PROGRAM_AUDIO_ID.AUDIO_TITLE",
                                         "NARRATOR":"$PROGRAM_AUDIO_ID.NARRATEDBY",'Last_Prac_Date':'$MODIFIED_DATE',"school_name":"$USER_ID.schoolId.NAME",
                                         "USER_NAME":"$USER_ID.USER_NAME","email_id":"$USER_ID.EMAIL_ID","CURSOR_END":'$CURSOR_END',
                                          "cursorStart":'$cursorStart'}},
                              {'$group':{
                                  '_id':{"USER_ID":'$USER_ID',"PROGRAM":"$PROGRAM"},
                                  "program_name":{'$first':"$program_name"},
                                  "NARRATOR":{'$first':"$NARRATOR"},
                                  'Last_Prac_Date':{'$max':'$Last_Prac_Date'},
                                  "school_name":{'$first':"$school_name"},
                                 "USER_NAME":{'$first':"$USER_NAME"},
                                 "email_id":{'$first':"$email_id"},
                                  'Practice_Sessions':{'$sum':1},
                                  'Mindful_Minutes':{'$sum':{'$round':
                                      [{'$divide':[{'$subtract':
                                          ['$CURSOR_END','$cursorStart']},60]},0]}}  
                                  }},
                             {'$project':{'_id':0,
                                 'USER_ID':'$_id.USER_ID',
                                "program_name":"$program_name",
                                  "NARRATOR":"$NARRATOR",
                                 "school_name":"$school_name",
                                 "USER_NAME":"$USER_NAME",
                                 "email_id":"$email_id",
                                 'Last_Practice_Date':{ "$dateToString": { "format": "%Y-%m-%d", "date": '$Last_Prac_Date'}},
                                 'Practice_Sessions':'$Practice_Sessions',
                                 'Mindful_Minutes':'$Mindful_Minutes'
                                 }
                                 },
                                 { "$sort" : { 'Last_Practice_Date' : -1}}
                                                                  ])
                    df1= DataFrame(list(collection1)).fillna(0)
                    if df1.empty == True:
                        practice_detail="NO INFO"
                    else:
                        df11=pd.merge(dfpa,df1,on=["program_name","NARRATOR"],how="right")
                        practice_detail=df11[["USER_NAME","program_name","NARRATOR","Last_Practice_Date","IMAGE_URL"]]
        #                     [int(lower):int(upper)].values.tolist()
                        practice_detail=practice_detail[(practice_detail['Last_Practice_Date'] >= lower) & 
                                    (practice_detail['Last_Practice_Date'] < upper)].values.tolist()
                    ########################Feedback_Rating_detail##############################
                    collection2=db.audio_feedback.aggregate([{"$match":{'$and':[
                        {"USER.EMAIL_ID":{"$in":EMAIL_list}},
                            # { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                            # {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                            #  {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                              {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                              {'USER.IS_DISABLED':{"$ne":'Y'}}, 
                             ]}},

                             {"$project":{"_id":0, "USER_ID":'$USER._id',"USER_NAME":'$USER.USER_NAME',"EMAIL_ID":'$USER.EMAIL_ID',
                                          'MODIFIED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$MODIFIED_DATE"}}, 
                                          "RATING":'$RATING',"COMMENT":'$COMMENT',
                                          "AUDIO_NAME":"$AUDIO_ID.AUDIO_TITLE","NARRATOR":"$AUDIO_ID.NARRATEDBY"}},
                                #  { "$sort" : { 'MODIFIED_DATE' : -1}}
                                 ])
                    df2= DataFrame(list(collection2)).fillna(0)
                    df2=df2.sort_values(by=['MODIFIED_DATE'],ascending=False).reset_index(drop=True)
                    if df2.empty == True:
                        feedback_detail="NO INFO"
                    else:
                        feedback_detail=df2[["USER_NAME","RATING","COMMENT","AUDIO_NAME","NARRATOR","MODIFIED_DATE"]]
        #                     [int(lower):int(upper)].values.tolist()
                        feedback_detail=feedback_detail[(feedback_detail['MODIFIED_DATE'] >= lower) & 
                                    (feedback_detail['MODIFIED_DATE'] < upper)].values.tolist()
                    ########################Comment_detail##############################
                    collection3=db.story_comments.aggregate([{"$match":{'$and':[
                                {"EMAIL":{"$in":EMAIL_list}},
                                {'COMMENT_TEXT':{'$ne': " "}},
                                {'COMMENT_TEXT':{'$ne': ""}},
                                {'COMMENT_TEXT':{'$exists':1}},
            #                     {'CREATED_DATE':{'$gte':Ddate}}  
                                ]}},

                             {"$project":{"_id":0,"EMAIL":1,'CREATED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$CREATED_DATE"}},"COMMENT_TEXT":1}}
                                                            ,
                                 { "$sort" : { 'CREATED_DATE' : -1}}])
                    df3= DataFrame(list(collection3)).fillna(0)
                    if df3.empty == True:
                        comments_detail="NO INFO"
                    else:
                        df3=pd.merge(df3,dfTU,how="left",left_on="EMAIL",right_on="email_id")
                        comments_detail=df3[["USER_NAME","COMMENT_TEXT",'CREATED_DATE']]
        #                     [int(lower):int(upper)].values.tolist()
                        comments_detail=comments_detail[(comments_detail['CREATED_DATE'] >= lower) & 
                                    (comments_detail['CREATED_DATE'] < upper)].values.tolist()
                    #################teacher_signup#####################
                    collection4 = db.user_master.aggregate([
                    {"$match":
                        {"$and":[
                        {"_id":{"$in":channel_userids}},#schoolid changed
                             {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                        {'IS_DISABLED':{"$ne":'Y'}},
                    {'IS_BLOCKED':{"$ne":'Y'}}, 
                    {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
            #         {'CREATED_DATE':{'$gte':Ddate}},          
                    {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}}]}},
                    # {"$match":
                    # {"$and":[{'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
                    # {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}]}},
                    {"$project":{"_id":0,"USER_ID":"$_id","ID":"$schoolId._id","USER_NAME":"$USER_NAME",
                                 'CREATED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$CREATED_DATE"}},
                                "email_id":"$EMAIL_ID"}},
                                 { "$sort" : { 'CREATED_DATE' : -1}}

                    ])
                    df5= DataFrame(list(collection4)).fillna(0)
                    if df5.empty == True:
                        teacher_signup="NO INFO"
                    else:
                        teacher_signup=df5[["USER_NAME",'CREATED_DATE']]
        #                     [int(lower):int(upper)].values.tolist()
                        teacher_signup=teacher_signup[(teacher_signup['CREATED_DATE'] >= lower) & 
                                    (teacher_signup['CREATED_DATE'] < upper)].values.tolist()
                    #################parent_signup#####################
                    collection5 = db.user_master.aggregate([
                    {"$match":
                        {"$and":[
                        {"_id":{"$in":channel_userids}},#schoolid changed
                             {'ROLE_ID._id':{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                        {'IS_DISABLED':{"$ne":'Y'}},
                    {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
            #         {'CREATED_DATE':{'$gte':Ddate}},          
                    {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}}]}},
                    # {"$match":
                    # {"$and":[{'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
                    # {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}]}},
                    {"$project":{"_id":0,"USER_ID":"$_id","ID":"$schoolId._id","USER_NAME":"$USER_NAME",
                                 'CREATED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$CREATED_DATE"}},
                                "email_id":"$EMAIL_ID"}},
                                 { "$sort" : { 'CREATED_DATE' : -1}}

                    ])
                    df6= DataFrame(list(collection5)).fillna(0)
                    if df6.empty == True:
                        parent_signup="NO INFO"
                    else:
                        parent_signup=df6[["USER_NAME",'CREATED_DATE']]
        #                     [int(lower):int(upper)].values.tolist()
                        parent_signup=parent_signup[(parent_signup['CREATED_DATE'] >= lower) & 
                                    (parent_signup['CREATED_DATE'] < upper)].values.tolist()
                    ################tunein_signup####################
                    collection6 = db.tune_in_master.aggregate([
                           {"$match":{
                                     '$and':[
                                        #  { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                        #        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                        #          {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                                              {"USER_ID.EMAIL_ID":{"$in":EMAIL_list1}},
                                      {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                                      {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
            #                         {'CREATED_DATE':{'$gte':Ddate}}, 
                                    {'IS_OPTED_OUT':"N"},
                                      {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                                      {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                                    #   {'EMAIL':{"$not":{"$regex":"test",'$options':'i'}}},
                                    #   {'EMAIL':{"$not":{"$regex":"1gen",'$options':'i'}}}
                                      ]}},
                        {"$group":{"_id":{"NAME":"$NAME","EMAIL":"$EMAIL",'CREATED_DATE':'$CREATED_DATE'},
                                  'IS_OPTED_OUT':{"$first":'$IS_OPTED_OUT'},
                                  'school_NAME':{"$first":'$USER_ID.schoolId.NAME'}}}
                                          ,{'$project':{
                                              '_id':1,
                                              'IS_OPTED_OUT':1,
                                              'Parent_EMAIL':"$_id.EMAIL",
                                              'CREATED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$_id.CREATED_DATE"}},
                                              "Parent_NAME":"$_id.NAME",
                                              'school':'$school_NAME',
                                              }
                                              },
                                 { "$sort" : { 'CREATED_DATE' : -1}}
                            ])
                    df7= DataFrame(list(collection6)).fillna(0)
                    if df7.empty == True:
                        Tunein_email=["no_email"]
                    else:
                        Tunein_email=df7["Parent_EMAIL"].tolist()
                    if df7.empty == True:
                        tunein_signup="NO INFO"
                    else:
                        if 'Parent_NAME' not in df7.columns:
                            df7["Parent_NAME"]="Parent"
                            tunein_signup=df7[["Parent_NAME",'CREATED_DATE']]
        #                         [int(lower):int(upper)].values.tolist()
                            tunein_signup=tunein_signup[(tunein_signup['CREATED_DATE'] >= lower) & 
                                        (tunein_signup['CREATED_DATE'] < upper)].values.tolist()
                        else:
                            df7.loc[df7["Parent_NAME"] == 0, "Parent_NAME"] = "Parent"
                            tunein_signup=df7[["Parent_NAME",'CREATED_DATE']]
        #                         [int(lower):int(upper)].values.tolist()
                            tunein_signup=tunein_signup[(tunein_signup['CREATED_DATE'] >= lower) & 
                                        (tunein_signup['CREATED_DATE'] < upper)].values.tolist()
                    ################tunein_audio_track####################
                    collection7 = db.tune_in_audio_track_detail.aggregate([{"$match":{
                             '$and':[ {"USER_ID.EMAIL_ID":{"$in":EMAIL_list1}},
                                    #  { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                    #    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                    #      {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                              {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                              {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                              {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},
            #                  {'CREATED_DATE':{'$gte':Ddate}}       
                              ]}},
                                {"$project":{"INVITEE_EMAIL":'$INVITEE_EMAIL',"PROGRAM":"$PROGRAM_AUDIO_ID._id","program_name":"$PROGRAM_AUDIO_ID.AUDIO_TITLE",
                                "NARRATOR":"$PROGRAM_AUDIO_ID.NARRATEDBY",'Last_Prac_Date':'$CREATED_DATE',"school_name":"$USER_ID.schoolId.NAME",
                                "USER_NAME":"$USER_ID.USER_NAME","CURSOR_END":'$CURSOR_END',
                                "CURSOR_START":'$CURSOR_START'}},
                              {'$group':{
                                  '_id':{"INVITEE_EMAIL":'$INVITEE_EMAIL',"PROGRAM":"$PROGRAM"},
                                  "program_name":{'$first':"$program_name"},
                                  "NARRATOR":{'$first':"$NARRATOR"},
                                  'Last_Prac_Date':{'$max':'$Last_Prac_Date'},
                                 "USER_NAME":{'$first':"$USER_NAME"},
                                  'Practice_Sessions':{'$sum':1},
                                  'Mindful_Minutes':{'$sum':{'$round':
                                      [{'$divide':[{'$subtract':
                                          ['$CURSOR_END','$CURSOR_START']},60]},0]}}  
                                  }},
                             {'$project':{'_id':0,
                                 'Parent_Email':'$_id.INVITEE_EMAIL',
                                "program_name":"$program_name",
                                  "NARRATOR":"$NARRATOR",
                                 "Parent_NAME":"$USER_NAME",
                                 'Last_Practice_Date':{ "$dateToString": { "format": "%Y-%m-%d", "date":'$Last_Prac_Date'}},
                                 'Practice_Sessions':'$Practice_Sessions',
                                 'Mindful_Minutes':'$Mindful_Minutes'
                                 }
                                 },
                                 { "$sort" : {'Last_Practice_Date' : -1}}])
                    df8= DataFrame(list(collection7)).fillna(0)
                    if df8.empty == True:
                        tunein_audio_track="NO INFO"
                    else:
                        if 'Parent_NAME' not in df8.columns:
                            df8["Parent_NAME"]="Parent"
                            df18=pd.merge(dfpa,df8,on=["program_name","NARRATOR"],how="right")
                            tunein_audio_track=df18[["Parent_NAME","program_name","NARRATOR",'Last_Practice_Date',"IMAGE_URL"]]
        #                         [int(lower):int(upper)].values.tolist()
                            tunein_audio_track=tunein_audio_track[(tunein_audio_track['Last_Practice_Date'] >= lower) & 
                                        (tunein_audio_track['Last_Practice_Date'] < upper)].values.tolist()
                        else:
                            df8.loc[df8["Parent_NAME"] == 0, "Parent_NAME"] = "Parent"
                            df18=pd.merge(dfpa,df8,on=["program_name","NARRATOR"],how="right")
                            tunein_audio_track=df18[["Parent_NAME","program_name","NARRATOR",'Last_Practice_Date',"IMAGE_URL"]]
        #                         [int(lower):int(upper)].values.tolist()
                            tunein_audio_track=tunein_audio_track[(tunein_audio_track['Last_Practice_Date'] >= lower) & 
                                        (tunein_audio_track['Last_Practice_Date'] < upper)].values.tolist()
                    temp={"practice_detail":practice_detail,"comments_detail":comments_detail,"feedback_detail":feedback_detail,"teacher_signup":teacher_signup,
                         "parent_signup":parent_signup,"tunein_signup":tunein_signup,"tunein_audio_track":tunein_audio_track}
                    print(len(practice_detail),len(comments_detail),len(feedback_detail),len(teacher_signup),
                              len(parent_signup),len(tunein_signup),len(tunein_audio_track))
                    print('schoology,clever')
                return json.dumps(temp)

            else:
                temp="NO INFO"
                return json.dumps({'data':temp})

        else:
            school_list=df["ID"].tolist()
            user_email=df["email_id"]

            collectionTU = db.user_master.aggregate([
            {"$match":
                {"$and":[
                {"schoolId._id":{"$in":school_list}},
                    {"EMAIL_ID":{"$ne":user_email[0]}},
                {'IS_DISABLED':{"$ne":'Y'}},
            {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
            {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}}]}},
            # {"$match":
            # {"$and":[{'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
            # {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}]}},
            {"$project":{"_id":0,"USER_ID":"$_id","USER_NAME":"$USER_NAME","email_id":"$EMAIL_ID"}}

            ])
            dfTU= DataFrame(list(collectionTU)).fillna(0)

            if dfTU.empty == True:
                temp="NO INFO"
            else:
                EMAIL_list=dfTU["email_id"].tolist()
                print(EMAIL_list)
                USER_ID_list=dfTU["USER_ID"].tolist()
                ##########
                collectionTU2 = db.user_master.aggregate([
                {"$match":
                    {"$and":[
                    {"schoolId._id":{"$in":school_list}},
                    {'IS_DISABLED':{"$ne":'Y'}},
                {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}}]}},
                # {"$match":
                # {"$and":[{'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
                # {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}]}},
                {"$project":{"_id":0,"USER_ID":"$_id","USER_NAME":"$USER_NAME","email_id":"$EMAIL_ID"}}

                ])
                dfTU2= DataFrame(list(collectionTU2)).fillna(0)
                EMAIL_list1=dfTU2["email_id"].tolist()
                ##########################Practice_info##################################
                collection1 = db.audio_track_master.aggregate([{"$match":{
                         '$and':[ {"USER_ID.EMAIL_ID":{"$in":EMAIL_list}},
                                #  { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                #    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                #      {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                          {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                          {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                #           {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                          {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                          {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                        #   {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},
        #                  {'MODIFIED_DATE':{'$gte':Ddate}}       
                          ]}},
                         {"$project":{"USER_ID":'$USER_ID._id',"PROGRAM":"$PROGRAM_AUDIO_ID._id","program_name":"$PROGRAM_AUDIO_ID.AUDIO_TITLE",
                                     "NARRATOR":"$PROGRAM_AUDIO_ID.NARRATEDBY",'Last_Prac_Date':'$MODIFIED_DATE',"school_name":"$USER_ID.schoolId.NAME",
                                     "USER_NAME":"$USER_ID.USER_NAME","email_id":"$USER_ID.EMAIL_ID","CURSOR_END":'$CURSOR_END',
                                      "cursorStart":'$cursorStart'}},
                          {'$group':{
                              '_id':{"USER_ID":'$USER_ID',"PROGRAM":"$PROGRAM"},
                              "program_name":{'$first':"$program_name"},
                              "NARRATOR":{'$first':"$NARRATOR"},
                              'Last_Prac_Date':{'$max':'$Last_Prac_Date'},
                              "school_name":{'$first':"$school_name"},
                             "USER_NAME":{'$first':"$USER_NAME"},
                             "email_id":{'$first':"$email_id"},
                              'Practice_Sessions':{'$sum':1},
                              'Mindful_Minutes':{'$sum':{'$round':
                                  [{'$divide':[{'$subtract':
                                      ['$CURSOR_END','$cursorStart']},60]},0]}}  
                              }},
                         {'$project':{'_id':0,
                             'USER_ID':'$_id.USER_ID',
                            "program_name":"$program_name",
                              "NARRATOR":"$NARRATOR",
                             "school_name":"$school_name",
                             "USER_NAME":"$USER_NAME",
                             "email_id":"$email_id",
                             'Last_Practice_Date':{ "$dateToString": { "format": "%Y-%m-%d", "date": '$Last_Prac_Date'}},
                             'Practice_Sessions':'$Practice_Sessions',
                             'Mindful_Minutes':'$Mindful_Minutes'
                             }
                             },
                             { "$sort" : { 'Last_Practice_Date' : -1}}
                                                              ])
                df1= DataFrame(list(collection1)).fillna(0)
    #             print(df1,'df1')
                if df1.empty == True:
                    practice_detail="NO INFO"
                else:
                    df11=pd.merge(dfpa,df1,on=["program_name","NARRATOR"],how="right")
                    practice_detail=df11[["USER_NAME","program_name","NARRATOR","Last_Practice_Date","IMAGE_URL"]]
        #             [int(lower):int(upper)].values.tolist()
                    practice_detail=practice_detail[(practice_detail['Last_Practice_Date'] >= lower) & 
                                (practice_detail['Last_Practice_Date'] < upper)].values.tolist()
        #             print(practice_detail,'practice_detail')
                ########################Feedback_Rating_detail##############################
                collection2=db.audio_feedback.aggregate([{"$match":{'$and':[
                    {"USER.EMAIL_ID":{"$in":EMAIL_list}},
                        # { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        # {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                        #  {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                          {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                          {'USER.IS_DISABLED':{"$ne":'Y'}}, 
                         ]}},

                         {"$project":{"_id":0, "USER_ID":'$USER._id',"USER_NAME":'$USER.USER_NAME',"EMAIL_ID":'$USER.EMAIL_ID',
                                      'MODIFIED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$MODIFIED_DATE"}}, 
                                      "RATING":'$RATING',"COMMENT":'$COMMENT',
                                      "AUDIO_NAME":"$AUDIO_ID.AUDIO_TITLE","NARRATOR":"$AUDIO_ID.NARRATEDBY"}},
                            #  { "$sort" : { 'MODIFIED_DATE' : -1}}
                             ])
                df2= DataFrame(list(collection2)).fillna(0)
                df2=df2.sort_values(by=['MODIFIED_DATE'],ascending=False).reset_index(drop=True)
                print(df2,'df2')
                if df2.empty == True:
                    feedback_detail="NO INFO"
                    print(feedback_detail,'feedback_detail')
                else:
                    feedback_detail=df2[["USER_NAME","RATING","COMMENT","AUDIO_NAME","NARRATOR","MODIFIED_DATE"]]
    #                     [int(lower):int(upper)].values.tolist()
                    feedback_detail=feedback_detail[(feedback_detail['MODIFIED_DATE'] >= lower) & 
                                (feedback_detail['MODIFIED_DATE'] < upper)].values.tolist()
                    print(feedback_detail,'feedback_detail')
                ########################Comment_detail##############################
                collection3=db.story_comments.aggregate([{"$match":{'$and':[
                            {"EMAIL":{"$in":EMAIL_list}},
                            {'COMMENT_TEXT':{'$ne': " "}},
                            {'COMMENT_TEXT':{'$ne': ""}},
                            {'COMMENT_TEXT':{'$exists':1}},
        #                     {'CREATED_DATE':{'$gte':Ddate}}  
                            ]}},

                         {"$project":{"_id":0,"EMAIL":1,'CREATED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$CREATED_DATE"}},"COMMENT_TEXT":1}}
                                                        ,
                             { "$sort" : { 'CREATED_DATE' : -1}}])
                df3= DataFrame(list(collection3)).fillna(0)
                if df3.empty == True:
                    comments_detail="NO INFO"
                else:
                    df3=pd.merge(df3,dfTU,how="left",left_on="EMAIL",right_on="email_id")
                    comments_detail=df3[["USER_NAME","COMMENT_TEXT",'CREATED_DATE']]
        #                 [int(lower):int(upper)].values.tolist()
                    comments_detail=comments_detail[(comments_detail['CREATED_DATE'] >= lower) & 
                                (comments_detail['CREATED_DATE'] < upper)].values.tolist()
                #################teacher_signup#####################
                collection4 = db.user_master.aggregate([
                {"$match":
                    {"$and":[
                    {"schoolId._id":{"$in":school_list}},
                         {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                    {'IS_DISABLED':{"$ne":'Y'}},
                {'IS_BLOCKED':{"$ne":'Y'}}, 
                {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
        #         {'CREATED_DATE':{'$gte':Ddate}},          
                {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}}]}},
                # {"$match":
                # {"$and":[{'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
                # {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}]}},
                {"$project":{"_id":0,"USER_ID":"$_id","ID":"$schoolId._id","USER_NAME":"$USER_NAME",
                             'CREATED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$CREATED_DATE"}},
                            "email_id":"$EMAIL_ID"}},
                             { "$sort" : { 'CREATED_DATE' : -1}}

                ])
                df5= DataFrame(list(collection4)).fillna(0)
                if df5.empty == True:
                    teacher_signup="NO INFO"
                else:
                    teacher_signup=df5[["USER_NAME",'CREATED_DATE']]
        #                 [int(lower):int(upper)].values.tolist()
                    teacher_signup=teacher_signup[(teacher_signup['CREATED_DATE'] >= lower) & 
                                (teacher_signup['CREATED_DATE'] < upper)].values.tolist()
#                     print(teacher_signup,'teacher_signup')
                #################parent_signup#####################
                collection5 = db.user_master.aggregate([
                {"$match":
                    {"$and":[
                    {"schoolId._id":{"$in":school_list}},
                         {'ROLE_ID._id':{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                    {'IS_DISABLED':{"$ne":'Y'}},
                {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                #         {'CREATED_DATE':{'$gte':Ddate}},          
                {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}}]}},
                # {"$match":
                # {"$and":[{'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
                # {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}]}},
                {"$project":{"_id":0,"USER_ID":"$_id","ID":"$schoolId._id","USER_NAME":"$USER_NAME",
                             'CREATED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$CREATED_DATE"}},
                            "email_id":"$EMAIL_ID"}},
                             { "$sort" : { 'CREATED_DATE' : -1}}

                ])
                df6= DataFrame(list(collection5)).fillna(0)
    #             print(df6)
                if df6.empty == True:
                    parent_signup="NO INFO"
                else:
                    parent_signup=df6[["USER_NAME",'CREATED_DATE']]
                #                 [int(lower):int(upper)].values.tolist()
                    parent_signup=parent_signup[(parent_signup['CREATED_DATE'] >= lower) & 
                                (parent_signup['CREATED_DATE'] < upper)].values.tolist()
#                     print(parent_signup,'parent_signup')
                ################tunein_signup####################
                collection6 = db.tune_in_master.aggregate([
                       {"$match":{
                                 '$and':[
                                    #  { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                    #        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                    #          {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                                          {"USER_ID.EMAIL_ID":{"$in":EMAIL_list1}},
                                  {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                                  {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
        #                         {'CREATED_DATE':{'$gte':Ddate}}, 
                                {'IS_OPTED_OUT':"N"},
                                  {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                                  {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                                #   {'EMAIL':{"$not":{"$regex":"test",'$options':'i'}}},
                                #   {'EMAIL':{"$not":{"$regex":"1gen",'$options':'i'}}}
                                  ]}},
                    {"$group":{"_id":{"NAME":"$NAME","EMAIL":"$EMAIL",'CREATED_DATE':'$CREATED_DATE'},
                              'IS_OPTED_OUT':{"$first":'$IS_OPTED_OUT'},
                              'school_NAME':{"$first":'$USER_ID.schoolId.NAME'}}}
                                      ,{'$project':{
                                          '_id':1,
                                          'IS_OPTED_OUT':1,
                                          'Parent_EMAIL':"$_id.EMAIL",
                                          'CREATED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$_id.CREATED_DATE"}},
                                          "Parent_NAME":"$_id.NAME",
                                          'school':'$school_NAME',
                                          }
                                          },
                             { "$sort" : { 'CREATED_DATE' : -1}}
                        ])
                df7= DataFrame(list(collection6)).fillna(0)
                if df7.empty == True:
                    Tunein_email=["no_email"]
                else:
                    Tunein_email=df7["Parent_EMAIL"].tolist()
                if df7.empty == True:
                    tunein_signup="NO INFO"
                else:
                    if 'Parent_NAME' not in df7.columns:
                        df7["Parent_NAME"]="Parent"
                        tunein_signup=df7[["Parent_NAME",'CREATED_DATE']]
        #                     [int(lower):int(upper)].values.tolist()
                        tunein_signup=tunein_signup[(tunein_signup['CREATED_DATE'] >= lower) & 
                                    (tunein_signup['CREATED_DATE'] < upper)].values.tolist()
                    else:
                        df7.loc[df7["Parent_NAME"] == 0, "Parent_NAME"] = "Parent"
                        tunein_signup=df7[["Parent_NAME",'CREATED_DATE']]
        #                     [int(lower):int(upper)].values.tolist()
                        tunein_signup=tunein_signup[(tunein_signup['CREATED_DATE'] >= lower) & 
                                    (tunein_signup['CREATED_DATE'] < upper)].values.tolist()
                ################tunein_audio_track####################
                collection7 = db.tune_in_audio_track_detail.aggregate([{"$match":{
                         '$and':[ {"USER_ID.EMAIL_ID":{"$in":EMAIL_list1}},
                                #  { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                #    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                #      {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                          {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                          {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                          {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                          {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                          {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},
        #                  {'CREATED_DATE':{'$gte':Ddate}}       
                          ]}},
                            {"$project":{"INVITEE_EMAIL":'$INVITEE_EMAIL',"PROGRAM":"$PROGRAM_AUDIO_ID._id","program_name":"$PROGRAM_AUDIO_ID.AUDIO_TITLE",
                            "NARRATOR":"$PROGRAM_AUDIO_ID.NARRATEDBY",'Last_Prac_Date':'$CREATED_DATE',"school_name":"$USER_ID.schoolId.NAME",
                            "USER_NAME":"$USER_ID.USER_NAME","CURSOR_END":'$CURSOR_END',
                            "CURSOR_START":'$CURSOR_START'}},
                          {'$group':{
                              '_id':{"INVITEE_EMAIL":'$INVITEE_EMAIL',"PROGRAM":"$PROGRAM"},
                              "program_name":{'$first':"$program_name"},
                              "NARRATOR":{'$first':"$NARRATOR"},
                              'Last_Prac_Date':{'$max':'$Last_Prac_Date'},
                             "USER_NAME":{'$first':"$USER_NAME"},
                              'Practice_Sessions':{'$sum':1},
                              'Mindful_Minutes':{'$sum':{'$round':
                                  [{'$divide':[{'$subtract':
                                      ['$CURSOR_END','$CURSOR_START']},60]},0]}}  
                              }},
                         {'$project':{'_id':0,
                             'Parent_Email':'$_id.INVITEE_EMAIL',
                            "program_name":"$program_name",
                              "NARRATOR":"$NARRATOR",
                             "Parent_NAME":"$USER_NAME",
                             'Last_Practice_Date':{ "$dateToString": { "format": "%Y-%m-%d", "date":'$Last_Prac_Date'}},
                             'Practice_Sessions':'$Practice_Sessions',
                             'Mindful_Minutes':'$Mindful_Minutes'
                             }
                             },
                             { "$sort" : {'Last_Practice_Date' : -1}}])
                df8= DataFrame(list(collection7)).fillna(0)
                if df8.empty == True:
                    tunein_audio_track="NO INFO"
                else:
                    if 'Parent_NAME' not in df8.columns:
                        df8["Parent_NAME"]="Parent"
                        df18=pd.merge(dfpa,df8,on=["program_name","NARRATOR"],how="right")
                        tunein_audio_track=df18[["Parent_NAME","program_name","NARRATOR",'Last_Practice_Date',"IMAGE_URL"]]
        #                     [int(lower):int(upper)].values.tolist()
                        tunein_audio_track=tunein_audio_track[(tunein_audio_track['Last_Practice_Date'] >= lower) & 
                                    (tunein_audio_track['Last_Practice_Date'] < upper)].values.tolist()
                    else:
                        df8.loc[df8["Parent_NAME"] == 0, "Parent_NAME"] = "Parent"
                        df18=pd.merge(dfpa,df8,on=["program_name","NARRATOR"],how="right")
                        tunein_audio_track=df18[["Parent_NAME","program_name","NARRATOR",'Last_Practice_Date',"IMAGE_URL"]]
        #                     [int(lower):int(upper)].values.tolist()
                        tunein_audio_track=tunein_audio_track[(tunein_audio_track['Last_Practice_Date'] >= lower) & 
                                    (tunein_audio_track['Last_Practice_Date'] < upper)].values.tolist()
                temp={"practice_detail":practice_detail,"comments_detail":comments_detail,"feedback_detail":feedback_detail,"teacher_signup":teacher_signup,
                     "parent_signup":parent_signup,"tunein_signup":tunein_signup,"tunein_audio_track":tunein_audio_track}
                print(len(practice_detail),len(comments_detail),len(feedback_detail),len(teacher_signup),
                      len(parent_signup),len(tunein_signup),len(tunein_audio_track))
                print('other_school')
            return json.dumps(temp)




@app.route('/districtactivityfeed/<districtid>/<lower>/<upper>')
def dis_activity_feed(districtid,lower,upper):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    district=disdic[districtid]
    collection = db.user_master.aggregate([
    {"$match":
        {"$and":[
       {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y","CATEGORY":{'$regex':""+district+"", '$options':'i'} } )}},
             {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'IS_DISABLED':{"$ne":'Y'}},
    {'IS_BLOCKED':{"$ne":'Y'}}, 
    {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
    {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}}]}},
    # {"$match":
    # {"$and":[{'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
    # {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}]}},
    {"$project":{"_id":0,"USER_ID":"$_id","ID":"$schoolId._id","school_name":"$schoolId.NAME","USER_NAME":"$USER_NAME",
                "email_id":"$EMAIL_ID","district_name":"$DISTRICT_ID.DISTRICT_NAME"}}

    ])
    df= DataFrame(list(collection)).fillna(0)

    if df.empty is True:    
        temp='NO INFO'
        print(json.dumps(temp))
    else:
        school_list=df["ID"].tolist()
        user_email=df["email_id"]
        collectionpa = db.programs_audio.aggregate([
        {"$project":{"_id":0,"program_name":"$AUDIO_TITLE","NARRATOR":"$NARRATOR_ID.NARRATOR_NAME","IMAGE_URL":1,"CLASSROOM_IMAGE_URL" : 1}}

        ])
        dfpa= DataFrame(list(collectionpa)).fillna(0)
        collectionTU = db.user_master.aggregate([
        {"$match":
            {"$and":[
            {"schoolId._id":{"$in":school_list}},
            {'IS_DISABLED':{"$ne":'Y'}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
        {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}}]}},
        # {"$match":
        # {"$and":[{'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
        # {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}]}},
        {"$project":{"_id":0,"USER_ID":"$_id","USER_NAME":"$USER_NAME","email_id":"$EMAIL_ID"}}

        ])
        dfTU= DataFrame(list(collectionTU)).fillna(0)
        if dfTU.empty == True:
            temp="NO INFO"
        else:
            EMAIL_list=dfTU["email_id"].tolist()
            USER_ID_list=dfTU["USER_ID"].tolist()
            2##########
            collectionTU2 = db.user_master.aggregate([
            {"$match":
                {"$and":[
                {"schoolId._id":{"$in":school_list}},
                {'IS_DISABLED':{"$ne":'Y'}},
            {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
            {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}}]}},
            # {"$match":
            # {"$and":[{'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
            # {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}]}},
            {"$project":{"_id":0,"USER_ID":"$_id","USER_NAME":"$USER_NAME","email_id":"$EMAIL_ID"}}

            ])
            dfTU2= DataFrame(list(collectionTU2)).fillna(0)
            EMAIL_list1=dfTU2["email_id"].tolist()
            ##########################Practice_info##################################
            collection1 = db.audio_track_master.aggregate([{"$match":{
                     '$and':[ {"USER_ID.EMAIL_ID":{"$in":EMAIL_list}},
                            #  { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                            #    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                            #      {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                      {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                      {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
            #           {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                      {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                      {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                      {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},
        #                  {'MODIFIED_DATE':{'$gte':Ddate}}       
                      ]}},
                     {"$project":{"USER_ID":'$USER_ID._id',
                                  "PROGRAM":"$PROGRAM_AUDIO_ID._id",
                                  "program_name":"$PROGRAM_AUDIO_ID.AUDIO_TITLE",
                                  "PROG_NAME":"$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME",
                                 "NARRATOR":"$PROGRAM_AUDIO_ID.NARRATEDBY",'Last_Prac_Date':'$MODIFIED_DATE',"school_name":"$USER_ID.schoolId.NAME",
                                 "USER_NAME":"$USER_ID.USER_NAME","email_id":"$USER_ID.EMAIL_ID","CURSOR_END":'$CURSOR_END',
                                  "cursorStart":'$cursorStart',"IMAGE_URL":"$PROGRAM_AUDIO_ID.IMAGE_URL",
                                 "CLASSROOM_IMAGE_URL":"$PROGRAM_AUDIO_ID.CLASSROOM_IMAGE_URL"}},
                      {'$group':{
                          '_id':{"USER_ID":'$USER_ID',
                                 'AUDIO_ID':'$PROGRAM',
                                 "USER_NAME":"$USER_NAME"},
                          "IMAGE_URL":{'$first':"$IMAGE_URL"},
                          "CLASSROOM_IMAGE_URL":{'$first':"$CLASSROOM_IMAGE_URL"},
                          "program_name":{'$first':"$program_name"},
                          "PROG_NAME":{'$first':"$PROG_NAME"},
                          "NARRATOR":{'$first':"$NARRATOR"},
                          'Last_Prac_Date':{'$max':'$Last_Prac_Date'},
                          "school_name":{'$first':"$school_name"},
                         "USER_NAME":{'$first':"$USER_NAME"},
                         "email_id":{'$first':"$email_id"},
                          'Practice_Sessions':{'$sum':1},
                          'Mindful_Minutes':{'$sum':{'$round':
                              [{'$divide':[{'$subtract':
                                  ['$CURSOR_END','$cursorStart']},60]},0]}}  
                          }},
                           { "$sort" : { 'Last_Prac_Date' : -1}},                                
                     {'$project':{'_id':0,
                         'USER_ID':'$_id.USER_ID',
                        "IMAGE_URL":"$IMAGE_URL",
                        "CLASSROOM_IMAGE_URL":"$CLASSROOM_IMAGE_URL",
                        "program_name":"$program_name",
                        "PROG_NAME":"$PROG_NAME",                            
                          "NARRATOR":"$NARRATOR",
                         "school_name":"$school_name",
                         "USER_NAME":"$USER_NAME",
                         "email_id":"$email_id",
                         'Last_Practice_Date':{ "$dateToString": { "format": "%Y-%m-%d", "date": '$Last_Prac_Date'}},
                         'Practice_Sessions':'$Practice_Sessions',
                         'Mindful_Minutes':'$Mindful_Minutes'
                         }
                         },
#                          { "$sort" : { 'Last_Practice_Date' : -1}}
                                                          ])
            df1= DataFrame(list(collection1)).fillna(0)
        #     print("df1",df1)
        #     print("dfpa",dfpa)
            if df1.empty == True:
                practice_detail="NO INFO"
            else:
        #         df11=pd.merge(dfpa,df1,on=["program_name","NARRATOR"],how="right")
        #         print(df11)
                df99=df1[["USER_NAME","program_name","PROG_NAME","NARRATOR","Last_Practice_Date","CLASSROOM_IMAGE_URL"]]
                df99.fillna(0)
                practice_detail=df99[int(lower):int(upper)].values.tolist()
    #             print(practice_detail)
    #             print(len(practice_detail))


            ########################Feedback_Rating_detail##############################

            collection2=db.audio_feedback.aggregate([{"$match":{'$and':[
                {"USER.EMAIL_ID":{"$in":EMAIL_list}},
                    # { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    # {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                    #  {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                      {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                      {'USER.IS_DISABLED':{"$ne":'Y'}},
        #                   {'MODIFIED_DATE':{'$gte':Ddate}}  
                     ]}},

                     {"$project":{"_id":0, "USER_ID":'$USER._id',"USER_NAME":'$USER.USER_NAME',"EMAIL_ID":'$USER.EMAIL_ID',
                                  'MODIFIED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$MODIFIED_DATE"}},
                                  "RATING":'$RATING',"COMMENT":'$COMMENT',
                                  "AUDIO_NAME":"$AUDIO_ID.AUDIO_TITLE","NARRATOR":"$AUDIO_ID.NARRATEDBY",
                                  "CLASSROOM_IMAGE_URL":"$AUDIO_ID.CLASSROOM_IMAGE_URL"}},


#                          { "$sort" : { 'MODIFIED_DATE' : -1}}
                                                    ])
            df2= DataFrame(list(collection2)).fillna(0)            
            if df2.empty == True:
                feedback_detail="NO INFO"
                comments_detail="NO INFO"
                
            else:
                df2=df2.sort_values(by=['MODIFIED_DATE'],ascending=False).reset_index(drop=True)
                if 'CLASSROOM_IMAGE_URL' not in list(df2.columns):
                    df2['CLASSROOM_IMAGE_URL']='NO INFO'
                else:
                    df2=df2
                    
                feedback_detail=df2[["USER_NAME","RATING","COMMENT","AUDIO_NAME","NARRATOR","MODIFIED_DATE","CLASSROOM_IMAGE_URL"]][int(lower):int(upper)].values.tolist() 
                comments_detail=df2[["USER_NAME","COMMENT","MODIFIED_DATE","CLASSROOM_IMAGE_URL"]][int(lower):int(upper)].values.tolist()
                
                
                
                ########################Comment_detail##############################
    #             print(feedback_detail)


#             collection3=db.story_comments.aggregate([{"$match":{'$and':[
#                         {"EMAIL":{"$in":EMAIL_list}},
#                         {'COMMENT_TEXT':{'$ne': " "}},
#                         {'COMMENT_TEXT':{'$ne': ""}},
#                         {'COMMENT_TEXT':{'$exists':1}},
#         #                     {'CREATED_DATE':{'$gte':Ddate}}  
#                         ]}},

#                      {"$project":{"_id":0,"EMAIL":1,'CREATED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$CREATED_DATE"}},"COMMENT_TEXT":1}},
#                          { "$sort" : { 'CREATED_DATE' : -1}}])
#             df3= DataFrame(list(collection3)).fillna(0)
#             if df3.empty == True:
#                 comments_detail="NO INFO"
#             else:
#                 df3=pd.merge(df3,df1,how="left",left_on="EMAIL",right_on="email_id")
#     #             print(df3)
#                 comments_detail=df3[["USER_NAME","COMMENT_TEXT",'CREATED_DATE',"CLASSROOM_IMAGE_URL"]][int(lower):int(upper)].values.tolist()
    #             print(comments_detail)
    #             print(len(comments_detail))


            #################teacher_signup#####################

            collection4 = db.user_master.aggregate([
            {"$match":
                {"$and":[
                {"schoolId._id":{"$in":school_list}},
                     {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {'IS_DISABLED':{"$ne":'Y'}},
            {'IS_BLOCKED':{"$ne":'Y'}}, 
            {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
        #         {'CREATED_DATE':{'$gte':Ddate}},          
            {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}}]}},
            # {"$match":
            # {"$and":[{'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
            # {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}]}},
            {"$project":{"_id":0,"USER_ID":"$_id","ID":"$schoolId._id","USER_NAME":"$USER_NAME",
                         'CREATED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$CREATED_DATE"}},
                        "email_id":"$EMAIL_ID"}},
                         { "$sort" : { 'CREATED_DATE' : -1}}

            ])
            df5= DataFrame(list(collection4)).fillna(0)
            uid = df5.USER_ID.to_list()
        #     print(uid)
            collection1 = db.audio_track_master.aggregate([{"$match":{
                     '$and':[ {"USER_ID._id":{"$in":uid}},
                            #  { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                            #    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                            #      {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                      {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                      {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
            #           {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                      {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                      {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                      {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},
        #                  {'MODIFIED_DATE':{'$gte':Ddate}}       
                      ]}},
                     {"$project":{"USER_ID":'$USER_ID._id',"PROGRAM":"$PROGRAM_AUDIO_ID._id","program_name":"$PROGRAM_AUDIO_ID.AUDIO_TITLE",
                                 "NARRATOR":"$PROGRAM_AUDIO_ID.NARRATEDBY",'Last_Prac_Date':'$MODIFIED_DATE',"school_name":"$USER_ID.schoolId.NAME",
                                 "USER_NAME":"$USER_ID.USER_NAME","email_id":"$USER_ID.EMAIL_ID","CURSOR_END":'$CURSOR_END',
                                  "cursorStart":'$cursorStart',"IMAGE_URL":"$PROGRAM_AUDIO_ID.IMAGE_URL",
                                 "CLASSROOM_IMAGE_URL":"$PROGRAM_AUDIO_ID.CLASSROOM_IMAGE_URL"}},
                      {'$group':{
                          '_id':{"USER_ID":'$USER_ID',"USER_NAME":"$USER_NAME",
                                'AUDIO_ID':'$PROGRAM',
                                
                                },
                          "IMAGE_URL":{'$first':"$IMAGE_URL"},
                          "CLASSROOM_IMAGE_URL":{'$first':"$CLASSROOM_IMAGE_URL"},
                          "program_name":{'$first':"$program_name"},
                          "NARRATOR":{'$first':"$NARRATOR"},
                          'Last_Prac_Date':{'$max':'$Last_Prac_Date'},
                          "school_name":{'$first':"$school_name"},
                         "USER_NAME":{'$first':"$USER_NAME"},
                         "email_id":{'$first':"$email_id"},
                          'Practice_Sessions':{'$sum':1},
                          'Mindful_Minutes':{'$sum':{'$round':
                              [{'$divide':[{'$subtract':
                                  ['$CURSOR_END','$cursorStart']},60]},0]}}  
                          }},
                            { "$sort" : { 'Last_Prac_Date' : -1}},
                     {'$project':{'_id':0,
                         'USER_ID':'$_id.USER_ID',
                        "IMAGE_URL":"$IMAGE_URL",
                        "CLASSROOM_IMAGE_URL":"$CLASSROOM_IMAGE_URL",
                        "program_name":"$program_name",
                          "NARRATOR":"$NARRATOR",
                         "school_name":"$school_name",
        #                  "USER_NAME":"$USER_NAME",
                         "email_id":"$email_id",
                         'Last_Practice_Date':{ "$dateToString": { "format": "%Y-%m-%d", "date": '$Last_Prac_Date'}},
                         'Practice_Sessions':'$Practice_Sessions',
                         'Mindful_Minutes':'$Mindful_Minutes'
                         }
                         },
#                          { "$sort" : { 'Last_Practice_Date' : -1}}
                                                          ])
            df12= DataFrame(list(collection1)).fillna(0)
        #     print(df12)
        #     print(df5)
            if df5.empty == True:
                teacher_signup="NO INFO"
            else:
                if df12.empty:
                    df33=df5[["USER_NAME",'CREATED_DATE']]
                    df33['IMAGE_URL']='NO INFO'
                else:
                    df33=pd.merge(df5,df12,how="left",on="email_id")
                    df33 = df33.fillna(0)
        #         print(df33)
                teacher_signup=df33[["USER_NAME",'CREATED_DATE',"IMAGE_URL"]][int(lower):int(upper)].values.tolist()
    #             print(teacher_signup)


                      #################parent_signup#####################
                collection5 = db.user_master.aggregate([
                {"$match":
                    {"$and":[
                    {"schoolId._id":{"$in":school_list}},
                         {'ROLE_ID._id':{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                    {'IS_DISABLED':{"$ne":'Y'}},
                {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
            #         {'CREATED_DATE':{'$gte':Ddate}},          
                {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}}]}},
                # {"$match":
                # {"$and":[{'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
                # {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}]}},
                {"$project":{"_id":0,"USER_ID":"$_id","ID":"$schoolId._id","USER_NAME":"$USER_NAME",
                             'CREATED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$CREATED_DATE"}},
                            "email_id":"$EMAIL_ID"}},
                             { "$sort" : { 'CREATED_DATE' : -1}}

                ])
                df6= DataFrame(list(collection5)).fillna(0)


                collection1 = db.audio_track_master.aggregate([{"$match":{
                         '$and':[ {"USER_ID._id":{"$in":uid}},
                                #  { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                #    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                #      {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                          {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                          {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                #           {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                          {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                          {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                          {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},
            #                  {'MODIFIED_DATE':{'$gte':Ddate}}       
                          ]}},
                         {"$project":{"USER_ID":'$USER_ID._id',"PROGRAM":"$PROGRAM_AUDIO_ID._id","program_name":"$PROGRAM_AUDIO_ID.AUDIO_TITLE",
                                     "NARRATOR":"$PROGRAM_AUDIO_ID.NARRATEDBY",'Last_Prac_Date':'$MODIFIED_DATE',"school_name":"$USER_ID.schoolId.NAME",
                                     "USER_NAME":"$USER_ID.USER_NAME","email_id":"$USER_ID.EMAIL_ID","CURSOR_END":'$CURSOR_END',
                                      "cursorStart":'$cursorStart',"IMAGE_URL":"$PROGRAM_AUDIO_ID.IMAGE_URL",
                                     "CLASSROOM_IMAGE_URL":"$PROGRAM_AUDIO_ID.CLASSROOM_IMAGE_URL"}},
                          {'$group':{
                              '_id':{"USER_ID":'$USER_ID',"USER_NAME":"$USER_NAME",
                                    'AUDIO_ID':'$PROGRAM',
                                    
                                    },
                              "IMAGE_URL":{'$first':"$IMAGE_URL"},
                              "CLASSROOM_IMAGE_URL":{'$first':"$CLASSROOM_IMAGE_URL"},
                              "program_name":{'$first':"$program_name"},
                              "NARRATOR":{'$first':"$NARRATOR"},
                              'Last_Prac_Date':{'$max':'$Last_Prac_Date'},
                              "school_name":{'$first':"$school_name"},
                             "USER_NAME":{'$first':"$USER_NAME"},
                             "email_id":{'$first':"$email_id"},
                              'Practice_Sessions':{'$sum':1},
                              'Mindful_Minutes':{'$sum':{'$round':
                                  [{'$divide':[{'$subtract':
                                      ['$CURSOR_END','$cursorStart']},60]},0]}}  
                              }},
                            { "$sort" : { 'Last_Prac_Date' : -1}},
                         {'$project':{'_id':0,
                             'USER_ID':'$_id.USER_ID',
                            "IMAGE_URL":"$IMAGE_URL",
                            "CLASSROOM_IMAGE_URL":"$CLASSROOM_IMAGE_URL",
                            "program_name":"$program_name",
                              "NARRATOR":"$NARRATOR",
                             "school_name":"$school_name",
            #                  "USER_NAME":"$USER_NAME",
                             "email_id":"$email_id",
                             'Last_Practice_Date':{ "$dateToString": { "format": "%Y-%m-%d", "date": '$Last_Prac_Date'}},
                             'Practice_Sessions':'$Practice_Sessions',
                             'Mindful_Minutes':'$Mindful_Minutes'
                             }
                             },
#                              { "$sort" : { 'Last_Practice_Date' : -1}}
                                                              ])
                df12= DataFrame(list(collection1)).fillna(0)
        #         print(df6)
        #         print(df12)
                if df6.empty == True:
                    parent_signup="NO INFO"
        #             print(df6)
        #             print(df12)
                else:
                    uid = df6.USER_ID.to_list()
                    if df12.empty:
                        df33=df33[['USER_NAME','CREATED_DATE']]
                        df33['IMAGE_URL']='NO INFO'
                    else:
                        df33=pd.merge(df6,df12,how="left",on="email_id")
                        df33 = df33.fillna(0)
        #             print(df33)
                    parent_signup=df33[["USER_NAME",'CREATED_DATE',"IMAGE_URL"]][int(lower):int(upper)].values.tolist()
        #             print(parent_signup)


                    ################tunein_signup####################


                collection6 = db.tune_in_master.aggregate([
                       {"$match":{
                                 '$and':[
                                    #  { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                    #        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                    #          {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                                          {"USER_ID.EMAIL_ID":{"$in":EMAIL_list1}},
                                  {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                                  {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
            #                         {'CREATED_DATE':{'$gte':Ddate}}, 
                                {'IS_OPTED_OUT':"N"},
                                  {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                                  {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                                  {'EMAIL':{"$not":{"$regex":"test",'$options':'i'}}},
                                  {'EMAIL':{"$not":{"$regex":"1gen",'$options':'i'}}}
                                  ]}},
                    {"$group":{"_id":{"NAME":"$NAME","EMAIL":"$EMAIL",'CREATED_DATE':'$CREATED_DATE'},
                              'IS_OPTED_OUT':{"$first":'$IS_OPTED_OUT'},'USER_ID':{"$first":'$USER_ID._id'},
                              'school_NAME':{"$first":'$USER_ID.schoolId.NAME'}}}
                                      ,{'$project':{
                                          '_id':1,
                                          'USER_ID':1,
                                          'IS_OPTED_OUT':1,
                                          'Parent_EMAIL':"$_id.EMAIL",
                                          'CREATED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$_id.CREATED_DATE"}},
                                          "Parent_NAME":"$_id.NAME",
                                          'school':'$school_NAME',
                                          }
                                          },
                             { "$sort" : { 'CREATED_DATE' : -1}}
                        ])
                df7= DataFrame(list(collection6)).fillna(0)
        #         print(df7)


                collection1 = db.audio_track_master.aggregate([{"$match":{
                         '$and':[ {"USER_ID._id":{"$in":uid}},
                                #  { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                #    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                #      {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                          {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                          {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                #           {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                          {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                          {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                          {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},
            #                  {'MODIFIED_DATE':{'$gte':Ddate}}       
                          ]}},
                         {"$project":{"USER_ID":'$USER_ID._id',"PROGRAM":"$PROGRAM_AUDIO_ID._id","program_name":"$PROGRAM_AUDIO_ID.AUDIO_TITLE",
                                     "NARRATOR":"$PROGRAM_AUDIO_ID.NARRATEDBY",'Last_Prac_Date':'$MODIFIED_DATE',"school_name":"$USER_ID.schoolId.NAME",
                                     "USER_NAME":"$USER_ID.USER_NAME","email_id":"$USER_ID.EMAIL_ID","CURSOR_END":'$CURSOR_END',
                                      "cursorStart":'$cursorStart',"IMAGE_URL":"$PROGRAM_AUDIO_ID.IMAGE_URL",
                                     "CLASSROOM_IMAGE_URL":"$PROGRAM_AUDIO_ID.CLASSROOM_IMAGE_URL"}},
                          {'$group':{
                              '_id':{"USER_ID":'$USER_ID',
                                     'AUDIO_ID':'$PROGRAM',
                                     "USER_NAME":"$USER_NAME"},
                              "IMAGE_URL":{'$first':"$IMAGE_URL"},
                              "CLASSROOM_IMAGE_URL":{'$first':"$CLASSROOM_IMAGE_URL"},
                              "program_name":{'$first':"$program_name"},
                              "NARRATOR":{'$first':"$NARRATOR"},
                              'Last_Prac_Date':{'$max':'$Last_Prac_Date'},
                              "school_name":{'$first':"$school_name"},
                             "USER_NAME":{'$first':"$USER_NAME"},
                             "email_id":{'$first':"$email_id"},
                              'Practice_Sessions':{'$sum':1},
                              'Mindful_Minutes':{'$sum':{'$round':
                                  [{'$divide':[{'$subtract':
                                      ['$CURSOR_END','$cursorStart']},60]},0]}}  
                              }},
                            { "$sort" : { 'Last_Prac_Date' : -1}},
                         {'$project':{'_id':0,
                             'USER_ID':'$_id.USER_ID',
                            "IMAGE_URL":"$IMAGE_URL",
                            "CLASSROOM_IMAGE_URL":"$CLASSROOM_IMAGE_URL",
                            "program_name":"$program_name",
                              "NARRATOR":"$NARRATOR",
                             "school_name":"$school_name",
            #                  "USER_NAME":"$USER_NAME",
                             "email_id":"$email_id",
                             'Last_Practice_Date':{ "$dateToString": { "format": "%Y-%m-%d", "date": '$Last_Prac_Date'}},
                             'Practice_Sessions':'$Practice_Sessions',
                             'Mindful_Minutes':'$Mindful_Minutes'
                             }
                             },
#                              { "$sort" : { 'Last_Practice_Date' : -1}}
                                                              ])
                df12= DataFrame(list(collection1)).fillna(0)
            #     print(df12)


                if df7.empty == True:
                    Tunein_email=["no_email"]
                else:
                    Tunein_email=df7["Parent_EMAIL"].tolist()
                if df7.empty == True:
                    tunein_signup="NO INFO"
                else:
                    uid = df7.USER_ID.to_list()
        #             print(uid)
                    if 'Parent_NAME' not in df7.columns:
                        df7["Parent_NAME"]="Parent"
                        tunein_signup=df7[["Parent_NAME",'CREATED_DATE']][int(lower):int(upper)].values.tolist()
                    else:
                        df7.loc[df7["Parent_NAME"] == 0, "Parent_NAME"] = "Parent"
                        if df12.empty:
                            df33=df7[["Parent_NAME",'CREATED_DATE']]
                            df33['IMAGE_URL']='NO INFO'
                        else:

                            df33=pd.merge(df7,df12,how="left",left_on="Parent_EMAIL",right_on="email_id")
                            df33 = df33.fillna(0)
                        tunein_signup=df33[["Parent_NAME",'CREATED_DATE',"IMAGE_URL"]][int(lower):int(upper)].values.tolist()
        #                 print(tunein_signup)


                        ################tunein_audio_track####################


                collection7 = db.tune_in_audio_track_detail.aggregate([{"$match":{
                             '$and':[ {"USER_ID.EMAIL_ID":{"$in":EMAIL_list1}},
                                    #  { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                    #    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                    #      {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                              {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                              {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                              {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},
                #                  {'CREATED_DATE':{'$gte':Ddate}}       
                              ]}},
                                {"$project":{"INVITEE_EMAIL":'$INVITEE_EMAIL',"PROGRAM":"$PROGRAM_AUDIO_ID._id","program_name":"$PROGRAM_AUDIO_ID.AUDIO_TITLE",
                                "NARRATOR":"$PROGRAM_AUDIO_ID.NARRATEDBY",'Last_Prac_Date':'$CREATED_DATE',"school_name":"$USER_ID.schoolId.NAME",
                                "USER_NAME":"$USER_ID.USER_NAME","CURSOR_END":'$CURSOR_END',
                                "CURSOR_START":'$CURSOR_START'}},
                              {'$group':{
                                  '_id':{"INVITEE_EMAIL":'$INVITEE_EMAIL',"PROGRAM":"$PROGRAM"},
                                  "program_name":{'$first':"$program_name"},
                                  "NARRATOR":{'$first':"$NARRATOR"},
                                  'Last_Prac_Date':{'$max':'$Last_Prac_Date'},
                                 "USER_NAME":{'$first':"$USER_NAME"},
                                  'Practice_Sessions':{'$sum':1},
                                  'Mindful_Minutes':{'$sum':{'$round':
                                      [{'$divide':[{'$subtract':
                                          ['$CURSOR_END','$CURSOR_START']},60]},0]}}  
                                  }},
                                { "$sort" : { 'Last_Prac_Date' : -1}},
                             {'$project':{'_id':0,
                                 'Parent_Email':'$_id.INVITEE_EMAIL',
                                "program_name":"$program_name",
                                  "NARRATOR":"$NARRATOR",
                                 "Parent_NAME":"$USER_NAME",
                                 'Last_Practice_Date':{ "$dateToString": { "format": "%Y-%m-%d", "date":'$Last_Prac_Date'}},
                                 'Practice_Sessions':'$Practice_Sessions',
                                 'Mindful_Minutes':'$Mindful_Minutes'
                                 }
                                 },
#                                  { "$sort" : { 'Last_Practice_Date' : -1}}
                                                                      ])

                df8= DataFrame(list(collection7)).fillna(0)
                if df8.empty == True:
                    tunein_audio_track="NO INFO"
                else:
                    if 'Parent_NAME' not in df8.columns:
                        df8["Parent_NAME"]="Parent"
                        df18=pd.merge(dfpa,df8,on=["program_name","NARRATOR"],how="right")
                        tunein_audio_track=df18[["Parent_NAME","program_name","NARRATOR",'Last_Practice_Date',"CLASSROOM_IMAGE_URL"]][int(lower):int(upper)].values.tolist()
                    else:
                        df8.loc[df8["Parent_NAME"] == 0, "Parent_NAME"] = "Parent"
                        df18=pd.merge(dfpa,df8,on=["program_name","NARRATOR"],how="right")
                        tunein_audio_track=df18[["Parent_NAME","program_name","NARRATOR",'Last_Practice_Date',"CLASSROOM_IMAGE_URL"]][int(lower):int(upper)].values.tolist()
        #                 print(tunein_audio_track)

                temp={"practice_detail":practice_detail,"comments_detail":comments_detail,"feedback_detail":feedback_detail,"teacher_signup":teacher_signup,
                              "parent_signup":parent_signup,"tunein_signup":tunein_signup,"tunein_audio_track":tunein_audio_track}

            return json.dumps(temp)




#############################for Narrator Profile Practice Data Only#############################
@app.route('/narrator_practice_data')
def narrator_practice_data():
    # username = urllib.parse.quote_plus('adminIE')
    # password = urllib.parse.quote_plus('CtZh5Nqp8Qn9LHUDx2GH')
    # client = MongoClient("mongodb://%s:%s@54.184.165.106:27017/" % (username, password))
    # db=client.compass_beta

    client = MongoClient('mongodb://admin:F5tMazRj47cYqm33e@52.41.36.115:27017/')
    db=client.compass

    collection1 = db.audio_track_master_2018_2019.aggregate([
        {"$match":{
            '$and':[{ 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
            {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
            {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
            {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
            {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
            {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
            {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},
            {'CREATED_DATE':{'$lte':datetime.datetime(2019,7,31)}}        
            ]}},
            {"$group":{"_id":{"AUDIO_TITLE":"$PROGRAM_AUDIO_ID.AUDIO_TITLE",
                        "PROGRAM_NAME":"$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME",
                              "NARRATOR":"$PROGRAM_AUDIO_ID.NARRATOR_ID._id"},
#                                            "PROGRAM_ID":{"$first":"$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_ID"},
                        'count':{'$sum':1},
                    'MODIFIED_DATE':{"$min":'$MODIFIED_DATE'}}
        },
        {'$project':{'_id':0,
                        'MODIFIED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$MODIFIED_DATE"}},
                    "AUDIO_TITLE":"$_id.AUDIO_TITLE" ,
                    "PROGRAM_NAME":"$_id.PROGRAM_NAME",
                    "NARRAROR":"$_id.NARRATOR",
                    "Total":"$count",
#                                       "PROGRAM_ID":"$PROGRAM_ID"
                }
                }])
    df01= list(collection1)
    df= DataFrame(df01)
    df.to_csv("old_practice.csv")
    collection2 = db.audio_track_master.aggregate([
        {"$match":{
            '$and':[{ 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
            {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
            {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
            {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                                {"PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
            {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
            {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
            {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},     
            ]}},
            {"$group":{"_id":{"AUDIO_TITLE":"$PROGRAM_AUDIO_ID.AUDIO_TITLE",
                        "PROGRAM_NAME":"$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME",
                              "NARRATOR":"$PROGRAM_AUDIO_ID.NARRATOR_ID._id"},

#                         "PROGRAM_ID":{"$first":"$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_ID"},

                        'count':{'$sum':1},
                    'MODIFIED_DATE':{"$min":'$MODIFIED_DATE'}},


        },
        {'$project':{'_id':0,
                        'MODIFIED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$MODIFIED_DATE"}},
                    "AUDIO_TITLE":"$_id.AUDIO_TITLE" ,
                    "PROGRAM_NAME":"$_id.PROGRAM_NAME",
                    "NARRAROR":"$_id.NARRATOR",
                    "Total":"$count",
#                      "PROGRAM_ID":"$PROGRAM_ID"
                }
                }])
    df02= list(collection2)
    df1= DataFrame(df02)
    df1.to_csv("new_practice.csv")
    return "status : ok"
#################################################################################################

# narratorprofile api copy for testing purpose only connected with beta_server.


# @app.route('/narratorprofileb1/<id>')
# def narrator_profile_(id): 
#     import datetime
#     from textblob import TextBlob, Word, Blobber

#     username = urllib.parse.quote_plus('adminIE')
#     password = urllib.parse.quote_plus('CtZh5Nqp8Qn9LHUDx2GH')
#     client = MongoClient("mongodb://%s:%s@54.184.165.106:27017/" % (username, password))
#     db=client.compass_beta

#     collection = db.narrator_profile.aggregate([
#         {"$match":
#         {"$and":[{'_id':{"$eq":ObjectId(""+id+"")}}]}}

#         ])
#     df= DataFrame(list(collection)).fillna(0)
#     df['NARRATOR_DESCRIPITION']=df['NARRATOR_DESCRIPITION'].replace({0:''})
# #     print(df)
    
#     narrator_list=df["_id"].tolist()
#     df1= pd.read_csv("old_practice.csv")
#     df1=df1[df1["NARRAROR"]==id]

#     df2= pd.read_csv("new_practice.csv")
#     df2=df2[df2["NARRAROR"]==id]
#     practice = df1.append(df2, ignore_index=True)
#     if practice.empty == True:
#         plays="0"
#         since="0"
#     else:    
#         plays=int(sum(practice["Total"]))
#         since=practice.MODIFIED_DATE.min()
#     collection3=db.audio_feedback.aggregate([{"$match":{'$and':[
#             {"AUDIO_ID.NARRATOR_ID._id":{
#                         "$in":narrator_list
#                     }},
#                     { 'USER.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
#                     {'USER.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
#                     {'USER.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                     {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
#                             {"AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
#                     {'USER.IS_DISABLED':{"$ne":'Y'}},
#                     {'RATING':{"$ne":0}}
#                     ]}},
#                     {"$group": {"_id":"null", 'RATING': {"$avg":"$RATING"} } }
#                     ,
#                     {"$project":{"_id":0,'RATING':{"$round":["$RATING",1]}}},
#                                             ])
#     df033= list(collection3)
#     df33= pd.DataFrame.from_dict(df033).fillna(0)
#     if df33.empty == True:
#         n_rating=0
#     else:
#         n_rating=df33["RATING"][0]
#     info={"name":str(df["NARRATOR_NAME"][0]),"email":str(df["NARRATOR_EMAIL"][0]) ,"place":str(df["PLACE"][0]),"image":str(df["PROFILE_IMAGE"][0]),"image2":str(df["NARRATOR_IMAGE_2"][0]),"desc":str(df["NARRATOR_DESCRIPITION"][0]),
#         "plays":int(plays),"since":str(since),"rating":n_rating}
#     df4=practice.groupby(["PROGRAM_NAME"]).sum().reset_index()
#     if df4.empty == True:
#         featuring_in=[]
#         Top_mindfultrack_in=[]
#         recent_comment=[]
#     else:
#         collection4=db.audio_feedback.aggregate([{"$match":{'$and':[
#                 {"AUDIO_ID.NARRATOR_ID._id":{
#                             "$in":narrator_list

#                         }},
#                         { 'USER.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
#                         {'USER.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
#                         {'USER.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                         {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
#                                 {"AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
#                         {'USER.IS_DISABLED':{"$ne":'Y'}},
#                         {'RATING':{"$ne":0}}
#                         ]}},
#                         {"$group":{"_id":"$AUDIO_ID.PROGRAM_ID.PROGRAM_NAME","RATING":{"$avg":"$RATING"}}}
#                         ,
#                         {"$project":{"_id":0,"PROGRAM_NAME":"$_id","RATING":1}},
#                                                 ])
#         df05= list(collection4)
#         df5= pd.DataFrame.from_dict(df05).fillna(0)
#         if df5.empty == True:
#             df5["PROGRAM_NAME"]="0"
#             df5["RATING"]=0
#             featuring=pd.merge(df4,df5,on="PROGRAM_NAME",how="left").fillna(0)
#             featuring["RATING"]=0
#             featuring1=featuring[["PROGRAM_NAME","Total","RATING"]]
#         else:
#             df5=df5.round(decimals=1)   
#             featuring=pd.merge(df4,df5,on="PROGRAM_NAME",how="left").fillna(0)
#             featuring1=featuring[["PROGRAM_NAME","Total","RATING"]]
#         featuring2=featuring1.nlargest(3, "Total")
#         if featuring2.empty:
#             featuring2=pd.DataFrame(index=[0], columns=['PROGRAM_NAME','Total','RATING'])

#         featuring2["PROGRAM_NAME"].fillna("",inplace=True)
#         featuring2["Total"].fillna(0,inplace=True)
#         featuring2["RATING"].fillna(0,inplace=True)

#         featuring_in=featuring2.to_dict("records")
#         collection5=db.audio_feedback.aggregate([{"$match":{'$and':[
#                 {"AUDIO_ID.NARRATOR_ID._id":{
#                             "$in":narrator_list

#                         }},
#                         { 'USER.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
#                         {'USER.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
#                         {'USER.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                         {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
#                                     {"AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
#                         {'USER.IS_DISABLED':{"$ne":'Y'}},
#                         {'RATING':{"$ne":0}}
#                         ]}},
#                         {"$group":{"_id":{"PROGRAM_NAME":"$AUDIO_ID.PROGRAM_ID.PROGRAM_NAME","AUDIO_TITLE":"$AUDIO_ID.AUDIO_TITLE"}
#                                 ,"RATING":{"$avg":"$RATING"}}}
#                         ,
#                         {"$project":{"_id":0,"PROGRAM_NAME":"$_id.PROGRAM_NAME","AUDIO_TITLE":"$_id.AUDIO_TITLE","RATING":1}},
#                                                 ])
#         df07= list(collection5)
#         df7= pd.DataFrame.from_dict(df07).fillna(0)
#         df6=practice.groupby(["AUDIO_TITLE","PROGRAM_NAME"]).sum().reset_index()
#         if df7.empty == True:
#             df7["PROGRAM_NAME"]="0"
#             df7["AUDIO_TITLE"]="0"
#             df7["RATING"]="0"
#             mindfultrack=pd.merge(df6,df7,on=["AUDIO_TITLE","PROGRAM_NAME"],how="left")
#             mindfultrack["RATING"]=0
#             mindfultrack1=mindfultrack[["AUDIO_TITLE","PROGRAM_NAME","Total","RATING"]]
#         else:
#             df7=df7.round(decimals=1)
#             mindfultrack=pd.merge(df6,df7,on=["AUDIO_TITLE","PROGRAM_NAME"],how="right")
#     #             mindfultrack['RATING']=mindfultrack['RATING'].fillna('NO_Rating')
#             mindfultrack1=mindfultrack[["AUDIO_TITLE","PROGRAM_NAME","Total","RATING"]]
#         mindfultrack2=mindfultrack1.nlargest(3, "Total")
#         mindfultrack2.reset_index(drop=True, inplace=True)
#         dfimage=pd.DataFrame()
#         for i in range(len(mindfultrack2.index)):
#             collection = db.programs_audio.aggregate([{"$match":{"AUDIO_TITLE":mindfultrack2["AUDIO_TITLE"][i],
#                                                                  "PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]},
#                                                                 "PROGRAM_ID.PROGRAM_NAME":mindfultrack2["PROGRAM_NAME"][i]}},
#                                                     {"$project":{"AUDIO_ID":"$_id","_id" : 0,"AUDIO_TITLE":"$AUDIO_TITLE",
#                                                                 "PROGRAM_NAME":"$PROGRAM_ID.PROGRAM_NAME",
#                                                     "CLASSROOM_IMAGE_URL":"$CLASSROOM_IMAGE_URL",
#                                                     "IMAGE_URL":"$IMAGE_URL","AUDIO_NAME" : "$AUDIO_NAME"}}
#                                                     ])
#             dfimage1= DataFrame(list(collection))
#             dfimage=dfimage.append(dfimage1)
#         dfimage.reset_index(drop=True, inplace=True)
#         dfimage["VIDEO_ID"] = dfimage['AUDIO_NAME']
#         dfimage["VIDEO_ID"] = dfimage[dfimage['AUDIO_NAME'].str.contains("=")]['AUDIO_NAME'].str.split('=').str[1]
#         dfimage["VIDEO_ID"].fillna(dfimage['AUDIO_NAME'], inplace=True)
#         conditions  = [dfimage["VIDEO_ID"] != dfimage['AUDIO_NAME'], dfimage["VIDEO_ID"] == dfimage['AUDIO_NAME']]
#         choices     = [1, 0]
#         dfimage["IS_VIDEO"] = np.select(conditions, choices)
#         dfimage = dfimage.drop(['AUDIO_NAME'], axis=1)



#         mindfultrack0=pd.merge(mindfultrack2,dfimage,on=["AUDIO_TITLE","PROGRAM_NAME"],how="left").fillna(0)
#         if mindfultrack0.empty:
#             mindfultrack0=pd.DataFrame(index=[0], columns=['AUDIO_ID','AUDIO_TITLE','PROGRAM_NAME','Total','RATING','IMAGE_URL',"CLASSROOM_IMAGE_URL",'VIDEO_ID','IS_VIDEO'])
#         mindfultrack0=mindfultrack0.nlargest(3, "Total") #############
#         mindfultrack0["AUDIO_TITLE"].fillna("",inplace=True)
#         mindfultrack0["PROGRAM_NAME"].fillna("",inplace=True)
#         mindfultrack0["Total"].fillna(0,inplace=True)
#         mindfultrack0["RATING"].fillna(0,inplace=True)
#         mindfultrack0["IMAGE_URL"].fillna("",inplace=True)
#         mindfultrack0["CLASSROOM_IMAGE_URL"].fillna("",inplace=True)
#         mindfultrack0["VIDEO_ID"].fillna("",inplace=True)
#         mindfultrack0["IS_VIDEO"].fillna(0,inplace=True)

#         Top_mindfultrack_in=mindfultrack0.to_dict("records")
#         collection3=db.audio_feedback.aggregate([{"$match":{'$and':[
#                 {"AUDIO_ID.NARRATOR_ID._id":{
#                             "$in":narrator_list

#                         }},
#                         { 'USER.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
#                         {'USER.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
#                         {'USER.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                         {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
#                         {'USER.IS_DISABLED':{"$ne":'Y'}},
#                                     {"AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
#                         {'COMMENT':{'$exists':1}},
#                         {'COMMENT':{"$not":{"$regex":" ",'$options':'i'}}},
#                         {'COMMENT':{"$ne":""}},

#                         ]}},
#                         {"$project":{"_id":0,"USER_NAME":"$USER.USER_NAME","USER_PROFILE" : "$USER.IMAGE_URL" ,
#                                      "PROGRAM_NAME":"$AUDIO_ID.PROGRAM_ID.PROGRAM_NAME",
#                                     'MODIFIED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$MODIFIED_DATE"}}, "RATING":1,"COMMENT":1,
#                                     "AUDIO_TITLE":"$AUDIO_ID.AUDIO_TITLE","NARRATOR":"$AUDIO_ID.NARRATEDBY"}},
#                         {"$sort":{'MODIFIED_DATE':-1}},{"$limit":30}
#                                                 ])
#         df03= list(collection3)
#         df3= pd.DataFrame.from_dict(df03).fillna(0)
#         if df3.empty==True:
#             recent_comment=[]
#         else:


#             if 'USER_PROFILE' not in df3.columns:
#                 df3['USER_PROFILE']=""
#             else:
#                 df3


#         #####################sentiment_analysis##################
#             spec_chars = ["!",'"',"#","%","&","'","(",")",
#                         "*","+",",","-",".","/",":",";","<",
#                         "=",">","?","@","[","\\","]","^","_",
#                         "`","{","|","}","~","–","\n"]
#             df3['sentiment'] = df3.COMMENT.apply(lambda x: TextBlob(str(x)).sentiment.polarity)
#             df10=df3[df3["sentiment"]>= 0.30]
#             # current_Date = (datetime.datetime.today()- timedelta(60)).strftime ('%Y-%m-%d')
#             df10=df10.sort_values(by="MODIFIED_DATE")
#             recent_comment=df10[["USER_NAME","MODIFIED_DATE","RATING","COMMENT","USER_PROFILE"]].to_dict("records")
#     collection4 = db.narrator_profile.aggregate([
#         {"$match":
#         {"$and":[{'_id':{"$ne":ObjectId(id)}}]}},
#         {"$project":{"_id":0,"NARRATOR_NAME":"$NARRATOR_NAME","NARRATOR_IMAGE":"$NARRATOR_IMAGE","NARRATOR_IMAGE_2" :"$NARRATOR_IMAGE_2"}}

#         ])
#     df11= DataFrame(list(collection4)).fillna(0)
#     if df11.empty:
#         df11=pd.DataFrame(index=[0], columns=['NARRATOR_NAME','NARRATOR_IMAGE'])

#     df11["NARRATOR_NAME"].fillna("",inplace=True)
#     df11["NARRATOR_IMAGE"].fillna("",inplace=True)
#     df11["NARRATOR_IMAGE_2"].fillna("",inplace=True)
#     other_narrator=df11.to_dict("records")
#     temp={"info":info,"featuring_in":featuring_in,"Top_mindfultrack_in":Top_mindfultrack_in,
#           "recent_comment":recent_comment,"other_narrators":other_narrator}
#     return json.dumps(temp, default=str)
# <<<<<<<<<<<<<<<<========================================>>>>>>>>>>>>>>>>>


@app.route('/narratorprofile/<id>')
def narrator_profile(id): 
    import datetime
    from textblob import TextBlob, Word, Blobber

    # username = urllib.parse.quote_plus('adminIE')
    # password = urllib.parse.quote_plus('CtZh5Nqp8Qn9LHUDx2GH')
    # client = MongoClient("mongodb://%s:%s@54.184.165.106:27017/" % (username, password))
    # db=client.compass_beta

    client = MongoClient('mongodb://admin:F5tMazRj47cYqm33e@52.41.36.115:27017/')
    db=client.compass

    collection = db.narrator_profile.aggregate([
        {"$match":
        {"$and":[{'_id':{"$eq":ObjectId(""+id+"")}}]}}

        ])
    df= DataFrame(list(collection)).fillna(0)
    df['NARRATOR_DESCRIPITION']=df['NARRATOR_DESCRIPITION'].replace({0:''})
    
    narrator_list=df["_id"].tolist()
    df1= pd.read_csv("old_practice.csv")
    df1=df1[df1["NARRAROR"]==id]

    df2= pd.read_csv("new_practice.csv")
    df2=df2[df2["NARRAROR"]==id]
    practice = df1.append(df2, ignore_index=True)
    if practice.empty == True:
        plays="0"
        since="0"
    else:    
        plays=int(sum(practice["Total"]))
        since=practice.MODIFIED_DATE.min()
    collection3=db.audio_feedback.aggregate([{"$match":{'$and':[
            {"AUDIO_ID.NARRATOR_ID._id":{
                        "$in":narrator_list
                    }},
                    { 'USER.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    {'USER.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                    {'USER.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                    {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                            {"AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
                    {'USER.IS_DISABLED':{"$ne":'Y'}},
                    {'RATING':{"$ne":0}}
                    ]}},
                    {"$group": {"_id":"null", 'RATING': {"$avg":"$RATING"} } }
                    ,
                    {"$project":{"_id":0,'RATING':{"$round":["$RATING",1]}}},
                                            ])
    df033= list(collection3)
    df33= pd.DataFrame.from_dict(df033).fillna(0)
    if df33.empty == True:
        n_rating=0
    else:
        n_rating=df33["RATING"][0]
    info={"name":str(df["NARRATOR_NAME"][0]),"email":str(df["NARRATOR_EMAIL"][0]) ,"place":str(df["PLACE"][0]),"image":str(df["PROFILE_IMAGE"][0]),"desc":str(df["NARRATOR_DESCRIPITION"][0]),
        "plays":int(plays),"since":str(since),"rating":n_rating}
    df4=practice.groupby(["PROGRAM_NAME"]).sum().reset_index()
    if df4.empty == True:
        featuring_in=[]
        Top_mindfultrack_in=[]
        recent_comment=[]
    else:
        collection4=db.audio_feedback.aggregate([{"$match":{'$and':[
                {"AUDIO_ID.NARRATOR_ID._id":{
                            "$in":narrator_list

                        }},
                        { 'USER.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        {'USER.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                        {'USER.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                        {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                                {"AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
                        {'USER.IS_DISABLED':{"$ne":'Y'}},
                        {'RATING':{"$ne":0}}
                        ]}},
                        {"$group":{"_id":"$AUDIO_ID.PROGRAM_ID.PROGRAM_NAME","RATING":{"$avg":"$RATING"}}}
                        ,
                        {"$project":{"_id":0,"PROGRAM_NAME":"$_id","RATING":1}},
                                                ])
        df05= list(collection4)
        df5= pd.DataFrame.from_dict(df05).fillna(0)
        if df5.empty == True:
            df5["PROGRAM_NAME"]="0"
            df5["RATING"]=0
            featuring=pd.merge(df4,df5,on="PROGRAM_NAME",how="left").fillna(0)
            featuring["RATING"]=0
            featuring1=featuring[["PROGRAM_NAME","Total","RATING"]]
        else:
            df5=df5.round(decimals=1)   
            featuring=pd.merge(df4,df5,on="PROGRAM_NAME",how="left").fillna(0)
            featuring1=featuring[["PROGRAM_NAME","Total","RATING"]]
        featuring2=featuring1.nlargest(3, "Total")
        if featuring2.empty:
            featuring2=pd.DataFrame(index=[0], columns=['PROGRAM_NAME','Total','RATING'])

        featuring2["PROGRAM_NAME"].fillna("",inplace=True)
        featuring2["Total"].fillna(0,inplace=True)
        featuring2["RATING"].fillna(0,inplace=True)

        featuring_in=featuring2.to_dict("records")
        collection5=db.audio_feedback.aggregate([{"$match":{'$and':[
                {"AUDIO_ID.NARRATOR_ID._id":{
                            "$in":narrator_list

                        }},
                        { 'USER.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        {'USER.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                        {'USER.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                        {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                                    {"AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
                        {'USER.IS_DISABLED':{"$ne":'Y'}},
                        {'RATING':{"$ne":0}}
                        ]}},
                        {"$group":{"_id":{"PROGRAM_NAME":"$AUDIO_ID.PROGRAM_ID.PROGRAM_NAME","AUDIO_TITLE":"$AUDIO_ID.AUDIO_TITLE"}
                                ,"RATING":{"$avg":"$RATING"}}}
                        ,
                        {"$project":{"_id":0,"PROGRAM_NAME":"$_id.PROGRAM_NAME","AUDIO_TITLE":"$_id.AUDIO_TITLE","RATING":1}},
                                                ])
        df07= list(collection5)
        df7= pd.DataFrame.from_dict(df07).fillna(0)
        df6=practice.groupby(["AUDIO_TITLE","PROGRAM_NAME"]).sum().reset_index()
        if df7.empty == True:
            df7["PROGRAM_NAME"]="0"
            df7["AUDIO_TITLE"]="0"
            df7["RATING"]="0"
            mindfultrack=pd.merge(df6,df7,on=["AUDIO_TITLE","PROGRAM_NAME"],how="left")
            mindfultrack["RATING"]=0
            mindfultrack1=mindfultrack[["AUDIO_TITLE","PROGRAM_NAME","Total","RATING"]]
        else:
            df7=df7.round(decimals=1)
            mindfultrack=pd.merge(df6,df7,on=["AUDIO_TITLE","PROGRAM_NAME"],how="right")
    #             mindfultrack['RATING']=mindfultrack['RATING'].fillna('NO_Rating')
            mindfultrack1=mindfultrack[["AUDIO_TITLE","PROGRAM_NAME","Total","RATING"]]
        mindfultrack2=mindfultrack1.nlargest(3, "Total")
        mindfultrack2.reset_index(drop=True, inplace=True)
        dfimage=pd.DataFrame()
        for i in range(len(mindfultrack2.index)):
            collection = db.programs_audio.aggregate([{"$match":{"AUDIO_TITLE":mindfultrack2["AUDIO_TITLE"][i],
                                                                 "PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]},
                                                                "PROGRAM_ID.PROGRAM_NAME":mindfultrack2["PROGRAM_NAME"][i]}},
                                                    {"$project":{"AUDIO_ID":"$_id","_id" : 0,"AUDIO_TITLE":"$AUDIO_TITLE",
                                                                "PROGRAM_NAME":"$PROGRAM_ID.PROGRAM_NAME",
                                                    "CLASSROOM_IMAGE_URL":"$CLASSROOM_IMAGE_URL",
                                                    "IMAGE_URL":"$IMAGE_URL","AUDIO_NAME" : "$AUDIO_NAME"}}
                                                    ])
            dfimage1= DataFrame(list(collection))
            dfimage=dfimage.append(dfimage1)
        dfimage.reset_index(drop=True, inplace=True)
        dfimage["VIDEO_ID"] = dfimage['AUDIO_NAME']
        dfimage["VIDEO_ID"] = dfimage[dfimage['AUDIO_NAME'].str.contains("=")]['AUDIO_NAME'].str.split('=').str[1]
        dfimage["VIDEO_ID"].fillna(dfimage['AUDIO_NAME'], inplace=True)
        conditions  = [dfimage["VIDEO_ID"] != dfimage['AUDIO_NAME'], dfimage["VIDEO_ID"] == dfimage['AUDIO_NAME']]
        choices     = [1, 0]
        dfimage["IS_VIDEO"] = np.select(conditions, choices)
        dfimage = dfimage.drop(['AUDIO_NAME'], axis=1)



        mindfultrack0=pd.merge(mindfultrack2,dfimage,on=["AUDIO_TITLE","PROGRAM_NAME"],how="left").fillna(0)
        if mindfultrack0.empty:
            mindfultrack0=pd.DataFrame(index=[0], columns=['AUDIO_ID','AUDIO_TITLE','PROGRAM_NAME','Total','RATING','IMAGE_URL',"CLASSROOM_IMAGE_URL",'VIDEO_ID','IS_VIDEO'])
        mindfultrack0=mindfultrack0.nlargest(3, "Total") #############
        mindfultrack0["AUDIO_TITLE"].fillna("",inplace=True)
        mindfultrack0["PROGRAM_NAME"].fillna("",inplace=True)
        mindfultrack0["Total"].fillna(0,inplace=True)
        mindfultrack0["RATING"].fillna(0,inplace=True)
        mindfultrack0["IMAGE_URL"].fillna("",inplace=True)
        mindfultrack0["CLASSROOM_IMAGE_URL"].fillna("",inplace=True)
        mindfultrack0["VIDEO_ID"].fillna("",inplace=True)
        mindfultrack0["IS_VIDEO"].fillna(0,inplace=True)

        Top_mindfultrack_in=mindfultrack0.to_dict("records")
        collection3=db.audio_feedback.aggregate([{"$match":{'$and':[
                {"AUDIO_ID.NARRATOR_ID._id":{
                            "$in":narrator_list

                        }},
                        { 'USER.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        {'USER.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                        {'USER.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                        {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                        {'USER.IS_DISABLED':{"$ne":'Y'}},
                                    {"AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
                        {'COMMENT':{'$exists':1}},
                        {'COMMENT':{"$not":{"$regex":" ",'$options':'i'}}},
                        {'COMMENT':{"$ne":""}},

                        ]}},
                        {"$project":{"_id":0,"USER_NAME":"$USER.USER_NAME","USER_PROFILE" : "$USER.IMAGE_URL" ,
                                     "PROGRAM_NAME":"$AUDIO_ID.PROGRAM_ID.PROGRAM_NAME",
                                    'MODIFIED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$MODIFIED_DATE"}}, "RATING":1,"COMMENT":1,
                                    "AUDIO_TITLE":"$AUDIO_ID.AUDIO_TITLE","NARRATOR":"$AUDIO_ID.NARRATEDBY"}},
                        {"$sort":{'MODIFIED_DATE':-1}},{"$limit":30}
                                                ])
        df03= list(collection3)
        df3= pd.DataFrame.from_dict(df03).fillna(0)
        if df3.empty==True:
            recent_comment=[]
        else:


            if 'USER_PROFILE' not in df3.columns:
                df3['USER_PROFILE']=""
            else:
                df3


        #####################sentiment_analysis##################
            spec_chars = ["!",'"',"#","%","&","'","(",")",
                        "*","+",",","-",".","/",":",";","<",
                        "=",">","?","@","[","\\","]","^","_",
                        "`","{","|","}","~","–","\n"]
            df3['sentiment'] = df3.COMMENT.apply(lambda x: TextBlob(str(x)).sentiment.polarity)
            df10=df3[df3["sentiment"]>= 0.30]
            # current_Date = (datetime.datetime.today()- timedelta(60)).strftime ('%Y-%m-%d')
            df10=df10.sort_values(by="MODIFIED_DATE")
            recent_comment=df10[["USER_NAME","MODIFIED_DATE","RATING","COMMENT","USER_PROFILE"]].to_dict("records")
    collection4 = db.narrator_profile.aggregate([
        {"$match":
        {"$and":[{'_id':{"$ne":ObjectId(id)}}]}},
        {"$project":{"_id":0,"NARRATOR_NAME":"$NARRATOR_NAME","NARRATOR_IMAGE":"$NARRATOR_IMAGE"}}

        ])
    df11= DataFrame(list(collection4)).fillna(0)
    if df11.empty:
        df11=pd.DataFrame(index=[0], columns=['NARRATOR_NAME','NARRATOR_IMAGE'])

    df11["NARRATOR_NAME"].fillna("",inplace=True)
    df11["NARRATOR_IMAGE"].fillna("",inplace=True)
    other_narrator=df11.to_dict("records")
    temp={"info":info,"featuring_in":featuring_in,"Top_mindfultrack_in":Top_mindfultrack_in,
          "recent_comment":recent_comment,"other_narrators":other_narrator}
    return json.dumps(temp, default=str)  





@app.route('/rtusercount')
def realtimeusercount():
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    collection = db.audio_track_master
    query4=[{"$match":{
             '$and':[{ 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
              {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
              {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
              {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
              {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
              {'USER_ID.DEVICE_USED':{"$regex":'webapp','$options':'i'}},
              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
              {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
              {'MODIFIED_DATE': {'$gte': datetime.datetime.utcnow()-datetime.timedelta(7)}}
              ]}},
           {'$group':
           {'_id':'$USER_ID._id',
               'State':{'$first':'$USER_ID.schoolId.STATE'},
               'Country':{'$first':'$USER_ID.schoolId.COUNTRY'}
               }}
           ]
    realtime=list(collection.aggregate(query4))
    realtimeuserpractising=pd.DataFrame(realtime)
    #####################family######################
    query=[{"$match":{
             '$and':[{ 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
              {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
              {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
#               {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
              {'USER_ID.ROLE_ID._id':{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
              {'USER_ID.DEVICE_USED':{"$regex":'webapp','$options':'i'}},
              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
              {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
              {'MODIFIED_DATE': {'$gte': datetime.datetime.utcnow()-datetime.timedelta(7)}}
              ]}},
           {'$group':
           {'_id':'$USER_ID._id',
               'State':{'$first':'$USER_ID.schoolId.STATE'},
               'Country':{'$first':'$USER_ID.schoolId.COUNTRY'}
               }}
           ]
    realtimeparent=list(collection.aggregate(query))
    realtimeparentpractising=pd.DataFrame(realtimeparent)
    temp={'userpracticing':len(realtimeuserpractising),'parentrpracticing':len(realtimeparentpractising)}
    return json.dumps(temp)

@app.route('/rtmapcount')
def realtimemaprcount():
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    collection = db.audio_track_master
    query4=[{"$match":{
             '$and':[{ 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
              {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
              {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
              {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
              {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
              {'USER_ID.DEVICE_USED':{"$regex":'webapp','$options':'i'}},
              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
              {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
              {'MODIFIED_DATE': {'$gte': datetime.datetime.utcnow()-datetime.timedelta(7)}}
              ]}},
           {'$group':
           {'_id':'$USER_ID._id',
               'State':{'$first':'$USER_ID.schoolId.STATE'},
               'Country':{'$first':'$USER_ID.schoolId.COUNTRY'}
               }}
           ]
    realtime=list(collection.aggregate(query4))
    realtimeuserpractising=pd.DataFrame(realtime)
    if realtimeuserpractising.empty:
        df = pd.DataFrame(columns=['State', 'STATE_SHOT','text','_id'])
        for i in range(1):
            df.loc[i] = ['none'] +['none'] +['NO USER PRACTICING RIGHT NOW']+ [0]
            df1=df[["State","_id","STATE_SHOT",'text']]
            links0 =df1.rename(columns={'STATE_SHOT' : 'code', '_id' : 'value','State':'name','text':'text'}).to_dict('r')
    else:
        us_state_shot = {
            'Alabama': 'AL',
            'Alaska': 'AK',
            'American Samoa': 'AS',
            'Arizona': 'AZ',
            'Arkansas': 'AR',
            'California': 'CA',
            'Colorado': 'CO',
            'Connecticut': 'CT',
            'Delaware': 'DE',
            'District of Columbia': 'DC',
            'Florida': 'FL',
            'Georgia': 'GA',
            'Guam': 'GU',
            'Hawaii': 'HI',
            'Idaho': 'ID',
            'Illinois': 'IL',
            'Indiana': 'IN',
            'Iowa': 'IA',
            'Kansas': 'KS',
            'Kentucky': 'KY',
            'Louisiana': 'LA',
            'Maine': 'ME',
            'Maryland': 'MD',
            'Massachusetts': 'MA',
            'Michigan': 'MI',
            'Minnesota': 'MN',
            'Mississippi': 'MS',
            'Missouri': 'MO',
            'Montana': 'MT',
            'Nebraska': 'NE',
            'Nevada': 'NV',
            'New Hampshire': 'NH',
            'New Jersey': 'NJ',
            'New Mexico': 'NM',
            'New York': 'NY',
            'North Carolina': 'NC',
            'North Dakota': 'ND',
            'Northern Mariana Islands':'MP',
            'Ohio': 'OH',
            'Oklahoma': 'OK',
            'Oregon': 'OR',
            'Pennsylvania': 'PA',
            'Puerto Rico': 'PR',
            'Rhode Island': 'RI',
            'South Carolina': 'SC',
            'South Dakota': 'SD',
            'Tennessee': 'TN',
            'Texas': 'TX',
            'Utah': 'UT',
            'Vermont': 'VT',
            'Virgin Islands': 'VI',
            'Virginia': 'VA',
            'Washington': 'WA',
            'West Virginia': 'WV',
            'Wisconsin': 'WI',
            'Wyoming': 'WY'
        }
        realtimeuserpractising["STATE_SHOT"] = realtimeuserpractising["State"].map(us_state_shot) 
        df1=realtimeuserpractising.groupby(["State","STATE_SHOT"]).count().reset_index()
        df2=df1[["State","_id","STATE_SHOT"]]
        links0 =df2.rename(columns={'STATE_SHOT' : 'code', '_id' : 'z','State':'name'}).to_dict('r')
    return json.dumps(links0)

@app.route('/rtlausdmapcount')
def realtimelausdmaprcount():
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    collection = db.audio_track_master
    query4=[{"$match":{
             '$and':[{ 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
              {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
              {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
              {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
              {'USER_ID.schoolId.STATE':"California"},
              {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
              {'USER_ID.DEVICE_USED':{"$regex":'webapp','$options':'i'}},
              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
              {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
              {'MODIFIED_DATE': {'$gte': datetime.datetime.utcnow()-datetime.timedelta(7)}}
              ]}},
           {'$group':
           {'_id':'$USER_ID._id',
               'State':{'$first':'$USER_ID.schoolId.CITY'},
               'Country':{'$first':'$USER_ID.schoolId.COUNTRY'}
               }}
           ]
    realtime=list(collection.aggregate(query4))
    realtimeuserpractising=pd.DataFrame(realtime)
    if realtimeuserpractising.empty:
        df = pd.DataFrame(columns=['State', 'STATE_SHOT','text','_id'])
        for i in range(1):
            df.loc[i] = ['none'] +['none'] +['NO USER PRACTICING RIGHT NOW']+ [0]
            df1=df[["State","_id","STATE_SHOT",'text']]
            links0 =df1.rename(columns={'STATE_SHOT' : 'code', '_id' : 'z','State':'name','text':'text'}).to_dict('r')
    else:
        us_state_shot = {
           'Santa Barbara':'us-ca-083',
        'Ventura':'us-ca-111',
        'San Bernardino':'us-ca-071',
        'Yuba':'us-ca-115',
        'Sutter':'us-ca-101',
        'Kings':'us-ca-031',
        'Monterey':'us-ca-053',
        'Nevada':'us-ca-057',
        'Orange':'us-ca-059',
        'Riverside':'us-ca-065',
        'San Diego':'us-ca-073',
        'Marin':'us-ca-041',
        'San Francisco':'us-ca-075',
        'Solano':'us-ca-095',
        'Sonoma':'us-ca-097',
        'Napa':'us-ca-055',
        'Contra Costa':'us-ca-013',
        'Calaveras':'us-ca-009',
        'San Joaquin':'us-ca-077',
        'Lassen':'us-ca-035',
        'Sierra':'us-ca-091',
        'Sacramento':'us-ca-067',
        'El Dorado':'us-ca-017',
        'Stanislaus':'us-ca-099',
        'Placer':'us-ca-061',
        'Mariposa':'us-ca-043',
        'Plumas':'us-ca-063',
        'Modoc':'us-ca-049',
        'Shasta':'us-ca-089',
        'Tuolumne':'us-ca-109',
        'Madera':'us-ca-039',
        'Alpine':'us-ca-003',
        'San Benito':'us-ca-069',
        'Merced':'us-ca-047',
        'San Luis Obispo':'us-ca-079',
        'Colusa':'us-ca-011',
        'Butte':'us-ca-007',
        'San Mateo':'us-ca-081',
        'Santa Cruz':'us-ca-087',
        'Santa Clara':'us-ca-085',
        'Kern':'us-ca-029',
        'Amador':'us-ca-005',
        'Yolo':'us-ca-113',
        'Lake':'us-ca-033',
        'Mendocino':'us-ca-045',
        'Tehama':'us-ca-103',
        'Humboldt':'us-ca-023',
        'Siskiyou':'us-ca-093',
        'Inyo':'us-ca-027',
        'Alameda':'us-ca-001',
        'Los Angeles':'us-ca-037',
        'Imperial':'us-ca-025',
        'Glenn':'us-ca-021',
        'Tulare':'us-ca-107',
        'Fresno':'us-ca-019',
        'Del Norte':'us-ca-015',
        'Trinity':'us-ca-105',
        'Mono':'us-ca-051',

        }
        realtimeuserpractising["STATE_SHOT"] = realtimeuserpractising["State"].map(us_state_shot) 
        df1=realtimeuserpractising.groupby(["State","STATE_SHOT"]).count().reset_index()
        df2=df1[["State","_id","STATE_SHOT"]]
        links0 =df2.rename(columns={'STATE_SHOT' : 'code', '_id' : 'z','State':'name'}).to_dict('r')
    return json.dumps(links0)

@app.route('/userpracticelist/<userid>/<classid>')
def user_practice_list(userid,classid): 

    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass

    collection = db.user_master.aggregate([
    {"$match":
        {"$and":[
        {"_id":{"$in":[ObjectId(""+userid+"")]}},
             {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {'IS_DISABLED':{"$ne":'Y'}},
    {'IS_BLOCKED':{"$ne":'Y'}}, 
    {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
    {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}}
    ]}},
    {"$match":
    {"$and":[{'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
    {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}]}},
    {"$project":{"_id":0,"USER_ID":"$_id","ID":"$schoolId._id","school_name":"$schoolId.NAME","USER_NAME":"$USER_NAME",
                "email_id":"$EMAIL_ID","district_name":"$DISTRICT_ID.DISTRICT_NAME"}}

    ])
    df= DataFrame(list(collection)).fillna(0)

    if df.empty == True:
        temp="Not a Valid User"
        return json.dumps(temp)
    else:
        user_id=df["USER_ID"].tolist()

        if classid == 'undefined':
            temp="Invalid ClassID"
            return json.dumps(temp)

        if len(classid)<10:
            temp="Invalid ClassID"
            return json.dumps(data)    

        else:

            collection2 = db.audio_track_master.aggregate([
            {"$match":{"USER_ID._id":{ "$in":user_id},
            "CLASS_ID._id":{"$in":[ObjectId(""+classid+"")]}
            }},
            {'$project':{'_id':"$USER_ID._id","CLASS_ID":"$CLASS_ID._id"}}
            ])
            df22= DataFrame(list(collection2))
            print('df22',df22)

            if df22.empty == True:
                collection22 = db.class_master.aggregate([
                    {"$match":{
                        "USER_ID._id":{ "$in":user_id},
                        "_id":{"$in":[ObjectId(""+classid+"")]}
                    }},
                    {'$project':{'_id':"$USER_ID._id","CLASS_ID":"$_id"}}
                     ])
                df22= DataFrame(list(collection22))
            if df22.empty == True:
                df22 = df22.append({'_id': userid, 'CLASS_ID': ""}, ignore_index=True)
            print('df22',df22)
            cid = str(df22["CLASS_ID"][0])


            collection2 = db.audio_track_master.aggregate([
                {"$match":{"USER_ID._id":{
                                "$in":user_id

                            },
                           "CLASS_ID._id":{
                                "$in":[ObjectId(""+cid+"")]

                            }}},
                {"$match":{
                 '$and':[
                     { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                  {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                  {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                  {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                  {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                  {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                  {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},     
                  ]}},
                   {'$project':{'_id':0,
                        'MODIFIED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$MODIFIED_DATE"}},
                               } },
                 {"$group":{"_id":"$MODIFIED_DATE",
                             "count": {"$sum":1}}},
                {'$project':{'_id':0,
                                "MODIFIED_DATE":"$_id",
                             "Total":"$count"}},{"$sort":{"MODIFIED_DATE":1}}
                  ])
            df2= DataFrame(list(collection2)).fillna(0)
            print('df2',df2)

            if df2.empty == True:
                date_list = [datetime.date.today() + datetime.timedelta(days=x) for x in range(180)]
                df3 = pd.DataFrame({'MODIFIED_DATE':date_list})
                df3['MODIFIED_DATE'] = pd.to_datetime(df3['MODIFIED_DATE'], format='%Y-%m-%d')
                df3['MODIFIED_DATE']=df3[df3['MODIFIED_DATE'].dt.dayofweek < 5]
                df3.dropna(inplace=True)
                df3=df3.sort_values(by="MODIFIED_DATE") 
                df3['MODIFIED_DATE'] =df3['MODIFIED_DATE'].head(90)
                df3.reset_index(drop=True, inplace=True)
                final_dates=df3[df3.MODIFIED_DATE.notnull()]
                final_dates['MODIFIED_DATE'] = pd.to_datetime(final_dates['MODIFIED_DATE'], format='%Y-%m-%d')
                final_dates['day'] = final_dates['MODIFIED_DATE'].dt.day
                final_dates['month'] = final_dates['MODIFIED_DATE'].dt.month
                final_dates['Year'] = final_dates['MODIFIED_DATE'].dt.year
                final=final_dates[["Year","month","day"]]
                final.dropna(inplace=True)
                final=final.astype(int)
                temp={"events":final.to_dict("records")}
            else:
                total_days=len(df2)
                r1 = total_days%90
                r=90-r1
                latest_date=df2['MODIFIED_DATE'].max()
                base = latest_date
                date_list = [(datetime.datetime.strptime(base,'%Y-%m-%d') +datetime.timedelta(days=1)) + datetime.timedelta(days=x) for x in range(90)]
                df3 = pd.DataFrame({'MODIFIED_DATE':date_list})
                df3['MODIFIED_DATE']=df3[df3['MODIFIED_DATE'].dt.dayofweek < 5]
                df3.dropna(inplace=True)
                df3=df3.sort_values(by="MODIFIED_DATE")
                df3['MODIFIED_DATE'] = pd.to_datetime(df3['MODIFIED_DATE'], format='%Y-%m-%d')
                df3['MODIFIED_DATE'] =df3['MODIFIED_DATE'].head(r)
                df3.reset_index(drop=True, inplace=True)
                df3['MODIFIED_DATE'].dropna(inplace=True)
                df4=df2[["MODIFIED_DATE"]]
                final_dates = df4.append(df3, ignore_index=True)
                final_dates['MODIFIED_DATE'] = pd.to_datetime(final_dates['MODIFIED_DATE'], format='%Y-%m-%d')
                final_dates['day'] = final_dates['MODIFIED_DATE'].dt.day
                final_dates['month'] = final_dates['MODIFIED_DATE'].dt.month
                final_dates['Year'] = final_dates['MODIFIED_DATE'].dt.year
                final=final_dates[["Year","month","day"]]
                final.dropna(inplace=True)
                final=final.astype(int)
                temp={"events":final.to_dict("records")}
                return json.dumps(temp)


@app.route('/practiceprogress/<schoolid>/<startdate>/<enddate>')
def practice_progress(schoolid,startdate,enddate):
    import datetime
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    startdate= dateutil.parser.parse(str(startdate))
    enddat= dateutil.parser.parse(str(enddate))
    enddate=datetime.datetime.combine(enddat,datetime.time.max)

    # username = urllib.parse.quote_plus('adminIE')                                     #SwitchedToBeta
    # password = urllib.parse.quote_plus('CtZh5Nqp8Qn9LHUDx2GH')
    # client = MongoClient("mongodb://%s:%s@54.184.165.106:27017/" % (username, password))
    # db=client.compass_beta
    if len(schoolid)<10:
        data={'Result':0}
        return json.dumps(data)    
    else:

        collection = db.user_master.aggregate([
        {"$match":
            {"$and":[
            {"schoolId._id":{"$in":[ObjectId(""+schoolid+"")]}},
                 {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {'IS_DISABLED':{"$ne":'Y'}},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
        {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}},
          {'schoolId.NAME':{"$not":{"$regex":'test', '$options':'i'}}},
             {'EMAIL_ID':{"$not":{"$regex":"Test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
        {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}]}},
        {"$project":{"USER_ID":"$_id","ID":"$schoolId._id","school_name":"$schoolId.NAME","USER_NAME":"$USER_NAME",
                    "email_id":"$EMAIL_ID","district_name":"$DISTRICT_ID.DISTRICT_NAME"}}

        ])


        df= DataFrame(list(collection)).fillna(0)
        if df.empty == True:
            temp={'Result':0}
            return json.dumps(temp)
        else:
            df

        user_merge=df[["USER_ID","USER_NAME","email_id"]]
        USER_ID_list=df["USER_ID"].tolist()
        total_user=len(df["USER_ID"])

    #     print(df)
        collection1 = db.audio_track_master.aggregate([ {"$match":
                    {"$and":[
                    {"USER_ID._id":{"$in":USER_ID_list}}]}},
            {"$match":{
                 '$and':[{ 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                  {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                  {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                  {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                         {"MODIFIED_DATE":{'$gte':startdate, '$lte':enddate}},
                   {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                  {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                  {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                  {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},    
                  ]}},
                  {'$group':{
                      '_id':'$USER_ID._id',
                      'Last_Prac_Date':{'$max':'$MODIFIED_DATE'},
                      'Practice_Sessions':{'$sum':1},
                      'Mindful_Minutes':{'$sum':{'$round':
                          [{'$divide':[{'$subtract':
                              ['$CURSOR_END','$cursorStart']},60]},0]}}  
                      }},
                 {'$project':{'_id':0,
                     'USER_ID':'$_id',
                     'Last_Practice_Date':'$Last_Prac_Date',
                     'Practice_Sessions':'$Practice_Sessions',
                     'Mindful_Minutes':'$Mindful_Minutes'
                     }
                     }])

        df2=pd.DataFrame(list(collection1))
#         print(df2)

        if "USER_ID" not in df2.columns:
            df2["USER_ID"] = 0
        if "Last_Practice_Date" not in df2.columns:
            df2["Last_Practice_Date"] = "NO INFO"
        if "Practice_Sessions" not in df2.columns:
            df2["Practice_Sessions"] = "NO PRACTICE"
        if "Mindful_Minutes" not in df2.columns:
            df2["Mindful_Minutes"] = 0


        if df2.empty:
            USER_ID = 0
            Last_Practice_Date = 0
            Practice_Sessions = 0
            Mindful_Minutes = 0



        collection3=db.login_tracking.aggregate([{"$match":{'$and':[{"USER_ID._id":{
                            "$in":USER_ID_list}},
                            {'CREATED_DATE':{'$gte':startdate, '$lte':enddate}},]}},   

                                                 
        {"$group":{"_id":"$USER_ID._id",
                "count":{"$sum":1},
                }},
        {"$project":{"_id":0,"USER_ID":"$_id","login_count":"$count"}}
                ])
        df4= DataFrame(list(collection3)).fillna(0)

        collection4=db.invite_master.aggregate([{"$match":{"INVITED_USER_ID._id":{
                            "$in":USER_ID_list

                        } ,'IS_DISABLED':{"$ne":'Y'}   ,"USER_ID.schoolId":{"$exists":1}}},
        {"$group":{"_id":"$INVITED_USER_ID._id",
                "count":{"$sum":1},
                }},
        {"$project":{"_id":0,"USER_ID":"$_id","count(ONBOARD)":"$count"}}
                ])
        df5= DataFrame(list(collection4)).fillna(0)
        if df5.empty == True:
            onboarded_user=0
        else:
            onboarded_user=len(df5["USER_ID"])

        dfnew=pd.merge(df,df5,on="USER_ID",how="outer").fillna(0)
        df6=pd.merge(dfnew,df2,on="USER_ID",how="left").fillna(0)
    #     df7=pd.merge(df6,df4,on="USER_ID",how="left").fillna(0)

        if df4.empty == True:
            not_practining=0
            not_login=0
            practice_sessions=0
        else:
            df7=pd.merge(df6,df4,on="USER_ID",how="left").fillna(0)
#             print(df7)
            not_practining=df7[(df7.Practice_Sessions == 0)]["USER_ID"].count()
            not_login=df7[(df7.login_count == 0)]["USER_ID"].count()
            practice_sessions=df7["Practice_Sessions"].sum()

        cards={"total_user":int(total_user),"active_user":len(df2["USER_ID"]),"not_practining":int(not_practining),"not_login":int(not_login),
               "onboarded_user":int(onboarded_user),"practice_sessions":int(practice_sessions)}


        collection5 = db.audio_track_master.aggregate([
            {"$match":{
                    '$and':[
    #                 {"USER_ID._id":{"$in": db.class_master.distinct("USER_ID._id",{"IS_DEFAULT" : "Y"})}},
                    { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        {"USER_ID._id":{"$in":USER_ID_list}},
                    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                    {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                    {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                    {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},                    
                      {'MODIFIED_DATE':{'$gte':startdate, '$lte':enddate}}, 
                        {'PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME':{"$not":{"$regex":"wellness",'$options':'i'}}},
                    {'PROGRAM_AUDIO_ID.AUDIO_DAY':{"$not":{"$regex":"bonus",'$options':'i'}}},
                  {'PROGRAM_AUDIO_ID.AUDIO_DAY':{"$not":{"$regex":"sound",'$options':'i'}}},
                    {'PROGRAM_AUDIO_ID.AUDIO_DAY':{'$not':{'$regex':'Counselor','$options':'i'}}},    
                    {"PROGRAM_AUDIO_ID.AUDIO_DAY":{"$not":{"$regex":'Bonus','$options':'i'}}},
                    {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                    {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                    {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                    {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},    
                    ]}},
            {'$group':{'_id':'$USER_ID._id',
    #                     "PROGRAMID":"$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_ID",
                        "PROGRAMID":{"$last":"$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_ID"}, 
                      "PROGRAM":{"$last":"$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME"}, 
                     "PRACTICE_DAY":{"$last":"$PROGRAM_AUDIO_ID.AUDIO_DAY"},
    #                 "PRACTICE_DAY":{"$last":"$PROGRAM_AUDIO_ID.AUDIO_DAY"},
                "TOTAL_PRACTICE_DAY":{"$addToSet":"$PROGRAM_AUDIO_ID.AUDIO_DAY"},
                    'Last_Prac_Date':{'$max':'$MODIFIED_DATE'},
                    'Practice_Sessions':{'$sum':1},
                    'total_minutes':{"$sum":{'$round':
                                    [{'$divide':["$PROGRAM_AUDIO_ID.AUDIO_LENGTH",60]},0]}},
                    'Avg_Mindful_Minutes':{'$avg':{'$round':
                                    [{'$divide':[{'$subtract':
                                    ['$CURSOR_END','$cursorStart']},60]},0]}},
                    'Mindful_Minutes':{'$sum':{'$round':
                                    [{'$divide':[{'$subtract':
                                    ['$CURSOR_END','$cursorStart']},60]},0]}}  
                                    }},
                 {'$project':{'_id':0,
                            'USER_ID':'$_id',
                            'PROGRAMID':'$PROGRAMID',
                            'PROGRAM':'$PROGRAM',
                            'PRACTICE_DAY':'$PRACTICE_DAY',
                            "TOTAL_PRACTICE_DAY": {"$size":"$TOTAL_PRACTICE_DAY"},
                            'Last_Practice_Date':'$Last_Prac_Date',
                            'Practice_Sessions':'$Practice_Sessions',
                            'Mindful_Minutes':'$Mindful_Minutes',
                            'Avg_Mindful_Minutes':'$Avg_Mindful_Minutes',
                            'total_minutes':'$total_minutes'
                             }
                             }])

        df8=pd.DataFrame(list(collection5))
    #     df8["PROGRAMID"]=df8["PROGRAMID"].replace({1:11, 2:12, 3:13, 4:9})

    #     if df8.empty == True:
        if df8.empty:
            df8 = pd.DataFrame(index=[0],columns=['USER_ID','PROGRAM','PRACTICE_DAY','TOTAL_PRACTICE_DAY',
                                    'Last_Practice_Date','Practice_Sessions','Mindful_Minutes','Avg_Mindful_Minutes','total_minutes'])
            df8 = df8.fillna(0)
            df8["percentage"] = 0
    #         table0=pd.merge(user_merge,df8,on="USER_ID",how="right")
    #         print(table0)
            table0 = pd.DataFrame(columns=[["USER_ID","USER_NAME","email_id","PROGRAM","PRACTICE_DAY","Avg_Mindful_Minutes","Practice_Sessions","percentage"]])
    #         table0[["Avg_Mindful_Minutes","Practice_Sessions","percentage"]]=table0[["Avg_Mindful_Minutes","Practice_Sessions","percentage"]].apply(lambda x:round(x,2))
            table=table0[["USER_ID","USER_NAME","email_id","PROGRAM","PRACTICE_DAY","Avg_Mindful_Minutes","Practice_Sessions","percentage"]].fillna(0).astype(str)

            df9=df8.groupby(["PROGRAM"]).agg({'percentage':'mean'}).round(2).reset_index()
            piechart=df9.rename(columns={'PROGRAM' : 'name', 'percentage' : 'y'}).to_dict('r')
        else:
            df8["PROGRAMID"]=df8["PROGRAMID"].replace({1:11, 2:12, 3:13, 4:9})
            df8["percentage"]=((df8["TOTAL_PRACTICE_DAY"]/90)*100).round(2)
            table0=pd.merge(user_merge,df8,on="USER_ID",how="right")
    #         print(table0)
            table0[["Avg_Mindful_Minutes","Practice_Sessions","percentage"]]=table0[["Avg_Mindful_Minutes","Practice_Sessions","percentage"]].apply(lambda x:round(x,2))
            table=table0[["USER_ID","USER_NAME","email_id","PROGRAM","PRACTICE_DAY","Avg_Mindful_Minutes","Practice_Sessions","percentage"]].fillna(0).astype(str)

            df9=df8.groupby(["PROGRAM"]).agg({'percentage':'mean'}).round(2).reset_index()
            piechart=df9.rename(columns={'PROGRAM' : 'name', 'percentage' : 'y'}).to_dict('r')


        dateStr2 = "2020-08-01T00:00:00.000Z"
        myDatetime2 = dateutil.parser.parse(dateStr2)
    #     print(myDatetime2)
        ##################################
        dateStr4 = "2021-07-31T23:59:59.000Z"
        myDatetime4 = dateutil.parser.parse(dateStr4)
    #     print(myDatetime4)
        ######################  USER PRACTICE 2020-2021(CSY) ############################################
        collection6=db.audio_track_master.aggregate([{"$match":
                    {"$and":[
                    {"USER_ID._id":{"$in":USER_ID_list}},

                        {'USER_ID.IS_DISABLED':{'$ne':'Y'}},
                        {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                        {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}}, 
                       { 'USER_ID.EMAIL_ID':{'$ne':""}},
                        {"MODIFIED_DATE":{'$gte':startdate, '$lte':enddate}},
                        {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                    {'USER_ID.USER_NAME':{"$not": {'$regex' : 'test', '$options' : 'i'}}},
                        {'USER_ID.EMAIL_ID':{"$not": {'$regex' : 'test', '$options' : 'i'}}},
                        {'USER_ID.EMAIL_ID':{"$not": {'$regex' : '1gen', '$options' : 'i'}}},
                        {'USER_ID.schoolId.NAME':{"$not":{"$regex":'blocked', '$options':'i'}}}
                        ]}},
                 {'$project':{'_id':0, 'MODIFIED_DATE':{"$dateToString":{"format":"%Y-%m-%d","date":'$MODIFIED_DATE'}}}}, 
                {'$group':{'_id':'$MODIFIED_DATE', 
                        'date':{'$first':'$MODIFIED_DATE'}, 
                        'Users_Practice_CSY':{'$sum':1}}},
                {'$project':{'_id':0, 'Practice_date':'$_id', 
                            'Users_Practice_CSY':'$Users_Practice_CSY'}}, 
                {"$sort":{'Practice_date':1}}])
        df10=pd.DataFrame(list(collection6))
        if df10.empty==True:
            practicehistorychart={"practiceHistory":'NO DATA',"CumpracticeHistory":'NO DATA'}
        else:
            df11=df10[['Practice_date','Users_Practice_CSY']]
            df11['Practice_date'] = pd.to_datetime(df11['Practice_date'])
            df12= df11.groupby(df11['Practice_date'].dt.date)['Users_Practice_CSY'].sum().reset_index()
            df12['Practice_date'] = pd.to_datetime(df12['Practice_date'])
            df12['Practice_date'] = df12['Practice_date'].astype(np.int64) / int(1e6)
            df12['Cumulative_practice'] = df12['Users_Practice_CSY'].cumsum()
            df13=df12[['Practice_date','Users_Practice_CSY']]
            practiceHistory=df13.values.tolist()
            df14=df12[['Practice_date','Cumulative_practice']]
            CumpracticeHistory=df14.values.tolist()
            practicehistorychart={"practiceHistory":practiceHistory,"CumpracticeHistory":CumpracticeHistory}

        collection7=db.login_tracking.aggregate([{"$match":{'$and':[{"USER_ID._id":{
                            "$in":USER_ID_list

                        }}    ,
                                {"CREATED_DATE":{'$gte':startdate, '$lte':enddate}},]}},                          


                         {'$project':{'_id':0, 'CREATED_DATE':{"$dateToString":{"format":"%Y-%m-%d","date":'$CREATED_DATE'}}}}, 
        {'$group':{'_id':'$CREATED_DATE', 
                        'date':{'$first':'$CREATED_DATE'}, 
                        'Users_Practice_CSY':{'$sum':1}}},

                {'$project':{'_id':0, 'Practice_date':'$_id', 
                            'Users_Practice_CSY':'$Users_Practice_CSY'}}, 
                {"$sort":{'Practice_date':1}}
                ])
        df15= DataFrame(list(collection7)).fillna(0)
    #     print(df15,'df15')

        if df4.empty == True:
            loginhistorychart={"loginHistory":"NO DATA","CumloginHistory":"NO DATA"}
        if df15.empty != True:
            df16=df15[['Practice_date','Users_Practice_CSY']]
            df16['Practice_date'] = pd.to_datetime(df16['Practice_date'])
            df17= df16.groupby(df16['Practice_date'].dt.date)['Users_Practice_CSY'].sum().reset_index()
            df17['Practice_date'] = pd.to_datetime(df17['Practice_date'])
            df17['Practice_date'] = df17['Practice_date'].astype(np.int64) / int(1e6)
            df17['Cumulative_practice'] = df17['Users_Practice_CSY'].cumsum()
            df18=df17[['Practice_date','Users_Practice_CSY']]
            loginHistory=df18.values.tolist()
            df19=df17[['Practice_date','Cumulative_practice']]
            CumloginHistory=df19.values.tolist()
            loginhistorychart={"loginHistory":loginHistory,"CumloginHistory":CumloginHistory}
        else:
            loginhistorychart={"loginHistory":"NO DATA","CumloginHistory":"NO DATA"}

        temp={"cards":cards,"piechart":piechart,"practicehistorychart":practicehistorychart,
                  "loginhistorychart":loginhistorychart,"table":table.values.tolist()}
        return json.dumps(temp)
    
    
# practice_progress('5f2bcaabba0be61b0c1e10e8','2021-8-1','2022-2-25')
# practice_progress('5f2bcaa2ba0be61b0c1df298','2021-11-01','2021-12-12')


@app.route('/practice_progress_table/<schoolid>/<table_type>/<startdate>/<enddate>')
def practice_progress_table(schoolid,table_type,startdate,enddate):
    import datetime
    startdate= dateutil.parser.parse(str(startdate))
    enddat= dateutil.parser.parse(str(enddate))
    enddate=datetime.datetime.combine(enddat,datetime.time.max)
#     import datetime
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass

    # username = urllib.parse.quote_plus('adminIE')                                     #SwitchedToBeta
    # password = urllib.parse.quote_plus('CtZh5Nqp8Qn9LHUDx2GH')
    # client = MongoClient("mongodb://%s:%s@54.184.165.106:27017/" % (username, password))
    # db=client.compass_beta

    collection = db.user_master.aggregate([
    {"$match":
            {"$and":[
            {"schoolId._id":{"$in":[ObjectId(""+schoolid+"")]}},
                 {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {'IS_DISABLED':{"$ne":'Y'}},
        {'IS_BLOCKED':{"$ne":'Y'}}, 
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
        {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}},
          {'schoolId.NAME':{"$not":{"$regex":'test', '$options':'i'}}},
             {'EMAIL_ID':{"$not":{"$regex":"Test",'$options':'i'}}},
        {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
        {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}]}},
    {"$project":{"USER_ID":"$_id","ID":"$schoolId._id","school_name":"$schoolId.NAME","USER_NAME":"$USER_NAME","SIGNUP_DATE":{ "$dateToString": { "format": "%Y-%m-%d", "date":"$CREATED_DATE"}},
                "email_id":"$EMAIL_ID","district_name":"$DISTRICT_ID.DISTRICT_NAME"}}

    ])
    df= DataFrame(list(collection)).fillna(0)
  
    if df.empty == True:
        temp={'Result':0}
        return json.dumps(temp)
    else:
        df
    user_merge=df[["USER_ID","USER_NAME","email_id"]]
    USER_ID_list=df["USER_ID"].tolist()
    total_user=df["USER_ID"].tolist()

    collection1 = db.audio_track_master.aggregate([ {"$match":
                {"$and":[
                {"USER_ID._id":{"$in":USER_ID_list}}]}},
        {"$match":{
             '$and':[{ 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
              {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
              {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
              {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                      {'MODIFIED_DATE':{'$gte':startdate, '$lte':enddate}},
               {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
              {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},    
              ]}},
              {'$group':{
                  '_id':'$USER_ID._id',
                  'Last_Prac_Date':{'$max':'$MODIFIED_DATE'},
                  'Practice_Sessions':{'$sum':1},
                  'Mindful_Minutes':{'$sum':{'$round':
                      [{'$divide':[{'$subtract':
                          ['$CURSOR_END','$cursorStart']},60]},0]}}  
                  }},
             {'$project':{'_id':0,
                 'USER_ID':'$_id',
                 'Last_Practice_Date':{ "$dateToString": { "format": "%Y-%m-%d", "date":'$Last_Prac_Date'}},
                 'Practice_Sessions':'$Practice_Sessions',
                 'Mindful_Minutes':'$Mindful_Minutes'
                 }
                 }])

    df2=pd.DataFrame(list(collection1))
    if df2.empty== True:
        df2["USER_ID"]=0
        df['Last_Practice_Date']=0
        df['Practice_Sessions']=0
        df['Mindful_Minutes']=0
    else:
        df2=df2

   

    collection3=db.login_tracking.aggregate([{"$match":{'$and':[{"USER_ID._id":{
                        "$in":USER_ID_list}},
                                       {'CREATED_DATE':{'$gte':startdate, '$lte':enddate}},                           
#                          {'MODIFIED_DATE':{'$gte':csy_first_date()}}  
                      
                    ]}},
    {"$group":{"_id":"$USER_ID._id",
            "last_login_date":{"$max":"$CREATED_DATE"},
            "count":{"$sum":1},
            }},
    {"$project":{"_id":0,"USER_ID":"$_id","login_count":"$count","last_login_date":{ "$dateToString": { "format": "%Y-%m-%d", "date":"$last_login_date"}}}}
            ])
    df4= DataFrame(list(collection3)).fillna(0)
#     print("df4",df4)
#     df4=pd.merge(df,df4, on="USER_ID",how="left").fillna(0)
    if df4.empty== True:
        df4["USER_ID"]=0
        df["login_count"]=0
        df["last_login_date"]=0
    else:
        df4=df4

    collection4=db.invite_master.aggregate([{"$match":{"INVITED_USER_ID._id":{
                        "$in":USER_ID_list

                    } ,
                    'IS_DISABLED':{"$ne":'Y'}  
                     ,"USER_ID.schoolId":{"$exists":1}}},
    {"$group":{"_id":"$INVITED_USER_ID._id",
            "count":{"$sum":1},
            }},
    {"$project":{"_id":0,"USER_ID":"$_id","count(ONBOARD)":"$count"}}
            ])
    df5= DataFrame(list(collection4)).fillna(0)
    if df5.empty== True:
        onboarded_user=[0]
    else:
        onboarded_user=df5["USER_ID"].tolist()
    

    dfnew=pd.merge(df,df2, on="USER_ID",how="left").fillna(0)
#     print("dfnew",dfnew)
    df6=pd.merge(dfnew,df4, on="USER_ID",how="left").fillna(0)
    df7=pd.merge(df6,df5,on="USER_ID",how="left").fillna(0)

#     print("df4",df4)
#     print("df6",df6)
#     print("df7",df7)
    active_user=df2["USER_ID"].tolist()
    not_practining=df7[(df7.Practice_Sessions == 0)]["USER_ID"].tolist()
    total_sessions = df7[(df7.Practice_Sessions != 0)]["USER_ID"].tolist()
    not_login=df7[(df7.login_count == 0)]["USER_ID"].tolist()
    table0={"total_user":total_user,
        "active_user":active_user,
        "not_practining":not_practining,
        "not_login":not_login,
        "onboarded_user":onboarded_user,
         "total_sessions" : total_sessions }
    table_name=table0[table_type]
#     print(table_name)
    df8=df7[df7["USER_ID"].isin(table_name)]
#     print(df8)
    table=df8[["USER_ID","USER_NAME","email_id","Last_Practice_Date","last_login_date","Practice_Sessions","Mindful_Minutes","SIGNUP_DATE"]]
#     print(table)
    temp = {"table":table.to_numpy().tolist()}
#     print(len(table))
    return json.dumps(temp,default = str)
#     return df7


# practice_progress_table('5f2bcaabba0be61b0c1e10e8','not_practining','2021-8-1','2022-2-25')


# practice_progress_table('5f2bca1fba0be61b0c1cb7e5',"total_user",'2021-8-1','2022-2-18')

##########################################Practice_data_present Feeds########################
@app.route('/present_feeds_practice_data')
def present_feeds_practice_data():
    # username = urllib.parse.quote_plus('adminIE')
    # password = urllib.parse.quote_plus('CtZh5Nqp8Qn9LHUDx2GH')
    # client = MongoClient("mongodb://%s:%s@54.184.165.106:27017/" % (username, password))
    # db=client.compass_beta

    client = MongoClient('mongodb://admin:F5tMazRj47cYqm33e@52.41.36.115:27017/')
    db=client.compass

    collection = db.audio_track_master.aggregate([
        {"$match":{
            '$and':[
                {"PROGRAM_AUDIO_ID":{"$exists":1}},
                {"PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
                 { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
              {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
              {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
              {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
              {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},    
            ]}},
            {"$group":{"_id":"$PROGRAM_AUDIO_ID._id",
                    "AUDIO_TITLE":{"$first":"$PROGRAM_AUDIO_ID.AUDIO_TITLE"},
                    "AUDIO_DURATION":{"$first":"$PROGRAM_AUDIO_ID.AUDIO_LENGTH"},
                    "NARRATOR":{"$first":"$PROGRAM_AUDIO_ID.NARRATOR_ID.NARRATOR_NAME"},
                    "IMAGE":{"$first":"$PROGRAM_AUDIO_ID.IMAGE_URL"},

#                                        "PROGRAM_ID":{"$first":"$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_ID"},

                        'count':{'$sum':1},
                    }

        },
        {'$project':{"_id":0,
            'AUDIO_ID':"$_id",
                    "AUDIO_TITLE":"$AUDIO_TITLE" ,
                    "NARRATEDBY":"$NARRATOR",
                    "AUDIO_DURATION":"$AUDIO_DURATION",
                    # "IMAGE":"$IMAGE",
                    "PLAYS":"$count",
#                                      "PROGRAM_ID":"$PROGRAM_ID"
                }
                },{"$sort":{"PLAYS":-1}},{"$limit":5}])
    df0= list(collection)
    df= pd.DataFrame.from_dict(df0).fillna(0)
    df
    df.to_csv("present_feed_data.csv")
    print(df)
    return "status : ok"


#############################################################################################

@app.route('/present_feeds')
def present_feeds():
    # username = urllib.parse.quote_plus('adminIE')
    # password = urllib.parse.quote_plus('CtZh5Nqp8Qn9LHUDx2GH')
    # client = MongoClient("mongodb://%s:%s@54.184.165.106:27017/" % (username, password))
    # db=client.compass_beta

    client = MongoClient('mongodb://admin:F5tMazRj47cYqm33e@52.41.36.115:27017/')
    db=client.compass


    collectionpa = db.programs_audio.aggregate([
    {"$project":{"_id":0,'AUDIO_ID':"$_id","IMAGE":"$IMAGE_URL","AUDIO_NAME" : "$AUDIO_NAME"}}])
    dfpa= DataFrame(list(collectionpa)).fillna(0)
    dfpa['AUDIO_ID']=dfpa['AUDIO_ID'].astype(str)
    dfpa["VIDEO_ID"] = dfpa['AUDIO_NAME']
    dfpa["VIDEO_ID"] = dfpa[dfpa['AUDIO_NAME'].str.contains("=")]['AUDIO_NAME'].str.split('=').str[1]
    # dfpa = dfpa.fillna(0)
    dfpa["VIDEO_ID"].fillna(dfpa['AUDIO_NAME'], inplace=True)
    conditions  = [dfpa["VIDEO_ID"] != dfpa['AUDIO_NAME'], dfpa["VIDEO_ID"] == dfpa['AUDIO_NAME']]
    choices     = [1, 0]
    dfpa["IS_VIDEO"] = np.select(conditions, choices)
    dfpa = dfpa.drop(['AUDIO_NAME'], axis=1)


    df=pd.read_csv("present_feed_data.csv")
    df['AUDIO_ID']=df['AUDIO_ID'].astype(str)
    dfatm=pd.merge(dfpa,df,on='AUDIO_ID',how="right")
    top=dfatm.head(5)
    
    if top.empty:
        top=pd.DataFrame(index=[0], columns=['AUDIO_ID','IMAGE','VIDEO_ID','IS_VIDEO','Unnamed: 0','AUDIO_TITLE','NARRATEDBY',
                                             'AUDIO_DURATION','PLAYS'])

        top["AUDIO_ID"].fillna(0,inplace=True)
        top["IMAGE"].fillna("",inplace=True)
        top["VIDEO_ID"].fillna("",inplace=True)
        top["IS_VIDEO"].fillna(0,inplace=True)
        top["Unnamed: 0"].fillna(0,inplace=True)
        top["AUDIO_TITLE"].fillna("",inplace=True)
        top["NARRATEDBY"].fillna("",inplace=True)
                
        top["AUDIO_DURATION"].fillna(0,inplace=True)
        top["PLAYS"].fillna(0,inplace=True)
        
    top=top.fillna(0)         
    top["NARRATEDBY"].replace('0','',inplace=True)
    
    top_practices=top.to_dict("records")
    collection1 = db.audio_track_master.aggregate([
        {"$match":{
            '$and':[
                # {'USER_ID.ROLE_ID._id':{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                 { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
              {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
              {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
              {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
              {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},  
                        {"PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
                {'CREATED_DATE': {'$gte': datetime.datetime.utcnow()-datetime.timedelta(hours=24)}}
                ]}},
            {'$group':
            {'_id':'$USER_ID._id',
                'State':{'$first':'$USER_ID.schoolId.STATE'},
                'Country':{'$first':'$USER_ID.schoolId.COUNTRY'}
                }}
            ])
    df1=DataFrame(list(collection1)).fillna(0)
    if df1.empty == True:
        live_users=0
        live_students=0
    else:
        live_users=len(df1["_id"])
        live_students=live_users*28
    collection2 = db.present_feeds.aggregate([
        {"$match":{
            '$and':[
                {"AUDIO_ID":{"$exists":1}},
                        {"AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
    #              { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
    #                    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
    #                      {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #           {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
    #           {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
    #           {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
    #           {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
    #           {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
    #           {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},    
            ]}},
            {"$group":{"_id":"$AUDIO_ID._id",
                    "AUDIO_TITLE":{"$first":"$AUDIO_ID.AUDIO_TITLE"},
                    "AUDIO_DURATION":{"$first":"$AUDIO_ID.AUDIO_LENGTH"},
                    "NARRATOR":{"$first":"$AUDIO_ID.NARRATOR_ID.NARRATOR_NAME"},
                    "IMAGE":{"$first":"$AUDIO_ID.IMAGE_URL"},
                        'count':{'$sum':1},
                    }

        },
        {'$project':{"_id":0,
            'AUDIO_ID':"$_id",
                    "AUDIO_TITLE":"$AUDIO_TITLE" ,
                    "NARRATEDBY":"$NARRATOR",
                    "AUDIO_DURATION":"$AUDIO_DURATION",
                    # "IMAGE":"$IMAGE",
                    "PLAYS":"$count"
                }
                },{"$sort":{"PLAYS":-1}}])
    df2= DataFrame(list(collection2)).fillna(0)
    if df2.empty:
        df2 = pd.DataFrame(index=[0],columns=['AUDIO_ID','AUDIO_TITLE','NARRATEDBY','AUDIO_DURATION','PLAYS'])
        df2 = df2.fillna(0)
    df2['AUDIO_ID']=df2['AUDIO_ID'].astype(str)
    df2["AUDIO_DURATION"]=df2["AUDIO_DURATION"].round(1)
    dfpf=pd.merge(dfpa,df2,on='AUDIO_ID',how="right")
    if dfpf.empty:
        dfpf=pd.DataFrame(index=[0], columns=['AUDIO_ID','IMAGE','VIDEO_ID','IS_VIDEO','AUDIO_TITLE','NARRATEDBY',
                                             'AUDIO_DURATION','PLAYS'])

        dfpf["AUDIO_ID"].fillna(0,inplace=True)
        dfpf["IMAGE"].fillna("",inplace=True)
        dfpf["VIDEO_ID"].fillna("",inplace=True)
        dfpf["IS_VIDEO"].fillna(0,inplace=True)
        dfpf["AUDIO_TITLE"].fillna("",inplace=True)
        dfpf["NARRATEDBY"].fillna("",inplace=True)
        dfpf["AUDIO_DURATION"].fillna(0,inplace=True)
        dfpf["PLAYS"].fillna(0,inplace=True)

    dfpf=dfpf.fillna(0)
        
    dfpf["NARRATEDBY"]=dfpf["NARRATEDBY"].replace(0,"",inplace=True)  
    dfpf["NARRATEDBY"].fillna('',inplace=True)
    
    temp={"top_practices":top_practices,"live":{"live_users":live_users,"live_students":live_students},"all_time":dfpf.to_dict("records")}
    return json.dumps(temp)



# Practice Trend By Program CSY
@app.route('/adminstatsprogram_practice/<name>')

def prog_prac_admin(name):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass

    collection = db.user_master
    user=[
         {"$match":{'$and':[  { "_id":ObjectId(name)}, 
                 {"USER_NAME": { "$not": { "$regex": "test",'$options':'i'}}},
                             {"USER_NAME": { "$not": { "$regex": "1gen",'$options':'i'}}},
                               {"USER_NAME":{ "$ne": ""}},
                       {"EMAIL_ID":{ "$not": { "$regex": "test",'$options':'i'}}},
                         {"EMAIL_ID":{ "$not": { "$regex": "1gen",'$options':'i'}}},
                         {"EMAIL_ID":{ "$ne": ""}},
                          # {"schoolId":{"$exists":1 }}, # remove for family
                {'IS_BLOCKED':{"$ne":'Y'}},
                {'IS_DISABLED':{"$ne":'Y'}},
                {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
                {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
    #        { "IS_ADMIN":"Y"},
    ]}},
              { "$project": { "ADMIN_ID":"$_id","_id":0, "SCHOOL_ID":"$schoolId._id"
                            }}
        ]
    update=list(collection.aggregate(user))
    df0=pd.DataFrame(update)
    # print(df0,'DF0')
    if df0.empty==True:
        data={'Result':0}
    else:
        list_of_names=df0["SCHOOL_ID"].to_list()
        collection = db.user_master
        user=[
             {"$match":{'$and':[   { "schoolId._id":{"$in":list_of_names}}, 
                     {"USER_NAME": { "$not": { "$regex": "test",'$options':'i'}}},
                                   {"USER_NAME":{ "$ne": ""}},
                           {"EMAIL_ID":{ "$not": { "$regex": "test",'$options':'i'}}},
                             {"EMAIL_ID":{ "$not": { "$regex": "1gen",'$options':'i'}}},
                             {"EMAIL_ID":{ "$ne": ""}},
                    {'IS_BLOCKED':{"$ne":'Y'}},
                    {'IS_DISABLED':{"$ne":'Y'}},
                                     {'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
               {'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                    {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
                    {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
        ]}},
                  { "$project": { "USER_ID":"$_id","_id":0,
                                }}
            ]
        update=list(collection.aggregate(user))
        df00=pd.DataFrame(update)
    #     print(df00,'DF00')
        list_of_names1=df00["USER_ID"].to_list()
        collection = db.audio_track_master
        prog_prac_table1 = DataFrame(list(collection.aggregate([
         {"$match":{
             '$and':[ { "USER_ID._id":{"$in":list_of_names1}},
            {'USER_ID.ROLE_ID.ROLE_ID' :{'$ne':3}},
             {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
              {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
            {'PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME':{"$not":{"$regex":"wellness",'$options':'i'}}},
                {'PROGRAM_AUDIO_ID.AUDIO_DAY':{"$not":{"$regex":"bonus",'$options':'i'}}},
              {'PROGRAM_AUDIO_ID.AUDIO_DAY':{"$not":{"$regex":"sound",'$options':'i'}}},
                {'PROGRAM_AUDIO_ID.AUDIO_DAY':{'$not':{'$regex':'Counselor','$options':'i'}}},    
                {"PROGRAM_AUDIO_ID.AUDIO_DAY":{"$not":{"$regex":'Bonus','$options':'i'}}},
                      {"MODIFIED_DATE":{'$gte':csy_first_date()}},
                      {'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
               {'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                        {'PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_ID':{'$nin':[1,2,3,4,5,6,7,8]}},
#         {'MODIFIED_DATE':{'$gte': startdate, '$lte':enddate}}
                    ]}},
        {'$group':{'_id':{'pn':'$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_ID','Month':{'$month':'$MODIFIED_DATE'}}, 'auc': {'$sum':1},
                   'pg':{'$first':'$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME'}}},
        {'$project':{'pg':'$pg','pn':'$_id.pn','Month':'$_id.Month', 'Active_usercount in 2020-2021':'$auc','_id':0}},
          { "$sort":{'pg' : 1 }}])))
        df1 = pd.DataFrame(prog_prac_table1)
        
    #     print(df1,'DF1')
        index=[0,1,2,3,4,5,6,7,8,9,10,11]
        if df1.empty:
            data={"month": ["Aug", "Sep", "Oct", "Nov", "Dec", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul"], 
                  "elem": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prek": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                  "mid": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "high": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}
        else:
            df1["pn"]=df1["pn"].replace({1:11, 2:12, 3:13, 4:9})
            data = [['Aug', 8], ['Sep', 9], ['Oct', 10],['Nov', 11], ['Dec', 12], ['Jan', 1],['Feb', 2], ['Mar', 3], ['Apr', 4],['May', 5], ['Jun', 6], ['Jul', 7]] 
            df9 = pd.DataFrame(data, columns = ['Monthname', 'Month']) 

            DF=pd.merge(df9,df1, on='Month',how='left').fillna(0)
            DF=DF.sort_values(by=['pn'])
            month=DF['Month'].tolist()
            prog_prac_table=DF
            month=['Aug','Sep','Oct','Nov','Dec','Jan','Feb','Mar','Apr','May','Jun','Jul']

            elem=[]
            mid=[]
            pre=[]
            high=[]


            for i in set(prog_prac_table.pn.tolist()):
                for j in month:
    #                     print(j)
                    if i==11:
                        df=prog_prac_table[prog_prac_table['pn']==i]

                        try:
                            df=df[df['Monthname']==j]['Active_usercount in 2020-2021']
    #                             print(df)
                            pre.append(int(df))
    #                             print(pre)
                        except:
                            pre.append(0)
                    elif i==12:
                        df=prog_prac_table[prog_prac_table['pn']==i]
                        try:
                            df=df[df['Monthname']==j]['Active_usercount in 2020-2021']
                            elem.append(int(df))
                        except:
                            elem.append(0)
                    elif i==13:
                        df=prog_prac_table[prog_prac_table['pn']==i]
                        try:
                            df=df[df['Monthname']==j]['Active_usercount in 2020-2021']
                            mid.append(int(df))
                        except:
                            mid.append(0)
                    elif i==9:
                        df=prog_prac_table[prog_prac_table['pn']==i]
    #                         print(df)
                        try:
                            df=df[df['Monthname']==j]['Active_usercount in 2020-2021']
    #                             print(df)
                            high.append(int(df))
                        except:
                            high.append(0)            
                    else:
                        break

                ll=[0,0,0,0,0,0,0,0,0,0,0,0]
            if len(elem)==0:    elem = ll
            if len(pre)==0:    pre =  ll
            if len(mid)==0:    mid =  ll
            if len(high)==0:    high = ll
    #             if len(alls)==0:    alls = ll
            data={'month':month,'elem':elem,'prek':pre,'mid':mid,'high':high}
    return json.dumps(data)



#Active User Trend by Program CSY
@app.route('/adminstatsprogram_user/<name>')
def prog_user_admin(name):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass

    collection = db.user_master
    user=[
         {"$match":{'$and':[  { "_id":ObjectId(name)}, 
                 {"USER_NAME": { "$not": { "$regex": "test",'$options':'i'}}},
                             {"USER_NAME": { "$not": { "$regex": "1gen",'$options':'i'}}},
                               {"USER_NAME":{ "$ne": ""}},
                       {"EMAIL_ID":{ "$not": { "$regex": "test",'$options':'i'}}},
                         {"EMAIL_ID":{ "$not": { "$regex": "1gen",'$options':'i'}}},
                         {"EMAIL_ID":{ "$ne": ""}},
                          # {"schoolId":{"$exists":1 }}, # remove for family
                {'IS_BLOCKED':{"$ne":'Y'}},
                {'IS_DISABLED':{"$ne":'Y'}},
                {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
                {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
    #        { "IS_ADMIN":"Y"},
    ]}},
              { "$project": { "ADMIN_ID":"$_id","_id":0, "SCHOOL_ID":"$schoolId._id"
                            }}
        ]
    update=list(collection.aggregate(user))
    df0=pd.DataFrame(update)
    # print(df0,'DF0')
    if df0.empty==True:
        data={'Result':0}
    else:
        list_of_names=df0["SCHOOL_ID"].to_list()
        collection = db.user_master
        user=[
             {"$match":{'$and':[   { "schoolId._id":{"$in":list_of_names}}, 
                     {"USER_NAME": { "$not": { "$regex": "test",'$options':'i'}}},
                                   {"USER_NAME":{ "$ne": ""}},
                           {"EMAIL_ID":{ "$not": { "$regex": "test",'$options':'i'}}},
                             {"EMAIL_ID":{ "$not": { "$regex": "1gen",'$options':'i'}}},
                             {"EMAIL_ID":{ "$ne": ""}},
                    {'IS_BLOCKED':{"$ne":'Y'}},
                    {'IS_DISABLED':{"$ne":'Y'}},
                                     {'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
               {'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                    {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
                    {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
        ]}},
                  { "$project": { "USER_ID":"$_id","_id":0,
                                }}
            ]
        update=list(collection.aggregate(user))
        df00=pd.DataFrame(update)
    #     print(df00,'DF00')
        list_of_names1=df00["USER_ID"].to_list()
        collection = db.audio_track_master
        prog_prac_table1 = DataFrame(list(collection.aggregate([
         {"$match":{
             '$and':[ { "USER_ID._id":{"$in":list_of_names1}},
            {'USER_ID.ROLE_ID.ROLE_ID' :{'$ne':3}},
             {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
              {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
            {'PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME':{"$not":{"$regex":"wellness",'$options':'i'}}},
                {'PROGRAM_AUDIO_ID.AUDIO_DAY':{"$not":{"$regex":"bonus",'$options':'i'}}},
              {'PROGRAM_AUDIO_ID.AUDIO_DAY':{"$not":{"$regex":"sound",'$options':'i'}}},
                {'PROGRAM_AUDIO_ID.AUDIO_DAY':{'$not':{'$regex':'Counselor','$options':'i'}}},    
                {"PROGRAM_AUDIO_ID.AUDIO_DAY":{"$not":{"$regex":'Bonus','$options':'i'}}},
                      {"MODIFIED_DATE":{'$gte':csy_first_date()}},
                      {'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
               {'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                        {'PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_ID':{'$nin':[1,2,3,4,5,6,7,8]}},
#         {'MODIFIED_DATE':{'$gte': startdate, '$lte':enddate}}
                    ]}},
        {'$group':{'_id':{'pn':'$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_ID','Month':{'$month':'$MODIFIED_DATE'}}, 'auc': {'$addToSet':'$USER_ID._id'},
                   'pg':{'$first':'$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME'}}},
        {'$project':{'pg':'$pg','pn':'$_id.pn','Month':'$_id.Month', 'Active_usercount in 2020-2021':{'$size':'$auc'},'_id':0}},
          { "$sort":{'pg' : 1 }}])))
        df1 = pd.DataFrame(prog_prac_table1)
        
    #     print(df1,'DF1')
        index=[0,1,2,3,4,5,6,7,8,9,10,11]
        if df1.empty:
            data={"month": ["Aug", "Sep", "Oct", "Nov", "Dec", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul"], 
                  "elem": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prek": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                  "mid": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "high": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}
        else:
            df1["pn"]=df1["pn"].replace({1:11, 2:12, 3:13, 4:9})
            data = [['Aug', 8], ['Sep', 9], ['Oct', 10],['Nov', 11], ['Dec', 12], ['Jan', 1],['Feb', 2], ['Mar', 3], ['Apr', 4],['May', 5], ['Jun', 6], ['Jul', 7]] 
            df9 = pd.DataFrame(data, columns = ['Monthname', 'Month']) 

            DF=pd.merge(df9,df1, on='Month',how='left').fillna(0)
            DF=DF.sort_values(by=['pn'])
            month=DF['Month'].tolist()
            prog_prac_table=DF
            month=['Aug','Sep','Oct','Nov','Dec','Jan','Feb','Mar','Apr','May','Jun','Jul']

            elem=[]
            mid=[]
            pre=[]
            high=[]


            for i in set(prog_prac_table.pn.tolist()):
                for j in month:
    #                     print(j)
                    if i==11:
                        df=prog_prac_table[prog_prac_table['pn']==i]

                        try:
                            df=df[df['Monthname']==j]['Active_usercount in 2020-2021']
    #                             print(df)
                            pre.append(int(df))
    #                             print(pre)
                        except:
                            pre.append(0)
                    elif i==12:
                        df=prog_prac_table[prog_prac_table['pn']==i]
                        try:
                            df=df[df['Monthname']==j]['Active_usercount in 2020-2021']
                            elem.append(int(df))
                        except:
                            elem.append(0)
                    elif i==13:
                        df=prog_prac_table[prog_prac_table['pn']==i]
                        try:
                            df=df[df['Monthname']==j]['Active_usercount in 2020-2021']
                            mid.append(int(df))
                        except:
                            mid.append(0)
                    elif i==9:
                        df=prog_prac_table[prog_prac_table['pn']==i]
    #                         print(df)
                        try:
                            df=df[df['Monthname']==j]['Active_usercount in 2020-2021']
    #                             print(df)
                            high.append(int(df))
                        except:
                            high.append(0)            
                    else:
                        break

                ll=[0,0,0,0,0,0,0,0,0,0,0,0]
            if len(elem)==0:    elem = ll
            if len(pre)==0:    pre =  ll
            if len(mid)==0:    mid =  ll
            if len(high)==0:    high = ll
    #             if len(alls)==0:    alls = ll
            data={'month':month,'elem':elem,'prek':pre,'mid':mid,'high':high}
    return json.dumps(data)



@app.route("/feedback_rating/<admin_id>")
 
def feedback_rating(admin_id):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass

    # username = urllib.parse.quote_plus('adminIE')                                     #SwitchedToBeta
    # password = urllib.parse.quote_plus('CtZh5Nqp8Qn9LHUDx2GH')
    # client = MongoClient("mongodb://%s:%s@54.184.165.106:27017/" % (username, password))
    # db=client.compass_beta

#     start_date = dateutil.parser.parse(start_date)
#     end_date = dateutil.parser.parse(end_date)


    collection = db.user_master

    user=[

    {"$match":{'$and':[ 
         { "_id":ObjectId(admin_id)},
         {"USER_NAME": { "$not": { "$regex": "test",'$options':'i'}}},
                       {"USER_NAME":{ "$ne": ""}},
               {"EMAIL_ID":{ "$not": { "$regex": "test",'$options':'i'}}},
                 {"EMAIL_ID":{ "$not": { "$regex": "1gen",'$options':'i'}}},
                 {"EMAIL_ID":{ "$ne": ""}},
        {'IS_BLOCKED':{"$ne":'Y'}},
        {'IS_DISABLED':{"$ne":'Y'}},
        {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
#     { "IS_ADMIN":"Y"},
    ]}},

    { "$project": { "ADMIN_ID":"$_id","_id":0, "SCHOOL_ID":"$schoolId._id"
                        }}
    ]
    update=list(collection.aggregate(user))
    df0=pd.DataFrame(update)
    if df0.empty==True:
        data={'Result':0}
    else:

        admin_ids=df0["ADMIN_ID"].to_list()
        school_ids=df0["SCHOOL_ID"].to_list()


        collection1 = db.user_master
        user=[

        {"$match":{'$and':[ 
             { "schoolId._id":{"$in": school_ids}},
             {"USER_NAME": { "$not": { "$regex": "test",'$options':'i'}}},
                           {"USER_NAME":{ "$ne": ""}},
                   {"EMAIL_ID":{ "$not": { "$regex": "test",'$options':'i'}}},
                     {"EMAIL_ID":{ "$not": { "$regex": "1gen",'$options':'i'}}},
                     {"EMAIL_ID":{ "$ne": ""}},
            {'IS_BLOCKED':{"$ne":'Y'}},
            {'IS_DISABLED':{"$ne":'Y'}},
            {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
            {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
        ]}},

        { "$project": { "_id":0, "USER ID":"$_id"
                            }}
        ]
        update=list(collection1.aggregate(user))
        df1=pd.DataFrame(update)

        user_ids=df1["USER ID"].to_list()


        collection2=db.audio_track_master
        user=[      
        {"$match":{"$and":
            [
            {"USER_ID._id":{"$in": user_ids}},

            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
            {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
             {'MODIFIED_DATE':{'$gte':csy_first_date()}},

            ]}
        },
        {
            "$group":{"_id":"$USER_ID._id","USER_PRACTICE_COUNT":{"$sum":1},}
        },
        {
        "$project":
        {
            "USER_PRACTICE_COUNT":1,"USER ID" :"$_id","_id":0,
        }}]
        update= list(collection2.aggregate(user))
        df2=pd.DataFrame(update)

        if df2.empty:
            df2["USER_PRACTICE_COUNT"]= 0
            df2["USER ID"]= 0

        df21=pd.merge(df1,df2,on="USER ID",how="left").fillna(0)


        collection3 = db.audio_feedback
        user=[
        {"$match":{'$and':[ 

        #         {"USER._id":{"$in":db.user_master.distinct("_id",{"USER_ID.schoolId._id":school_ids})}},

                {"USER._id":{"$in": user_ids}},
                {"USER.USER_NAME": { "$not": { "$regex": "test",'$options':'i'}}},
                {"USER.USER_NAME":{ "$ne": ""}},
                {"USER.EMAIL_ID":{ "$not": { "$regex": "test",'$options':'i'}}},
                {"USER.EMAIL_ID":{ "$not": { "$regex": "1gen",'$options':'i'}}},
                {"USER.EMAIL_ID":{ "$ne": ""}},  
                {'USER.IS_BLOCKED':{"$ne":'Y'}}, 
                {'USER.IS_DISABLED':{"$ne":'Y'}}, 
                {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                {'MODIFIED_DATE':{"$gte": csy_first_date()}},   

          ]}},
        { "$project": { "USER ID": "$USER._id", "_id":0,"RATING":1,
            "COMMENT":1 }}
        ]
        update=list(collection3.aggregate(user))
        df3=pd.DataFrame(update)

        if "COMMENT" not in df3.columns:
            df3["COMMENT"] = 0


        if df3.empty:
            df3["USER ID"]=0
            df3["RATING"]= 0
            df3["COMMENT"]= 0

        df31=pd.merge(df21,df3,on="USER ID",how="left").fillna(0)
        df31['COMMENT'].replace("",0, inplace=True)

        if df2.empty or df3.empty:
            AVERAGE_FEEDBACK_RATING = 0
            PLUS_3_RATING = 0
            STAR_RATING = 0
            FEEDBACK = 0
        else:
            AVERAGE_FEEDBACK_RATING = round(np.mean(df31["RATING"]),2)
            PLUS_3_RATING = len(df31.loc[df31['RATING'] > 3])
            STAR_RATING = round((len(df31.loc[df31['RATING'] != 0]) / len(df31.loc[df31['USER_PRACTICE_COUNT'] != 0])) * 100,2)
            FEEDBACK = round((len(df31.loc[df31['COMMENT'] != 0]) / len(df31.loc[df31['USER_PRACTICE_COUNT'] != 0])) * 100,2)
        data = dict({"AVERAGE_FEEDBACK_RATING": AVERAGE_FEEDBACK_RATING , "PLUS_3_RATING" : PLUS_3_RATING ,
                 "STAR_RATING" : STAR_RATING , "FEEDBACK" : FEEDBACK})
    return json.dumps(data)

@app.route('/wordcloudfeedback/<adminid>')
def wordcloud(adminid):
    import nltk
    from nltk.corpus import stopwords
    from textblob import TextBlob
    from nltk import FreqDist
    import re
    clean_list=[]
    news_headlines_senti = []
    news_headlines_dict = {}
    pnews_headlines=0
    nnews_headlines=0
    nenews_headlines = 0
    
#     startdate= dateutil.parser.parse(str(startdate))
#     enddate= dateutil.parser.parse(str(enddate))+timedelta(days=1)
    
    
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass


    collection1=db.user_master
    query=[{'$match':
            {'$and':[ {'_id':ObjectId(adminid)},
                {"USER_NAME": { "$not": { "$regex": "test",'$options':'i'}}},
                             {"USER_NAME": { "$not": { "$regex": "1gen",'$options':'i'}}},
                               {"USER_NAME":{ "$ne": ""}},
                       {"EMAIL_ID":{ "$not": { "$regex": "test",'$options':'i'}}},
                         {"EMAIL_ID":{ "$not": { "$regex": "1gen",'$options':'i'}}},
                         {"EMAIL_ID":{ "$ne": ""}},
                          # {"schoolId":{"$exists":1 }}, # remove for family
                {'IS_BLOCKED':{"$ne":'Y'}},
                {'IS_DISABLED':{"$ne":'Y'}},
                {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
                {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
             
                    ]}},
        {'$project':{
            '_id':0,
            'USER_ID':'$_id',
            'schoolId':'$schoolId._id'
            }}]
    schoolinfo=list(collection1.aggregate(query))
    schoolId=schoolinfo[0].get('schoolId')
    collection=db.audio_feedback
#     mydatetime= dateutil.parser.parse(datestr)
#     yester= pd.to_datetime(mydatetime) +timedelta(hours=4)
#     tod=mydatetime+ timedelta(hours=4)
#     start= tod- timedelta(days=8)+timedelta(days=1)
#     start_15day= start-timedelta(days=8)+timedelta(days=1)
    user=[
    {"$match":{'$and':[ 
        {"USER.USER_NAME": { "$not": { "$regex": "test",'$options':'i'}}},
                {"USER.USER_NAME":{ "$ne": ""}},
                {"USER.EMAIL_ID":{ "$not": { "$regex": "test",'$options':'i'}}},
                {"USER.EMAIL_ID":{ "$not": { "$regex": "1gen",'$options':'i'}}},
                {"USER.EMAIL_ID":{ "$ne": ""}},  
                {'USER.IS_BLOCKED':{"$ne":'Y'}}, 
                {'USER.IS_DISABLED':{"$ne":'Y'}},
                    {"USER.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
#                 {'MODIFIED_DATE':{'$gte': start, '$lt':yester}},
                {'USER._id':{'$in':db.user_master.distinct('_id',{'schoolId._id':schoolId})}},
                 {'MODIFIED_DATE':{'$gte':csy_first_date()}},
                       
            
                       {'COMMENT':{'$nin':['',' ', None,'.']}},
                  {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                        ]}},
    { "$project": { "USER_ID": "$USER._id", "USER_NAME": "$USER.USER_NAME","_id":0, "EMAIL": "$USER.EMAIL_ID", "RATING":1,
    "LAST_COMMENT_DATE": "$MODIFIED_DATE", "AUDIO_NAME": "$AUDIO_ID.AUDIO_NAME", "NARRATOR_NAME": "$AUDIO_ID.NARRATEDBY",
    "COMMENT":1, "PROGRAM_NAME": "$AUDIO_ID.PROGRAM_ID.PROGRAM_NAME"}}
    ]
    update=list(collection.aggregate(user))
    df123=pd.DataFrame(update).fillna("no info")
    if df123.empty:
        return json.dumps({'Result':0})
    else:
        list_of_names=df123["USER_ID"].to_list()
        xx=df123[df123["COMMENT"]!="no info"]
        xxc=xx[xx["COMMENT"]!=""]
        comment_list=xxc["COMMENT"].to_list()
        newtexttoken=[]
        
        import nltk
    #     nltk.download('punkt')
    #     nltk.download()
        nltk.download('stopwords')
    
        for i in comment_list:
            text_tokens = nltk.tokenize.word_tokenize(i)
            newtexttoken.append(text_tokens)
        newlist=[]
        for i in newtexttoken:
            for z in i:
                newlist.append(z.lower())
        st_word=stopwords.words('english')
        tokens_without_sw= [word for word in newlist if not word in st_word]
        token5=[]
        for sentence in tokens_without_sw:
            text3 = sentence.split('ing')    
            for i in text3:
                token5.append(i)
        words = [w.replace('liked', 'like') for w in token5]
        words2 = [w.replace('relaxed', 'relax') for w in words]
        words3 = [w.replace('relaxing', 'relax') for w in words2]
        words4 = [w.replace('excitinging', 'excited') for w in words3]
        zxc=""
        name=""
        count=""
        try:
            xcvv=[x for x in words4 if len(x)>3]
            fdist=FreqDist(xcvv)
            df_fdist = pd.DataFrame.from_dict(fdist, orient='index')
        #         print(df_fdist)
            df_fdist.columns = ['Frequency']
            df_fdist.index.name = 'Term'
            xc=df_fdist.sort_values(by='Frequency', ascending=False, na_position='first')
            #     tt=xc.drop(["i","it","we","made","us","the","feeling","some","students"])
            cc=xc[0:10]
            name=cc.index.to_list()
            count=cc["Frequency"].to_list()
            zxc=' '.join(word for word in xcvv)
        except:
            pass
        for item in comment_list:
            # trim
            item = item.strip()
            # Removing RT
            item = item.replace('RT', '')
            # Removing new line character
            item = item.replace('\\n', '')
            # Replace #word with word
            news_headlines = re.sub(r'#([^\s]+)', r'\1', item)
            # Convert @username to username
            news_headlines = re.sub(r'@([^\s]+)', r'\1', item)
            item = " ".join(re.findall("[a-zA-Z]+", item))
            tmp_var = re.sub(r'^\S*\s', '', item)
            clean_list.append(tmp_var)
        for item in clean_list:
                #print(item)
                # create TextBlob object of passed news_headlines text
                analysis = TextBlob(item)
                # set sentiment
                if analysis.sentiment.polarity > 0:
                    # saving sentiment of news_headlines
                    news_headlines_score = 'positive'
                    pnews_headlines = pnews_headlines + 1
                    news_headlines_dict[item] = news_headlines_score
                elif analysis.sentiment.polarity == 0:
                    # saving sentiment of news_headlines
                    news_headlines_score = 'neutral'
                    nenews_headlines = nenews_headlines + 1
                    news_headlines_dict[item] = news_headlines_score
                else:
                    # saving sentiment of news_headlines
                    news_headlines_score = 'negative'
                    nnews_headlines = nnews_headlines + 1
                    news_headlines_dict[item] = news_headlines_score
        # print(clean_list)
        newssentiment=[]
        # for k, v in news_headlines_dict.items():
        #     print(k,':',v)
        for k, v in news_headlines_dict.items():
            if v == "positive":
                newssentiment.append({"sentiment":int(1),"text":k})
            elif v == "negative":
                newssentiment.append({"sentiment":int(-1),"text":k})
            else:
                newssentiment.append({"sentiment":int(0),"text":k})
        newssentiment_dataframe=pd.DataFrame.from_dict(newssentiment)
#         neg = 100 * (nnews_headlines) / ((nnews_headlines) + (pnews_headlines))
#         pos = 100 * (pnews_headlines) / ((nnews_headlines) + (pnews_headlines))
        
        try:
            neg = 100 * (nnews_headlines) / ((nnews_headlines) + (pnews_headlines))
        except ZeroDivisionError:
            neg = 0

        try:
            pos = 100 * (pnews_headlines) / ((nnews_headlines) + (pnews_headlines))
        except ZeroDivisionError:
            pos = 0
        
        df123["SCORE"]=""
        for i in range(len(df123)):
            try:
                analysis = TextBlob(df123["COMMENT"][i])
                if analysis.sentiment.polarity > 0:
                    df123.at[i,"SCORE"]= 1
        #             
                elif analysis.sentiment.polarity == 0:
                    df123.at[i,"SCORE"]= 0
                else:
                    df123.at[i,"SCORE"]= -1
            except:
                df123.at[i,"SCORE"]= 0
#         df123['just_date'] = df123['LAST_COMMENT_DATE'].dt.date
        df123['just_date']=pd.to_datetime(df123['LAST_COMMENT_DATE'], errors='coerce')
    
        xccx=df123.sort_values(by='just_date')
        xccx=df123.dropna()
        negdf=xccx[xccx["SCORE"]==-1]
        posdf=xccx[xccx["SCORE"]==1]
        df123['LAST_COMMENT_DATE']=pd.to_datetime(df123["LAST_COMMENT_DATE"]).dt.strftime('%Y-%m-%d')
        positivep=df123[df123["SCORE"]==1]
        df1234=positivep.groupby(["LAST_COMMENT_DATE"])["SCORE"].count().reset_index()
        df14i=df1234[["LAST_COMMENT_DATE","SCORE"]]
        df14i['LAST_COMMENT_DATE'] = pd.to_datetime(df14i['LAST_COMMENT_DATE'])
        df15i=df14i.sort_values(by='LAST_COMMENT_DATE')
        df15i['LAST_COMMENT_DATE']=df15i['LAST_COMMENT_DATE'].astype(np.int64)/int(1e6)
        shp1=df15i[["LAST_COMMENT_DATE","SCORE"]].values.tolist()
        negativen=df123[df123["SCORE"]==-1]
        df12345=negativen.groupby(["LAST_COMMENT_DATE"])["SCORE"].count().reset_index()
        df14ii=df12345[["LAST_COMMENT_DATE","SCORE"]]
        df14ii['LAST_COMMENT_DATE'] = pd.to_datetime(df14ii['LAST_COMMENT_DATE'])
        df15ii=df14ii.sort_values(by='LAST_COMMENT_DATE')
        df15ii['LAST_COMMENT_DATE']=df15ii['LAST_COMMENT_DATE'].astype(np.int64)/int(1e6)
        shp2=df15ii[["LAST_COMMENT_DATE","SCORE"]].values.tolist()
        df123['LAST_COMMENT_DATE']=pd.to_datetime(df123["LAST_COMMENT_DATE"]).dt.strftime('%Y-%m-%d')
        word_chart={"word_cloud":zxc}
#         word_chart={'positive':shp1,'negative':shp2,"word_cloud":zxc,"label":name,"count":count,"donut":{"pos":round(pos, 2),"neg":round(neg, 2)}}
        return json.dumps(word_chart)




@app.route('/school_practice_mindful_minutes/<userid>')
def schoolpracticemindfulsessions(userid):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    
    # username = urllib.parse.quote_plus('adminIE')                                     #SwitchedToBeta
    # password = urllib.parse.quote_plus('CtZh5Nqp8Qn9LHUDx2GH')
    # client = MongoClient("mongodb://%s:%s@54.184.165.106:27017/" % (username, password))
    # db=client.compass_beta

    collection=db.audio_track_master
    collection1=db.user_master
    from datetime import datetime
    dfuser=DataFrame(list(collection1.aggregate([{"$match":
         {'$and': [
    #             {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                    {"IS_DISABLED":{"$ne":"Y"}},
                      {"IS_BLOCKED":{"$ne":"Y"}},
                     {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                    { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #                    {'IS_ADMIN':'Y'},
                 {"_id" : ObjectId(""+userid+"")},
                 {'EMAIL_ID':{'$ne':''}},
                     {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                               {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
         ]}},
            {'$group':{'_id':'$schoolId._id','sid':{'$addToSet':'$schoolId._id'},'school_name':{'$first':'$schoolId.NAME'}}},
            {'$project':{'_id':1,'sid':'$sid'}}])))
    # print("dfuser",dfuser)
    if dfuser.empty==True:
        data={'Result':0}
    else:  
        schoolid=str(dfuser['_id'][0])
    #     print(schoolid)
        df_practice = DataFrame(list(collection.aggregate([
        {"$match":{
                 '$and':[
                             {'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                              {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id")}},
                              {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                              {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                              {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                          {"USER_ID.schoolId._id" : ObjectId(""+schoolid+"")},
                          {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                              {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},
                          {'MODIFIED_DATE':{'$gte': LSY_Date(),"$lt": csy_first_date() }},
                 ]}},
                  {'$group':{'_id':{'$month':'$MODIFIED_DATE'}, 'Practice_Sessions':{'$sum':1},
                    'Mindful_Minutes':{'$sum':{'$round':[{'$divide':[{'$subtract':['$CURSOR_END','$cursorStart']},60]},0]}}}},
                  {'$project':{'_id':1, 'Practice_Sessions_LSY':'$Practice_Sessions','Mindful_Minutes_LSY':'$Mindful_Minutes'}}
        ])))
        df_practice.rename(columns = { '_id': 'Month'}, inplace = True)
        df_practice=df_practice.fillna(0)
        if df_practice.empty==True:
            empty={'Month':["Aug","Sep","Oct","Nov","Dec","Jan","Feb","Mar","Apr","May","Jun","Jul"],
                  'Practice_Sessions_LSY':[0,0,0,0,0,0,0,0,0,0,0,0],'Mindful_Minutes_LSY':[0,0,0,0,0,0,0,0,0,0,0,0]}
            df_practice=pd.DataFrame(empty)

            df_practice1 = DataFrame(list(collection.aggregate([
            {"$match":{
                     '$and':[
                                 {'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                                  {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id")}},
                                  {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                                  {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                                  {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                              {"USER_ID.schoolId._id" : ObjectId(""+schoolid+"")},
                              {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                                  {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                                  {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                                  {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},
                              {'MODIFIED_DATE':{'$gte': csy_first_date() }},
                     ]}},
                      {'$group':{'_id':{'$month':'$MODIFIED_DATE'}, 'Practice_Sessions':{'$sum':1},
                        'Mindful_Minutes':{'$sum':{'$round':[{'$divide':[{'$subtract':['$CURSOR_END','$cursorStart']},60]},0]}}}},
                      {'$project':{'_id':1, 'Practice_Sessions_CSY':'$Practice_Sessions','Mindful_Minutes_CSY':'$Mindful_Minutes'}}
            ])))
            df_practice1
            df_practice1.rename(columns = { '_id': 'Month'}, inplace = True)
            if df_practice1.empty==True:
                empty={'Month':["Aug","Sep","Oct","Nov","Dec","Jan","Feb","Mar","Apr","May","Jun","Jul"],
                  'Practice_Sessions_CSY':[0,0,0,0,0,0,0,0,0,0,0,0],'Mindful_Minutes_CSY':[0,0,0,0,0,0,0,0,0,0,0,0]}
                df_practice1=pd.DataFrame(empty)
                dffinal=pd.merge(df_practice1,df_practice, on='Month', how='outer')
                dffinal=dffinal.fillna(0)
                month=dffinal['Month'].tolist()
                pc_lsy=dffinal['Practice_Sessions_LSY'].tolist()
                mm_lsy=dffinal['Mindful_Minutes_LSY'].tolist()
                pc_csy=dffinal['Practice_Sessions_CSY'].tolist()
                mm_csy=dffinal['Mindful_Minutes_CSY'].tolist()
                data={'MONTH':month,'Practice_Sessions_LSY':pc_lsy,'Practice_Sessions_CSY':pc_csy,'Mindful_Minutes_LSY':mm_lsy,
                 'Mindful_Minutes_CSY':mm_csy}
            else:
                df_practice1['Mindful_Minutes_CSY']=df_practice1['Mindful_Minutes_CSY'].astype(int)
                d = dict(enumerate(calendar.month_abbr))
                df_practice1['Month'] = df_practice1['Month'].map(d)
        #         print(df_practice1.dtypes)
                df=pd.merge(df_practice1,df_practice, on='Month', how='outer')
                df=df.fillna(0)
                Month={'Month':["Aug","Sep","Oct","Nov","Dec","Jan","Feb","Mar","Apr","May","Jun","Jul"]}
                data=pd.DataFrame(Month)
                dffinal=pd.merge(data,df, on='Month', how='left')
                dffinal=dffinal.fillna(0)
                month=dffinal['Month'].tolist()
                pc_lsy=dffinal['Practice_Sessions_LSY'].tolist()
                mm_lsy=dffinal['Mindful_Minutes_LSY'].tolist()
                pc_csy=dffinal['Practice_Sessions_CSY'].tolist()
                mm_csy=dffinal['Mindful_Minutes_CSY'].tolist()
                data={'MONTH':month,'Practice_Sessions_LSY':pc_lsy,'Practice_Sessions_CSY':pc_csy,'Mindful_Minutes_LSY':mm_lsy,
                 'Mindful_Minutes_CSY':mm_csy}
        else:
            df_practice1 = DataFrame(list(collection.aggregate([
            {"$match":{
                     '$and':[
                                 {'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                                  {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id")}},
                                  {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                                  {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                                  {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                              {"USER_ID.schoolId._id" : ObjectId(""+schoolid+"")},
                              {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                                  {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                                  {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                                  {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},
                              {'MODIFIED_DATE':{'$gte':csy_first_date()}},
                     ]}},
                      {'$group':{'_id':{'$month':'$MODIFIED_DATE'}, 'Practice_Sessions':{'$sum':1},
                        'Mindful_Minutes':{'$sum':{'$round':[{'$divide':[{'$subtract':['$CURSOR_END','$cursorStart']},60]},0]}}}},
                      {'$project':{'_id':1, 'Practice_Sessions_CSY':'$Practice_Sessions','Mindful_Minutes_CSY':'$Mindful_Minutes'}}
            ])))

            if df_practice1.empty==True:
                data={'Result':0}
            else:
                df_practice1.rename(columns = { '_id': 'Month'}, inplace = True)
                df=pd.merge(df_practice,df_practice1, on='Month',how='outer')
                df=df.fillna(0)
                d = dict(enumerate(calendar.month_abbr))    # to convert monthnumber of dataframe into monthname
                df['Month'] = df['Month'].map(d)
                Month={'Month':["Aug","Sep","Oct","Nov","Dec","Jan","Feb","Mar","Apr","May","Jun","Jul"]}
                data=pd.DataFrame(Month)
                dffinal=pd.merge(data,df, on='Month', how='left')
                dffinal=dffinal.fillna(0)
                month=dffinal['Month'].tolist()
                pc_lsy=dffinal['Practice_Sessions_LSY'].tolist()
                mm_lsy=dffinal['Mindful_Minutes_LSY'].tolist()
                pc_csy=dffinal['Practice_Sessions_CSY'].tolist()
                mm_csy=dffinal['Mindful_Minutes_CSY'].tolist()
            #     print(mm_csy)
                data={'MONTH':month,'Practice_Sessions_LSY':pc_lsy,'Practice_Sessions_CSY':pc_csy,'Mindful_Minutes_LSY':mm_lsy,
                 'Mindful_Minutes_CSY':mm_csy}
#     print(data)
    return json.dumps(data)





@app.route('/adminstatstuneindonut/<userid>')

def tunein_donut_card(userid):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass

    # username = urllib.parse.quote_plus('adminIE')                                     #SwitchedToBeta
    # password = urllib.parse.quote_plus('CtZh5Nqp8Qn9LHUDx2GH')
    # client = MongoClient("mongodb://%s:%s@54.184.165.106:27017/" % (username, password))
    # db=client.compass_beta

    collection = db.tune_in_audio_track_detail
    collection2=db.user_master
#     startdate= dateutil.parser.parse(str(startdate))
#     enddate= dateutil.parser.parse(str(enddate))
   
    
    df1=DataFrame(list(collection2.aggregate([{"$match":
         {'$and': [
            {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

#                    {'IS_ADMIN':'Y'},
                 {"_id" : ObjectId(""+userid+"")},
                 {'EMAIL_ID':{'$ne':''}},

                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},

                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
         ]}},
            {'$group':{'_id':'$schoolId._id','sid':{'$addToSet':'$schoolId._id'},'school_name':{'$first':'$schoolId.NAME'},'date':{'$min':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},'country':{'$first':'$schoolId.COUNTRY'},
                      'State':{'$first':'$schoolId.STATE'},'INIVITES':{'$first':'$INVITES_ASSIGNED'},'EMAIL':{'$first':'$EMAIL_ID'},'admin':{'$first':'$IS_ADMIN'},'ROLE':{'$first':'$ROLE_ID.ROLE_id'}}},
            {'$project':{'_id':1,'sid':'$sid','ADMIN':'$admin','EMAIL_ID':'$EMAIL','INIVITES':'$INIVITES'}}])))

    if df1.empty==True:
        temp={'Result':0}
    else:

        schoolid=str(df1['_id'][0])
        collection1 = db.tune_in_master
        query1=[{"$match":{
                 '$and':[
                     { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                  {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                  {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                  {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
               {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                  {'USER_ID.DEVICE_USED':{"$regex":'webapp','$options':'i'}},
                  {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                  {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                  {'EMAIL':{"$not":{"$regex":"test",'$options':'i'}}},
                  {'EMAIL':{"$not":{"$regex":"1gen",'$options':'i'}}},
                   {'USER_ID._id':{'$in':db.user_master.distinct('_id',{'schoolId._id':ObjectId(""+schoolid+"")})}},

                  {'CREATED_DATE':{'$gte':csy_first_date()
                      }},
                  ]}},

                  {'$group':{
                      '_id': {},
                      'TUNE_IN_SEND':{'$sum':1},
                       'OPTED_OUT' :  {'$sum' : {'$cond': [ {'$eq': [ '$IS_OPTED_OUT'
             , 'Y' ] }, 1, 0 ] } },
             'OPTED_IN' :  {'$sum' : {'$cond': [ {'$eq': [ '$IS_OPTED_OUT'
             , 'N' ] }, 1, 0 ] } }
                      }
                      }
                      ,{'$project':{
                          '_id':0,
                          'TuneIn_Send':'$TUNE_IN_SEND',
                          'Opt_Out':'$OPTED_OUT',
                          'Opt_In':'$OPTED_IN'
                          }
                          }]
        tune_in_CSY=list(collection1.aggregate(query1))
        tune_in_CSY_df=pd.DataFrame(tune_in_CSY)
        if tune_in_CSY_df.empty==True:
            temp={'Result':0}
        else:

            TuneIn_Send=[0]
            try:
                TuneIn_Send=tune_in_CSY_df['TuneIn_Send']
            except:
                TuneIn_Send=[0]

            Opt_Out=[0]
            try:
                Opt_Out=tune_in_CSY_df['Opt_Out']
            except:
                Opt_Out=[0]

            Opt_In=[0]
            try:
                Opt_In=tune_in_CSY_df['Opt_In']
            except:
                Opt_In=[0]





            query=[{"$match":{
                 '$and':[
                     { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                  {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                  {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                  {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                  {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                  {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                     {'USER_ID._id':{'$in':db.user_master.distinct('_id',{'schoolId._id':ObjectId(""+schoolid+"")})}},
                     {'MODIFIED_DATE':{'$exists':1}},
                     {'IS_LISTENED':'Y'},

                  {'EMAIL':{"$not":{"$regex":"test",'$options':'i'}}},
                  {'EMAIL':{"$not":{"$regex":"1gen",'$options':'i'}}},
                  {'MODIFIED_DATE':{'$gte':csy_first_date()
                      
                      }},
                      {'INVITEE_EMAIL':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'INVITEE_EMAIL':{"$not":{"$regex":"1gen",'$options':'i'}}},
                     {'INVITEE_EMAIL':{"$not":{"$regex":"manoj.rayat5575@gmail.com",'$options':'i'}}},


                      ]}},
                  {'$group':{
                      '_id': { },

                      'prac_parent':{'$addToSet':'$INVITEE_EMAIL'}
                      }},

                      {'$project':{
                          '_id':0,

                          'practicing_parent':{'$size':'$prac_parent'}
                          }
                          }]
            tune_in_practice_CSY=list(collection.aggregate(query))
            tune_in_practice_CSY_df=pd.DataFrame(tune_in_practice_CSY)

            practicing_parent=[0]
            try:
                practicing_parent=tune_in_practice_CSY_df['practicing_parent']
            except:
                practicing_parent=[0]


    #         temp={'practicing_parent':str(practicing_parent[0]),'Opt_In':str(Opt_In[0]),'Opt_Out':str(Opt_Out[0]),'TuneIn_Send':str(TuneIn_Send[0])}

            cardscount=[int(TuneIn_Send[0]),int(Opt_In[0]),int(Opt_Out[0]),int(practicing_parent[0])]
            cardsname=['Tune_In_Send','Tune_In_Opt_In','Tune_In_Opt_Out','Parents_Practised']

            data=[]
            for i,j in zip(cardsname,cardscount):
                data.append([i,j])
            temp={'data':data}
    return json.dumps(temp)


@app.route('/adminstatstuneingraph/<userid>')
def tune_in_admin_graph(userid):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass

    # username = urllib.parse.quote_plus('adminIE')                                     #SwitchedToBeta
    # password = urllib.parse.quote_plus('CtZh5Nqp8Qn9LHUDx2GH')
    # client = MongoClient("mongodb://%s:%s@54.184.165.106:27017/" % (username, password))
    # db=client.compass_beta

#     startdate= dateutil.parser.parse(str(startdate))
#     enddate= dateutil.parser.parse(str(enddate))
    collection2=db.user_master
    
    df1=DataFrame(list(collection2.aggregate([{"$match":
         {'$and': [
            {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

#                    {'IS_ADMIN':'Y'},
                 {"_id" : ObjectId(""+userid+"")},
                 {'EMAIL_ID':{'$ne':''}},

                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},

                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
         ]}},
            {'$group':{'_id':'$schoolId._id','sid':{'$addToSet':'$schoolId._id'},'school_name':{'$first':'$schoolId.NAME'},'date':{'$min':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},'country':{'$first':'$schoolId.COUNTRY'},
                      'State':{'$first':'$schoolId.STATE'},'INIVITES':{'$first':'$INVITES_ASSIGNED'},'EMAIL':{'$first':'$EMAIL_ID'},'admin':{'$first':'$IS_ADMIN'},'ROLE':{'$first':'$ROLE_ID.ROLE_id'}}},
            {'$project':{'_id':1,'sid':'$sid','ADMIN':'$admin','EMAIL_ID':'$EMAIL','INIVITES':'$INIVITES'}}])))
    
    
    if df1.empty:
        temp={'Result':"NO DATA"}
#         return json.dumps(temp)
    else:
        schoolid=str(df1['_id'][0])
    
        collection1 = db.tune_in_master
        query1=[{"$match":{
                 '$and':[
                     { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                  {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                  {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                  {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                {'USER_ID._id':{'$in':db.user_master.distinct('_id',{'schoolId._id':ObjectId(""+schoolid+"")})}},

                 {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                  {'USER_ID.DEVICE_USED':{"$regex":'webapp','$options':'i'}},
                  {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                  {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                  {'EMAIL':{"$not":{"$regex":"test",'$options':'i'}}},
                  {'EMAIL':{"$not":{"$regex":"1gen",'$options':'i'}}},
                  {'CREATED_DATE':{'$gte':csy_first_date()
                    
                      }},

                  ]}},


                  {'$group':{'_id': {'month': {"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},

                      'TUNE_IN_SEND':{'$sum':1},'OPTED_OUT' :  {'$sum' : {'$cond': [ {'$eq': [ '$IS_OPTED_OUT', 'Y' ] }, 1, 0 ] } },
             'OPTED_IN' :  {'$sum' : {'$cond': [ {'$eq': [ '$IS_OPTED_OUT'
             , 'N' ] }, 1, 0 ] } }
                      }
                      }
                      ,{'$project':{
                          '_id':0,
                          'month':'$_id.month',

                          'TuneIn_Send':'$TUNE_IN_SEND',
                          'Opt_Out':'$OPTED_OUT',
                          'Opt_In':'$OPTED_IN'
                          }
                          },
               {'$sort':{'month':1}}]
        tune_in_CSY=list(collection1.aggregate(query1))
        tune_in_CSY_df=pd.DataFrame(tune_in_CSY)
        if tune_in_CSY_df.empty==True:
            temp={'Result':0}
        else:    

            collection = db.tune_in_audio_track_detail
            query=[{"$match":{
                     '$and':[
                         { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                               {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                      {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                      {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                      {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                     {'USER_ID._id':{'$in':db.user_master.distinct('_id',{'schoolId._id':ObjectId(""+schoolid+"")})}},
                         {'MODIFIED_DATE':{'$exists':1}},
                         {'IS_LISTENED':'Y'},

                      {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                      {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                      {'EMAIL':{"$not":{"$regex":"test",'$options':'i'}}},
                      {'EMAIL':{"$not":{"$regex":"1gen",'$options':'i'}}},
                    {'MODIFIED_DATE':{'$gte':csy_first_date()
#                           '$lte':enddate
                          }},

                          {'INVITEE_EMAIL':{"$not":{"$regex":"test",'$options':'i'}}},
                           {'INVITEE_EMAIL':{"$not":{"$regex":"1gen",'$options':'i'}}},
                         {'INVITEE_EMAIL':{"$not":{"$regex":"manoj.rayat5575@gmail.com",'$options':'i'}}},


                          ]}},
                      {'$group':{
                          '_id': {'month': {"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}},

                          'prac_parent':{'$addToSet':'$INVITEE_EMAIL'}
                          }},

                          {'$project':{
                              '_id':0,
                              'month':'$_id.month',

                              'practicing_parent':{'$size':'$prac_parent'}
                              }
                              },
                  {'$sort':{'month':1}}]
            tune_in_practice_CSY=list(collection.aggregate(query))
            tune_in_practice_CSY_df=pd.DataFrame(tune_in_practice_CSY)
            if tune_in_practice_CSY_df.empty==True:

                empty={'month':["Aug","Sep","Oct","Nov","Dec","Jan","Feb","Mar","Apr","May","Jun","Jul"],
                  'practicing_parent':[0,0,0,0,0,0,0,0,0,0,0,0]}
                tune_in_practice_CSY_df=pd.DataFrame(empty)


                tune_in_Final_CSY=pd.merge(tune_in_CSY_df,tune_in_practice_CSY_df,on=['month'],how='left').fillna(0)
                tune_in_Final_CSY=tune_in_Final_CSY[(tune_in_Final_CSY['month']!=0)]


                temp={
                        'Dates':tune_in_Final_CSY.month.tolist(),
                        'Tune_In_Send':tune_in_Final_CSY.TuneIn_Send.tolist(),
                        'Opt_Out':tune_in_Final_CSY.Opt_Out.tolist(),
                        'Opt_In':tune_in_Final_CSY.Opt_In.tolist(),
                        'practicing_parent':tune_in_Final_CSY.practicing_parent.tolist()

                    }
            else:

                tune_in_Final_CSY=pd.merge(tune_in_CSY_df,tune_in_practice_CSY_df,on=['month'],how='left').fillna(0)
                tune_in_Final_CSY=tune_in_Final_CSY[(tune_in_Final_CSY['month']!=0)]


                temp={
                        'Dates':tune_in_Final_CSY.month.tolist(),
                        'Tune_In_Send':tune_in_Final_CSY.TuneIn_Send.tolist(),
                        'Opt_Out':tune_in_Final_CSY.Opt_Out.tolist(),
                        'Opt_In':tune_in_Final_CSY.Opt_In.tolist(),
                        'practicing_parent':tune_in_Final_CSY.practicing_parent.tolist()

                    }
    return json.dumps(temp)



@app.route('/usertuneinhisgraph/<userid>/<classid>')
def tune_in_user_graph(userid,classid):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    from datetime import datetime
#     startdate= dateutil.parser.parse(str(startdate))
#     enddate= dateutil.parser.parse(str(enddate))
    collection2=db.user_master

    collection1 = db.tune_in_master
    query1=[{"$match":{
             '$and':[
                 { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
              {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
              {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
              {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                  {'IS_DISABLED':{"$ne":'Y'}},
            {'USER_ID._id':{'$in':db.user_master.distinct('_id',{'_id':ObjectId(""+userid+"")})}},
                  {'CLASS_ID._id':ObjectId(""+classid+"")},
            
        {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
              {'USER_ID.DEVICE_USED':{"$regex":'webapp','$options':'i'}},
              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
              {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
              {'EMAIL':{"$not":{"$regex":"test",'$options':'i'}}},
              {'EMAIL':{"$not":{"$regex":"1gen",'$options':'i'}}},
#               {'CREATED_DATE':{'$gte':csy_first_date()
#                                }},
                 
              ]}},
            

              {'$group':{'_id': {'month': {"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},
                
                  'TUNE_IN_SEND':{'$sum':1},'OPTED_OUT' :  {'$sum' : {'$cond': [ {'$eq': [ '$IS_OPTED_OUT', 'Y' ] }, 1, 0 ] } },
         'OPTED_IN' :  {'$sum' : {'$cond': [ {'$eq': [ '$IS_OPTED_OUT'
         , 'N' ] }, 1, 0 ] } }
                  }
                  }
                  ,{'$project':{
                      '_id':0,
                      'month':'$_id.month',                    
                      'TuneIn_Send':'$TUNE_IN_SEND',
                      'Opt_Out':'$OPTED_OUT',
                      'Opt_In':'$OPTED_IN'
                      }
                      },
           {'$sort':{'month':1}}]
    tune_in_CSY=list(collection1.aggregate(query1))
    tune_in_CSY_df=pd.DataFrame(tune_in_CSY)
    if tune_in_CSY_df.empty==True:
        temp={'Result':0}
    else:    
    
        collection = db.tune_in_audio_track_detail
        query=[{"$match":{
                 '$and':[
                     { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                  {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                  {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                  {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
#                       {'IS_DISABLED':{"$ne":'Y'}},
                 {'USER_ID._id':{'$in':db.user_master.distinct('_id',{'_id':ObjectId(""+userid+"")})}},
                      {'CLASS_ID._id':ObjectId(""+classid+"")},

#                  {'USER_ID._id':{'$in':db.user_master.distinct('_id',{'schoolId._id':ObjectId(""+schoolid+"")})}},

                  {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                  {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                  {'EMAIL':{"$not":{"$regex":"test",'$options':'i'}}},
                  {'EMAIL':{"$not":{"$regex":"1gen",'$options':'i'}}},
                  {'MODIFIED_DATE':{'$gte':csy_first_date()
                               }},
#                  
                     {'MODIFIED_DATE':{'$exists':1}},
                     {'IS_LISTENED':'Y'},
                      {'INVITEE_EMAIL':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'INVITEE_EMAIL':{"$not":{"$regex":"1gen",'$options':'i'}}},
                     {'INVITEE_EMAIL':{"$not":{"$regex":"manoj.rayat5575@gmail.com",'$options':'i'}}},


                      ]}},
                  {'$group':{
                      '_id': {'month': {"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}},

                      'prac_parent':{'$addToSet':'$INVITEE_EMAIL'}
                      }},

                      {'$project':{
                          '_id':0,
                          'month':'$_id.month',

                          'practicing_parent':{'$size':'$prac_parent'}
                          }
                          },
              {'$sort':{'month':1}}]
        tune_in_practice_CSY=list(collection.aggregate(query))
        tune_in_practice_CSY_df=pd.DataFrame(tune_in_practice_CSY)
        if tune_in_practice_CSY_df.empty==True:
     
            tune_in_CSY_df['practicing_parent']=np.nan
#             
            tune_in_Final_CSY=tune_in_CSY_df.fillna(0).sort_values(by='month')

        else:
            
            tune_in_Final_CSY=pd.merge(tune_in_CSY_df,tune_in_practice_CSY_df,on=['month'],how='left').fillna(0).sort_values(by='month')
        
        tune_in_Final_CSY['month']=pd.to_datetime(tune_in_Final_CSY.month, format='%Y-%m-%d')
        

#             plcy1= df4.merge(dfl9, on="Practice_date", how='right').fillna(0).sort_values(by='Practice_date')
        tune_in_Final_CSY['month']=tune_in_Final_CSY['month'].astype(np.int64)/int(1e6)

        tune_in_Final_CSY=tune_in_Final_CSY[(tune_in_Final_CSY['month']!=0)]
#             plcy=plcy1[["Practice_date","Total_Practice_LSY"]].values.tolist()

#             tune_in_Final_CSY[['month','month']].values.tolist(),
        a=tune_in_Final_CSY[['month','TuneIn_Send']].values.tolist(),
        b=tune_in_Final_CSY[['month','Opt_Out']].values.tolist(),
        c=tune_in_Final_CSY[['month','Opt_In']].values.tolist(),
        d=tune_in_Final_CSY[['month','practicing_parent']].values.tolist()

        temp={'data':{'TuneIn_Send':a, 'Opt_Out':b,'Opt_In':c,'practicing_parent':d}}            

    return json.dumps(temp)


@app.route('/usertuneincards/<userid>/<classid>')
def tunein_user_card(userid,classid):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    collection = db.tune_in_audio_track_detail
    collection2=db.user_master
    from datetime import datetime
#     startdate= dateutil.parser.parse(str(startdate))
#     enddate= dateutil.parser.parse(str(enddate))
   
 
    collection1 = db.tune_in_master
    query1=[{"$match":{
             '$and':[
                 { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
              {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                {'IS_DISABLED':{"$ne":'Y'}},
              {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
              {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
          {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
              {'USER_ID.DEVICE_USED':{"$regex":'webapp','$options':'i'}},
              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
              {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
              {'EMAIL':{"$not":{"$regex":"test",'$options':'i'}}},
              {'EMAIL':{"$not":{"$regex":"1gen",'$options':'i'}}},
               {'USER_ID._id':{'$in':db.user_master.distinct('_id',{'_id':ObjectId(""+userid+"")})}},
                  {'CLASS_ID._id':ObjectId(""+classid+"")},

#                {'CREATED_DATE':{'$gte':csy_first_date()
#                                }},
                 
              ]}},

              {'$group':{
                  '_id': {},
                  'TUNE_IN_SEND':{'$sum':1},
                   'OPTED_OUT' :  {'$sum' : {'$cond': [ {'$eq': [ '$IS_OPTED_OUT'
         , 'Y' ] }, 1, 0 ] } },
         'OPTED_IN' :  {'$sum' : {'$cond': [ {'$eq': [ '$IS_OPTED_OUT'
         , 'N' ] }, 1, 0 ] } }
                  }
                  }
                  ,{'$project':{
                      '_id':0,
                      'TuneIn_Send':'$TUNE_IN_SEND',
                      'Opt_Out':'$OPTED_OUT',
                      'Opt_In':'$OPTED_IN'
                      }
                      }]
    tune_in_CSY=list(collection1.aggregate(query1))
    tune_in_CSY_df=pd.DataFrame(tune_in_CSY)
    if tune_in_CSY_df.empty==True:
        temp={'Result':0}
    else:

        TuneIn_Send=[0]
        try:
            TuneIn_Send=tune_in_CSY_df['TuneIn_Send']
        except:
            TuneIn_Send=[0]

        Opt_Out=[0]
        try:
            Opt_Out=tune_in_CSY_df['Opt_Out']
        except:
            Opt_Out=[0]

        Opt_In=[0]
        try:
            Opt_In=tune_in_CSY_df['Opt_In']
        except:
            Opt_In=[0]





        query=[{"$match":{
             '$and':[
                 { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
              {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
              {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
#                   {'IS_DISABLED':{"$ne":'Y'}},
              {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
              {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
              {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                 {'USER_ID._id':{'$in':db.user_master.distinct('_id',{'_id':ObjectId(""+userid+"")})}},
                  {'CLASS_ID._id':ObjectId(""+classid+"")},
                 {'MODIFIED_DATE':{'$exists':1}},
                 {'IS_LISTENED':'Y'},

              {'EMAIL':{"$not":{"$regex":"test",'$options':'i'}}},
              {'EMAIL':{"$not":{"$regex":"1gen",'$options':'i'}}},
              {'MODIFIED_DATE':{'$gte':csy_first_date()
                               }},
                 
                  {'INVITEE_EMAIL':{"$not":{"$regex":"test",'$options':'i'}}},
                   {'INVITEE_EMAIL':{"$not":{"$regex":"1gen",'$options':'i'}}},
                 {'INVITEE_EMAIL':{"$not":{"$regex":"manoj.rayat5575@gmail.com",'$options':'i'}}},


                  ]}},
              {'$group':{
                  '_id': { },

                  'prac_parent':{'$addToSet':'$INVITEE_EMAIL'},'prac_sessions':{'$sum':1}
                  }},

                  {'$project':{
                      '_id':0,

                      'practicing_parent':{'$size':'$prac_parent'},
                      'prac_sessions':'$prac_sessions'
                      }
                      }]
        tune_in_practice_CSY=list(collection.aggregate(query))
        tune_in_practice_CSY_df=pd.DataFrame(tune_in_practice_CSY)

        practicing_parent=[0]
        try:
            practicing_parent=tune_in_practice_CSY_df['practicing_parent']
        except:
            practicing_parent=[0]

        practicing_session=[0]
        try:
            practicing_session=tune_in_practice_CSY_df['prac_sessions']
        except:
            practicing_session=[0]


#         temp={'practicing_parent':str(practicing_parent[0]),'Opt_In':str(Opt_In[0]),'Opt_Out':str(Opt_Out[0]),'TuneIn_Send':str(TuneIn_Send[0])}

        cardscount=[int(TuneIn_Send[0]),int(Opt_In[0]),int(Opt_Out[0]),int(practicing_parent[0])]
        cardsname=['Tune_In_Send','Tune_In_Opt_In','Tune_In_Opt_Out','Parents_Practised']

#             data=[]
#             for i,j in zip(cardsname,cardscount):
#                 data.append([i,j])
        temp={'Tune_In_Send':int(TuneIn_Send[0]),'Tune_In_Opt_In':int(Opt_In[0]),'Tune_In_Opt_Out':int(Opt_Out[0]),
             'Parents_Practised':int(practicing_parent[0]),'practicing_session': int(practicing_session[0])}
    return json.dumps(temp)

# <<<<<<<<<<<--------------------api for OMS page table.---------------------->>>>>>>>>>>>>>>>>>>>


@app.route('/oms/table', methods=['GET'])

def omstable():
    # client = MongoClient('mongodb://adminIE:CtZh5Nqp8Qn9LHUDx2GH@54.184.165.106:27017/')     #BETA
    # db=client.compass_beta  

    client = MongoClient('mongodb://admin:F5tMazRj47cYqm33e@52.41.36.115:27017/')   #LIVE
    db=client.compass



    query=db.oms_master.aggregate([{'$project':{'_id':0,
                                                'ORDER_ID':'$OMS_ORDER_ID',
                                                'ORDER_TYPE':'$FOUNDATION',
                                                'DISTRICT_NAME':'$DISTRICT_NAME',
                                                'SCHOOL_NAME':'$SCHOOL_NAME',
                                                'SCHOOL_COUNT':'$SCHOOL_COUNT',
                                                'CITY':'$CITY',
                                                'STATE':'$STATE',
                                                'FULL_EXPERIENCE':'$FULL_EXPERIENCE_SCHOOL',
                                                'INITIAL_EXPERIENCE':'$INITIAL_EXPERIENCE_SCHOOL',
                                                'ORDER_CREATION_DATE':'$CREATED_DATE',
                                                'ADMIN_NAME':'$ADMIN_NAME',
                                                'ADMIN_EMAIL':'$ADMIN_EMAIL',
                                                'PARTNER_DETAILS':'$PARTNER_DETAILS',
                                                'ADDITIONAL_COMMENTS':'$COMMENTS',
                                                'STATUS':'$status'
                                                }}])
    om=list(query)
    df_om=pd.DataFrame(om)
#     full=[]
#     initial=[]
#     for i in range(len(list(df_om['FULL_EXPERIENCE']))):
#         if (list(df_om['FULL_EXPERIENCE'])[i]==''):
#             l=[]
#         else:
#             l=list(df_om['FULL_EXPERIENCE'])[i].split(',')

#         if (list(df_om['INITIAL_EXPERIENCE'])[i]==''):
#             m=[]
#         else:
#             m=list(df_om['INITIAL_EXPERIENCE'])[i].split(',')    
#         full.append(l)
#         initial.append(m)

#     full_count=[]
#     initial_count=[]
#     for i in range(len(full)):
#         size_full=len(full[i])
#         size_initial=len(initial[i])
#         full_count.append(size_full)
#         initial_count.append(size_initial)

#     df_om['FULL_EXP_SCHOOL_COUNT']=full_count
#     df_om['INITIAL_EXP_SCHOOL_COUNT']=initial_count
    df_om_new=df_om.astype(str)
    df_om.fillna('',inplace=True)

#     query2=db.district_master.aggregate([])
#     dm=list(query2)
#     dm_df=pd.DataFrame(dm)
#     dm_df['_id']=dm_df['_id'].astype('str')

#     final_df1=df_om.merge(dm_df[['_id','DISTRICT_NAME']],how='left',left_on='DISTRICT_NAME',right_on='_id')
#     final_df1=final_df1.rename(columns={"DISTRICT_NAME_x": "DISTRICT_ID", "DISTRICT_NAME_y": "DISTRICT_NAME"})
#     final_df1['DISTRICT_NAME'].fillna('NO DISTRICT INFO',inplace=True)
#     final_df2=final_df1[['ORDER_ID',                    
#                          'ORDER_TYPE','DISTRICT_NAME',
#                          'SCHOOL_NAME', 'SCHOOL_COUNT',
#                         'CITY', 'STATE',
#                          'FULL_EXP_SCHOOL_COUNT',
#                        'INITIAL_EXP_SCHOOL_COUNT',
#                          'ORDER_CREATION_DATE',
#                          'ADMIN_NAME', 'ADMIN_EMAIL',
#                          'PARTNER_DETAILS',
#                          'ADDITIONAL_COMMENTS', 'STATUS']]

    final_df2=df_om[['ORDER_ID',                    
                         'ORDER_TYPE','DISTRICT_NAME',
                         'SCHOOL_NAME', 'SCHOOL_COUNT',
                        'CITY', 'STATE',
                         'FULL_EXPERIENCE',
                       'INITIAL_EXPERIENCE',
                         'ORDER_CREATION_DATE',
                         'ADMIN_NAME', 'ADMIN_EMAIL',
                         'PARTNER_DETAILS',
                         'ADDITIONAL_COMMENTS', 'STATUS']]


    
    temp={'data':final_df2.values.tolist()}
    return json.dumps(temp)



# <<<<<<<<<<<<<<<<<<------ TUNE IN TABLE -------------------------------->>>>>>>>>>>>>>>>>>

@app.route('/tuneintable/<userid>/<classid>')

# ############################# TUNE IN SEND DETAILS

def tunein_user_table(userid,classid):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    collection = db.tune_in_audio_track_detail
    collection2=db.user_master
    from datetime import datetime
    #     startdate= dateutil.parser.parse(str(startdate))
    #     enddate= dateutil.parser.parse(str(enddate))


    collection1 = db.tune_in_master
    query1=[{"$match":{
             '$and':[

               {'USER_ID._id':{'$in':db.user_master.distinct('_id',{'_id':ObjectId(""+userid+"")})}},
                  {'CLASS_ID._id':ObjectId(""+classid+"")},
                 {"IS_DISABLED" : {"$ne":"Y"}},
                 
#                   {'CREATED_DATE':{'$gte':csy_first_date()}}
              ]}},

                  {'$project':{
                      '_id':1,
                      "USER_NAME" : "$NAME",
                      "CREATED_DATE" :{ "$dateToString": { "format": "%Y-%m-%d", "date": "$CREATED_DATE" } },
                      "CONTACT" : "$CONTACT",
                      "EMAIL" : "$EMAIL",
                      }
                      }]
    tune_in=list(collection1.aggregate(query1))
    tune_in=pd.DataFrame(tune_in).fillna("NO INFO")
    if tune_in.empty is True:
        temp={'Result':0}
        return json.dumps(temp)
    else:
        tune_in
    
    if "CONTACT" not in tune_in.columns:
        tune_in["CONTACT"] = 0
    if "USER_NAME" not in tune_in.columns:
        tune_in["USER_NAME"] = "NO INFO"
    if "EMAIL" not in tune_in.columns:
        tune_in["EMAIL"] = "NO INFO"
    if "CREATED_DATE" not in tune_in.columns:
        tune_in["CREATED_DATE"] = "NO INFO"


    if tune_in.empty:
        _id = 0
        USER_NAME = 0
        CREATED_DATE = 0
        EMAIL = 0
        CONTACT = 0
    else:
        _id = list(tune_in["_id"])
        USER_NAME = list(tune_in["USER_NAME"])
#         USER_NAME = [x for i, x in enumerate(USER_NAME) if i == USER_NAME.index(x)]
        CREATED_DATE = list(tune_in["CREATED_DATE"])
        EMAIL = list(tune_in["EMAIL"])
        CONTACT = list(tune_in["CONTACT"])
    
    tune_in = tune_in.to_numpy().tolist()
#     print(tune_in)
    
#     tune_in_dict = { "TUNE_IN_ID" : _id,"NAME" : USER_NAME, "CONTACT_NUMBER" : CONTACT, "EMAIL_ID" : EMAIL }
#     print(tune_in_dict)


    ############################# OPTED_OUT SEND DETAILS

    collection1 = db.tune_in_master
    query1=[{"$match":{
             '$and':[

               {'USER_ID._id':{'$in':db.user_master.distinct('_id',{'_id':ObjectId(""+userid+"")})}},
                  {'CLASS_ID._id':ObjectId(""+classid+"")},
                   {"IS_DISABLED" : {"$ne":"Y"}},
                 {'IS_OPTED_OUT' : {'$eq': 'Y'}},

    #               {'MODIFIED_DATE':{'$gte':datetime(2020,8,1)
    #                                }},
              ]}},

                  {'$project':{
                      '_id':1,
                      "USER_NAME" : "$NAME",
                      "CREATED_DATE" :{ "$dateToString": { "format": "%Y-%m-%d", "date": "$CREATED_DATE" } },
                      "EMAIL" : "$EMAIL",
                       "CONTACT" : "$CONTACT"
                      }
                      }]
    opt_out=list(collection1.aggregate(query1))
    opt_out = pd.DataFrame(opt_out).fillna("NO INFO")
    
    if "CONTACT" not in opt_out.columns:
        opt_out["CONTACT"] = 0
    if "USER_NAME" not in opt_out.columns:
        opt_out["USER_NAME"] = "NO INFO"
    if "EMAIL" not in opt_out.columns:
        opt_out["EMAIL"] = "NO INFO"
    if "CREATED_DATE" not in opt_out.columns:
        opt_out["CREATED_DATE"] = "NO INFO"


    if opt_out.empty:
        _id = 0
        USER_NAME = 0
        CREATED_DATE = 0
        EMAIL = 0
        CONTACT = 0
    else:
        _id = list(opt_out["_id"])
        USER_NAME = list(opt_out["USER_NAME"])
#         USER_NAME = [x for i, x in enumerate(USER_NAME) if i == USER_NAME.index(x)]
        CREATED_DATE = list(opt_out["CREATED_DATE"])
        EMAIL = list(opt_out["EMAIL"])
        CONTACT = list(opt_out["CONTACT"])

    opt_out = opt_out.to_numpy().tolist()
#     print(opt_out)
    
#     opt_out_dict = { "OPT_OUT_ID" : _id,"NAME" : USER_NAME, "CONTACT_NUMBER" : CONTACT, "EMAIL_ID" : EMAIL }


    ############################# OPTED_IN SEND DETAILS


    collection1 = db.tune_in_master
    query1=[{"$match":{
             '$and':[

               {'USER_ID._id':{'$in':db.user_master.distinct('_id',{'_id':ObjectId(""+userid+"")})}},
                  {'CLASS_ID._id':ObjectId(""+classid+"")},
                   {"IS_DISABLED" : {"$ne":"Y"}},
                 {'IS_OPTED_OUT' : {'$eq': 'N'}},

#                   {'CREATED_DATE':{'$gte':csy_first_date()
#                                    }},
              ]}},

                  {'$project':{
                      '_id':1,
                      "USER_NAME" : "$NAME",
                      "CREATED_DATE" :{ "$dateToString": { "format": "%Y-%m-%d", "date": "$CREATED_DATE" } },
                      "EMAIL" : "$EMAIL",
                       "CONTACT" : "$CONTACT"
                      }
                      }]
    opt_in=list(collection1.aggregate(query1))
    opt_in=pd.DataFrame(opt_in).fillna("NO INFO")
#     print(opt_in)
    
    if "CONTACT" not in opt_in.columns:
        opt_in["CONTACT"] = 0
    if "USER_NAME" not in opt_in.columns:
        opt_in["USER_NAME"] = "NO INFO"
    if "EMAIL" not in opt_in.columns:
        opt_in["EMAIL"] = "NO INFO"
    if "CREATED_DATE" not in opt_in.columns:
        opt_in["CREATED_DATE"] = "NO INFO"

    if opt_in.empty:
        _id = 0
        USER_NAME = 0
        CREATED_DATE = 0
        EMAIL = 0
        CONTACT = 0
    else:
        _id = list(opt_in["_id"])
        USER_NAME = list(opt_in["USER_NAME"])
#         USER_NAME = [x for i, x in enumerate(USER_NAME) if i == USER_NAME.index(x)]
        CREATED_DATE = list(opt_in["CREATED_DATE"])
        EMAIL = list(opt_in["EMAIL"])
        CONTACT = list(opt_in["CONTACT"])

    opt_in = opt_in.to_numpy().tolist()
#     print(opt_in)
#     opt_in_dict = { "OPT_IN _ID" : _id, "NAME" : USER_NAME, "CONTACT_NUMBER" : CONTACT, "EMAIL_ID" : EMAIL }   

#     print(len(tune_in), len(opt_out), len(opt_in))
    if len(tune_in)==0:
        tune_in.append(0)
    if len(opt_out)==0:
        opt_out.append(0)
    if len(opt_in)==0:
        opt_in.append(0)
        
    temp = {"TUNE_IN" : tune_in, "OPT_OUT" : opt_out, "OPT_IN" : opt_in}
    
#     print(len(tune_in), len(opt_out), len(opt_in))
    
#     return temp
    return json.dumps(temp, default=str)



# <<<<<<<<<<<<<<<<<<------ Classroom Feed -------------------------------->>>>>>>>>>>>>>>>>>

@app.route('/classroom_feeds')
def teacher_feeds():
    #     from datetime import datetime
    import datetime

    # username = urllib.parse.quote_plus('adminIE')
    # password = urllib.parse.quote_plus('CtZh5Nqp8Qn9LHUDx2GH')
    # client = MongoClient("mongodb://%s:%s@54.184.165.106:27017/" % (username, password))
    # db=client.compass_beta

    client = MongoClient('mongodb://admin:F5tMazRj47cYqm33e@52.41.36.115:27017/')
    db=client.compass

    collectionpa = db.programs_audio.aggregate([
    {"$project":{"_id":0,'AUDIO_ID':"$_id","IMAGE":"$CLASSROOM_IMAGE_URL","AUDIO_NAME" : "$AUDIO_NAME"}}

    ])
    dfpa= DataFrame(list(collectionpa)).fillna(0)
    dfpa['AUDIO_ID']=dfpa['AUDIO_ID'].astype(str)
    dfpa["VIDEO_ID"] = dfpa['AUDIO_NAME']
    dfpa["VIDEO_ID"] = dfpa[dfpa['AUDIO_NAME'].str.contains("=")]['AUDIO_NAME'].str.split('=').str[1]
    # dfpa = dfpa.fillna(0)
    dfpa["VIDEO_ID"].fillna(dfpa['AUDIO_NAME'], inplace=True)
    conditions  = [dfpa["VIDEO_ID"] != dfpa['AUDIO_NAME'], dfpa["VIDEO_ID"] == dfpa['AUDIO_NAME']]
    choices     = [1, 0]
    dfpa["IS_VIDEO"] = np.select(conditions, choices)
    dfpa = dfpa.drop(['AUDIO_NAME'], axis=1)


    df=pd.read_csv("present_feed_data.csv")
    df['AUDIO_ID']=df['AUDIO_ID'].astype(str)
    dfatm=pd.merge(dfpa,df,on='AUDIO_ID',how="right")
    top=dfatm.head(5)    
        
    if top.empty:
        top=pd.DataFrame(index=[0], columns=['AUDIO_ID','IMAGE','VIDEO_ID','IS_VIDEO','Unnamed: 0','AUDIO_TITLE','NARRATEDBY',
                                             'AUDIO_DURATION','PLAYS'])

        top["AUDIO_ID"].fillna(0,inplace=True)
        top["IMAGE"].fillna("",inplace=True)
        top["VIDEO_ID"].fillna("",inplace=True)
        top["IS_VIDEO"].fillna(0,inplace=True)
        top["Unnamed: 0"].fillna(0,inplace=True)
        top["AUDIO_TITLE"].fillna("",inplace=True)
        top["NARRATEDBY"].fillna("",inplace=True)
        top["AUDIO_DURATION"].fillna(0,inplace=True)
        top["PLAYS"].fillna(0,inplace=True)
        
    top=top.fillna(0)         
    top["NARRATEDBY"].replace('0','',inplace=True)

    top_practices=top.to_dict("records")
    collection1 = db.audio_track_master.aggregate([
        {"$match":{
            '$and':[
                # {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
    #              { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
    #                    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
    #                      {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #           {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
    #           {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
    #           {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
    #           {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
    #           {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
    #           {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},  
                        {"PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
                {'CREATED_DATE': {'$gte': datetime.datetime.utcnow()-datetime.timedelta(hours=24)}}
                ]}},
            {'$group':
            {'_id':'$USER_ID._id',
                'State':{'$first':'$USER_ID.schoolId.STATE'},
                'Country':{'$first':'$USER_ID.schoolId.COUNTRY'}
                }}
            ])
    df1=DataFrame(list(collection1)).fillna(0)
    if df1.empty == True:
        live_users=0
        live_students=0
    else:
        live_users=len(df1["_id"])
        live_students=live_users*28
    collection2 = db.classroom_feed.aggregate([
        {"$match":{
            '$and':[
                {"AUDIO_ID":{"$exists":1}},
                        {"AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}}
    #              { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
    #                    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
    #                      {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #           {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
    #           {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
    #           {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
    #           {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
    #           {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
    #           {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},    
            ]}},
            {"$group":{"_id":"$AUDIO_ID._id",
                    "AUDIO_TITLE":{"$first":"$AUDIO_ID.AUDIO_TITLE"},
                    "AUDIO_DURATION":{"$first":"$AUDIO_ID.AUDIO_LENGTH"},
                    "NARRATOR":{"$first":"$AUDIO_ID.NARRATOR_ID.NARRATOR_NAME"},
                    "IMAGE":{"$first":"$AUDIO_ID.IMAGE_URL"},
                        'count':{'$sum':1},
                    }

        },
        {'$project':{"_id":0,
            'AUDIO_ID':"$_id",
                    "AUDIO_TITLE":"$AUDIO_TITLE" ,
                    "NARRATEDBY":"$NARRATOR",
                    "AUDIO_DURATION":"$AUDIO_DURATION",
                    # "IMAGE":"$IMAGE",
                    "PLAYS":"$count"
                }
                },{"$sort":{"PLAYS":-1}}])
    df2= DataFrame(list(collection2)).fillna(0)
    if df2.empty:
        df2 = pd.DataFrame(index=[0],columns=['AUDIO_ID','AUDIO_TITLE','NARRATEDBY','AUDIO_DURATION','PLAYS'])
        df2 = df2.fillna(0)
    df2['AUDIO_ID']=df2['AUDIO_ID'].astype(str)
    df2["AUDIO_DURATION"]=df2["AUDIO_DURATION"].round(1)
    dfpf=pd.merge(dfpa,df2,on='AUDIO_ID',how="right")
    if dfpf.empty:
        dfpf=pd.DataFrame(index=[0], columns=['AUDIO_ID','IMAGE','VIDEO_ID','IS_VIDEO','AUDIO_TITLE','NARRATEDBY',
                                             'AUDIO_DURATION','PLAYS'])

        dfpf["AUDIO_ID"].fillna(0,inplace=True)
        dfpf["IMAGE"].fillna("",inplace=True)
        dfpf["VIDEO_ID"].fillna("",inplace=True)
        dfpf["IS_VIDEO"].fillna(0,inplace=True)
        dfpf["AUDIO_TITLE"].fillna("",inplace=True)
        dfpf["NARRATEDBY"].fillna("",inplace=True)
        dfpf["AUDIO_DURATION"].fillna(0,inplace=True)
        dfpf["PLAYS"].fillna(0,inplace=True)    

    dfpf=dfpf.fillna(0)
    
    dfpf["NARRATEDBY"]=dfpf["NARRATEDBY"].replace(0,"",inplace=True)  
    dfpf["NARRATEDBY"].fillna('',inplace=True)
    
    temp={"top_practices":top_practices,"live":{"live_users":live_users,"live_students":live_students},
          "all_time":dfpf.to_dict("records")}
    return json.dumps(temp)


# =====
@app.route('/narratorprofileclassroom/<id>')
def narrator_profile_classroom(id): 
    import datetime
    from textblob import TextBlob, Word, Blobber

    # username = urllib.parse.quote_plus('adminIE')
    # password = urllib.parse.quote_plus('CtZh5Nqp8Qn9LHUDx2GH')
    # client = MongoClient("mongodb://%s:%s@54.184.165.106:27017/" % (username, password))
    # db=client.compass_beta

    client = MongoClient('mongodb://admin:F5tMazRj47cYqm33e@52.41.36.115:27017/')
    db=client.compass

    collection = db.narrator_profile.aggregate([
        {"$match":
        {"$and":[{'_id':{"$eq":ObjectId(""+id+"")}}]}}

        ])
    df= DataFrame(list(collection)).fillna(0)
    narrator_list=df["_id"].tolist()
    df1= pd.read_csv("old_practice.csv")
    df1=df1[df1["NARRAROR"]==id]

    df2= pd.read_csv("new_practice.csv")
    df2=df2[df2["NARRAROR"]==id]
    practice = df1.append(df2, ignore_index=True)
    if practice.empty == True:
        plays="0"
        since="0"
    else:    
        plays=int(sum(practice["Total"]))
        since=practice.MODIFIED_DATE.min()
    collection3=db.audio_feedback.aggregate([{"$match":{'$and':[
            {"AUDIO_ID.NARRATOR_ID._id":{
                        "$in":narrator_list
                    }},
                    { 'USER.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    {'USER.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                    {'USER.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                    {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                            {"AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
                    {'USER.IS_DISABLED':{"$ne":'Y'}},
                    {'RATING':{"$ne":0}}
                    ]}},
                    {"$group": {"_id":"null", 'RATING': {"$avg":"$RATING"} } }
                    ,
                    {"$project":{"_id":0,'RATING':{"$round":["$RATING",1]}}},
                                            ])
    df033= list(collection3)
    df33= pd.DataFrame.from_dict(df033).fillna(0)
    if df33.empty == True:
        n_rating="0"
    else:
        n_rating=df33["RATING"][0]
    info={"name":str(df["NARRATOR_NAME"][0]),"place":str(df["PLACE"][0]),"image":str(df["PROFILE_IMAGE"][0]),"desc":str(df["NARRATOR_DESCRIPITION"][0]),
        "plays":int(plays),"since":str(since),"rating":n_rating}
    df4=practice.groupby(["PROGRAM_NAME"]).sum().reset_index()
    if df4.empty == True:
        featuring_in="no info"
        Top_mindfultrack_in="no info"
        recent_comment="no info"
    else:
        collection4=db.audio_feedback.aggregate([{"$match":{'$and':[
                {"AUDIO_ID.NARRATOR_ID._id":{
                            "$in":narrator_list

                        }},
                        { 'USER.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        {'USER.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                        {'USER.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                        {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                                {"AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
                        {'USER.IS_DISABLED':{"$ne":'Y'}},
                        {'RATING':{"$ne":0}}
                        ]}},
                        {"$group":{"_id":"$AUDIO_ID.PROGRAM_ID.PROGRAM_NAME","RATING":{"$avg":"$RATING"}}}
                        ,
                        {"$project":{"_id":0,"PROGRAM_NAME":"$_id","RATING":1}},
                                                ])
        df05= list(collection4)
        df5= pd.DataFrame.from_dict(df05).fillna(0)
        if df5.empty == True:
            df5["PROGRAM_NAME"]="0"
            df5["RATING"]="0"
            featuring=pd.merge(df4,df5,on="PROGRAM_NAME",how="left")
            featuring["RATING"]=0
            featuring1=featuring[["PROGRAM_NAME","Total","RATING"]]
        else:
            df5=df5.round(decimals=1)   
            featuring=pd.merge(df4,df5,on="PROGRAM_NAME",how="left")
            featuring1=featuring[["PROGRAM_NAME","Total","RATING"]]
        featuring2=featuring1.nlargest(3, "Total")
        if featuring2.empty:
            featuring2=pd.DataFrame(index=[0], columns=['PROGRAM_NAME','Total','RATING'])

        featuring2["PROGRAM_NAME"].fillna("",inplace=True)
        featuring2["Total"].fillna(0,inplace=True)
        featuring2["RATING"].fillna(0,inplace=True)

        featuring_in=featuring2.to_dict("records")
        collection5=db.audio_feedback.aggregate([{"$match":{'$and':[
                {"AUDIO_ID.NARRATOR_ID._id":{
                            "$in":narrator_list

                        }},
                        { 'USER.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        {'USER.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                        {'USER.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                        {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                                    {"AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
                        {'USER.IS_DISABLED':{"$ne":'Y'}},
                        {'RATING':{"$ne":0}}
                        ]}},
                        {"$group":{"_id":{"PROGRAM_NAME":"$AUDIO_ID.PROGRAM_ID.PROGRAM_NAME","AUDIO_TITLE":"$AUDIO_ID.AUDIO_TITLE"}
                                ,"RATING":{"$avg":"$RATING"}}}
                        ,
                        {"$project":{"_id":0,"PROGRAM_NAME":"$_id.PROGRAM_NAME","AUDIO_TITLE":"$_id.AUDIO_TITLE","RATING":1}},
                                                ])
        df07= list(collection5)
        df7= pd.DataFrame.from_dict(df07).fillna(0)
        df6=practice.groupby(["AUDIO_TITLE","PROGRAM_NAME"]).sum().reset_index()
        if df7.empty == True:
            df7["PROGRAM_NAME"]="0"
            df7["AUDIO_TITLE"]="0"
            df7["RATING"]="0"
            mindfultrack=pd.merge(df6,df7,on=["AUDIO_TITLE","PROGRAM_NAME"],how="left")
            mindfultrack["RATING"]=0
            mindfultrack1=mindfultrack[["AUDIO_TITLE","PROGRAM_NAME","Total","RATING"]]
        else:
            df7=df7.round(decimals=1)
            mindfultrack=pd.merge(df6,df7,on=["AUDIO_TITLE","PROGRAM_NAME"],how="right")
    #             mindfultrack['RATING']=mindfultrack['RATING'].fillna('NO_Rating')
            mindfultrack1=mindfultrack[["AUDIO_TITLE","PROGRAM_NAME","Total","RATING"]]
        mindfultrack2=mindfultrack1.nlargest(3, "Total")
        mindfultrack2.reset_index(drop=True, inplace=True)
        dfimage=pd.DataFrame()
        for i in range(len(mindfultrack2.index)):
            collection = db.programs_audio.aggregate([{"$match":{"AUDIO_TITLE":mindfultrack2["AUDIO_TITLE"][i],
                                                                 "PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]},
                                                                "PROGRAM_ID.PROGRAM_NAME":mindfultrack2["PROGRAM_NAME"][i]}},
                                                    {"$project":{"AUDIO_ID":"$_id","_id" : 0,"AUDIO_TITLE":"$AUDIO_TITLE",
                                                                "PROGRAM_NAME":"$PROGRAM_ID.PROGRAM_NAME",
                                                    "IMAGE_URL":"$CLASSROOM_IMAGE_URL","AUDIO_NAME" : "$AUDIO_NAME"}}
                                                    ])
            dfimage1= DataFrame(list(collection))
            dfimage=dfimage.append(dfimage1)
        dfimage.reset_index(drop=True, inplace=True)
        dfimage["VIDEO_ID"] = dfimage['AUDIO_NAME']
        dfimage["VIDEO_ID"] = dfimage[dfimage['AUDIO_NAME'].str.contains("=")]['AUDIO_NAME'].str.split('=').str[1]
        dfimage["VIDEO_ID"].fillna(dfimage['AUDIO_NAME'], inplace=True)
        conditions  = [dfimage["VIDEO_ID"] != dfimage['AUDIO_NAME'], dfimage["VIDEO_ID"] == dfimage['AUDIO_NAME']]
        choices     = [1, 0]
        dfimage["IS_VIDEO"] = np.select(conditions, choices)
        dfimage = dfimage.drop(['AUDIO_NAME'], axis=1)



        mindfultrack0=pd.merge(mindfultrack2,dfimage,on=["AUDIO_TITLE","PROGRAM_NAME"],how="left").fillna(0)
        if mindfultrack0.empty:
            mindfultrack0=pd.DataFrame(index=[0], columns=['AUDIO_ID','AUDIO_TITLE','PROGRAM_NAME','Total','RATING','IMAGE_URL','VIDEO_ID','IS_VIDEO'])

        mindfultrack0["AUDIO_TITLE"].fillna("",inplace=True)
        mindfultrack0["PROGRAM_NAME"].fillna("",inplace=True)
        mindfultrack0["Total"].fillna(0,inplace=True)
        mindfultrack0["RATING"].fillna(0,inplace=True)
        mindfultrack0["IMAGE_URL"].fillna("",inplace=True)
        mindfultrack0["VIDEO_ID"].fillna("",inplace=True)
        mindfultrack0["IS_VIDEO"].fillna(0,inplace=True)

        Top_mindfultrack_in=mindfultrack0.to_dict("records")
        collection3=db.audio_feedback.aggregate([{"$match":{'$and':[
                {"AUDIO_ID.NARRATOR_ID._id":{
                            "$in":narrator_list

                        }},
                        { 'USER.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        {'USER.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                        {'USER.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                        {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                        {'USER.IS_DISABLED':{"$ne":'Y'}},
                                    {"AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
                        {'COMMENT':{'$exists':1}},
                        {'COMMENT':{"$not":{"$regex":" ",'$options':'i'}}},
                        {'COMMENT':{"$ne":""}},

                        ]}},
                        {"$project":{"_id":0,"USER_NAME":"$USER.USER_NAME","USER_PROFILE" : "$USER.IMAGE_URL" ,"PROGRAM_NAME":"$AUDIO_ID.PROGRAM_ID.PROGRAM_NAME",
                                    'MODIFIED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$MODIFIED_DATE"}}, "RATING":1,"COMMENT":1,
                                    "AUDIO_TITLE":"$AUDIO_ID.AUDIO_TITLE","NARRATOR":"$AUDIO_ID.NARRATEDBY"}},
                        {"$sort":{'MODIFIED_DATE':-1}},{"$limit":30}
                                                ])
        df03= list(collection3)
        df3= pd.DataFrame.from_dict(df03).fillna(0)
        if df3.empty==True:
            recent_comment=[]
        else:


            if 'USER_PROFILE' not in df3.columns:
                df3['USER_PROFILE']=""
            else:
                df3


        #####################sentiment_analysis##################
            spec_chars = ["!",'"',"#","%","&","'","(",")",
                        "*","+",",","-",".","/",":",";","<",
                        "=",">","?","@","[","\\","]","^","_",
                        "`","{","|","}","~","–","\n"]
            df3['sentiment'] = df3.COMMENT.apply(lambda x: TextBlob(str(x)).sentiment.polarity)
            df10=df3[df3["sentiment"]>= 0.30]
            # current_Date = (datetime.datetime.today()- timedelta(60)).strftime ('%Y-%m-%d')
            df10=df10.sort_values(by="MODIFIED_DATE")
            recent_comment=df10[["USER_NAME","MODIFIED_DATE","RATING","COMMENT","USER_PROFILE"]].to_dict("records")
    collection4 = db.narrator_profile.aggregate([
        {"$match":
        {"$and":[{'_id':{"$ne":ObjectId(id)}}]}},
        {"$project":{"_id":0,"NARRATOR_NAME":"$NARRATOR_NAME","NARRATOR_IMAGE":"$NARRATOR_IMAGE"}}

        ])
    df11= DataFrame(list(collection4)).fillna(0)
    if df11.empty:
        df11=pd.DataFrame(index=[0], columns=['NARRATOR_NAME','NARRATOR_IMAGE'])

    df11["NARRATOR_NAME"].fillna("",inplace=True)
    df11["NARRATOR_IMAGE"].fillna("",inplace=True)
    other_narrator=df11.to_dict("records")
    temp={"info":info,"featuring_in":featuring_in,"Top_mindfultrack_in":Top_mindfultrack_in,
          "recent_comment":recent_comment,"other_narrators":other_narrator}
    return json.dumps(temp, default =str)  

# narrator_profile_classroom("5f240d7a7a1c0000950060c2")





# <<<<<<<<<<<<<-----------------OMS Api end here---------------------------------->>>>>>>>>>>>>>>>>


@app.route('/CTO_admin_api/<schoolid>')
def admin_cto(schoolid):
    username = urllib.parse.quote_plus('adminIE')        ###### test
    password = urllib.parse.quote_plus('CtZh5Nqp8Qn9LHUDx2GH')
    client = MongoClient("mongodb://%s:%s@54.184.165.106:27017/" % (username, password))

    #     username = urllib.parse.quote_plus('admin')
    #     password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    #     client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))

    db=client.compass   

    collection1 = db.user_master.aggregate([
    {"$match":{"$and":[
    {'IS_DISABLED':{"$ne":'Y'}},{'IS_BLOCKED':{"$ne":'Y'}}, {'IS_ADMIN':'Y'},
    {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
    {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}},
    {'schoolId.NAME':{"$not":{"$regex":'test', '$options':'i'}}},
    {'EMAIL_ID':{"$not":{"$regex":"Test",'$options':'i'}}},
    {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
    {'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
        {'schoolId._id':ObjectId(""+schoolid+"")},
    #         {'schoolId._id':ObjectId("5f2bca29ba0be61b0c1cd64f")},
    {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}
    ]}},

    {'$group':{'_id':'$schoolId._id', 'schoolname':{'$first':'$schoolId.NAME'}, 'userid':{'$first':'$_id'},
    'username':{'$first':'$USER_NAME'}, 'email':{'$first':'$EMAIL_ID'}, 
    'district_id':{'$first':'$DISTRICT_ID._id'},
    'admin_count':{'$sum':1},   "district_name":{'$first':"$DISTRICT_ID.DISTRICT_NAME"}}},             
    {'$sort':{'admin_count':-1}}               
    ])

    df22= DataFrame(list(collection1))

    if df22.empty==True:
        temp={'Result':0}
        return json.dumps(temp, default=str)
    schoolslist11=df22['_id'].tolist()

    collection2 = db.user_master.aggregate([
    {"$match":{"$and":[
    {'IS_DISABLED':{"$ne":'Y'}},{'IS_BLOCKED':{"$ne":'Y'}}, {'IS_ADMIN':'Y'},
    {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
    {'schoolId.NAME':{"$not":{"$regex":'Blocked', '$options':'i'}}},
    {'schoolId.NAME':{"$not":{"$regex":'test', '$options':'i'}}},
    {'EMAIL_ID':{"$not":{"$regex":"Test",'$options':'i'}}},
    {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
    {'USER_NAME':{"$not":{"$regex":"Test",'$options':'i'}}},
    {'schoolId._id':{"$in":schoolslist11}},
    {'USER_NAME':{"$not":{"$regex":'1gen','$options':'i'}}}
    ]}},

    {'$group':{'_id':'$_id', 'schoolname':{'$first':'$schoolId.NAME'},'schoolid':{'$first':'$schoolId._id'},
    'username':{'$first':'$USER_NAME'}, 'email':{'$first':'$EMAIL_ID'}, 
    'district_id':{'$first':'$DISTRICT_ID._id'},'admin':{'$first':'$IS_ADMIN'},
    'admin_count':{'$sum':1},   "district_name":{'$first':"$DISTRICT_ID.DISTRICT_NAME"}}},             
    {'$sort':{'admin_count':-1}}               
    ])

    df_user= DataFrame(list(collection2))


    # collection6= db.user_master.aggregate([
    #  {"$match":{'$and':[
    #  { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
    #        {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
    #          {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # {'INCOMPLETE_SIGNUP':{"$ne":'Y'}}, {'IS_DISABLED':{"$ne":'Y'}},
    # {'IS_BLOCKED':{"$ne":'Y'}}, {'schoolId._id':{'$in':schoolslist11}},
    #         {'_id':{'$in':adminslist}},
    # {'schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
    # {'schoolId.BLOCKED_BY_CAP':{'$exists':0}},
    # {'schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}}
    # ]}},
    # {'$group':{'_id':'$_id','email':{'$first':'$EMAIL_ID'},'school':{'$first':'$schoolId._id'}
    # }}, {'$sort':{'school':-1}}
    # ])

    # df6= DataFrame(list(collection6))

    collection5= db.audio_track_master.aggregate([
    {"$match":{
    '$and':[
     { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
    {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
    {'USER_ID.IS_DISABLED':{"$ne":'Y'}},{'USER_ID.schoolId._id':{"$in":schoolslist11}},
    {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
    {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
    {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
    {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}}

    ]}},
    {'$group':
    {'_id':'$USER_ID._id','email':{'$first':'$USER_ID.EMAIL_ID'},'practice_count':{'$sum':1}, 'SCHOOLID':{'$first':'$USER_ID.schoolId._id'}
    }}, {'$sort':{'SCHOOLID':-1}}
    ])


    df5= DataFrame(list(collection5))

    if df5.empty is False:
        finalx=df5.sort_values(['SCHOOLID','practice_count'], ascending=False).groupby(['SCHOOLID']).agg({'practice_count':'max', '_id':'first', 'email':'first'}).reset_index()
    else:
        finalx=df_user


    df4=df22[df22['admin_count']==1]

    schoolslist=df4['_id'].tolist()
    adminslist=df4['userid'].tolist()


    collection3= db.audio_track_master.aggregate([
    {"$match":{
    '$and':[
     { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
    {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},{'USER_ID.IS_DISABLED':{"$ne":'Y'}},
    {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},{'USER_ID.schoolId._id':{'$in':schoolslist}},
    {'USER_ID._id':{'$nin':adminslist}},
    {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
    {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
    {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}}
    ]}},
    {'$group':
    {'_id':'$USER_ID._id','email':{'$first':'$USER_ID.EMAIL_ID'},'practice_count':{'$sum':1}, 'SCHOOLID':{'$first':'$USER_ID.schoolId._id'}
    }}, {'$sort':{'SCHOOLID':-1}}
    ])
    df3= DataFrame(list(collection3))


    if df3.empty is False:
        final=df3.sort_values(['SCHOOLID','practice_count'], ascending=False).groupby(['SCHOOLID']).agg({'practice_count':'max', '_id':'first', 'email':'first'}).reset_index()
    else:
        final=df_user


    if (df22['admin_count']==1).any():
            temp={'user_id':str(final['_id'].iloc[0]), 'email':str(final['email'].iloc[0])}
    else:
        temp={'user_id':str(finalx['_id'].iloc[0]), 'email':str(finalx['email'].iloc[0])}
    return json.dumps(temp)

@app.route('/district_manageinvitetable/<userid>')
def admin_portal_table_super_admin(userid):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass

    collection2=db.school_master
    collection=db.user_master
    collection4=db.invite_master
    collection5=db.login_logs
    collection1=db.audio_track_master
    collection3=db.subscription_master

    from datetime import datetime

    df1=DataFrame(list(db.user_master.aggregate([{"$match":
    {'$and': [
    #             {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
    {"IS_DISABLED":{"$ne":"Y"}},
    {"IS_BLOCKED":{"$ne":"Y"}},
    {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

    #                    {'IS_ADMIN':'Y'},
        {"_id" : ObjectId(""+userid+"")},
                 {'EMAIL_ID':{'$ne':''}},

                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},

                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
    ]}},
    # {'$group':{'_id':'$schoolId._id','sid':{'$addToSet':'$schoolId._id'},'school_name':{'$first':'$schoolId.NAME'},
    #            'date':{'$min':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},
    #            'country':{'$first':'$schoolId.COUNTRY'},
    # 'State':{'$first':'$schoolId.STATE'},'INIVITES':{'$first':'$INVITES_ASSIGNED'},
    #            'EMAIL':{'$first':'$EMAIL_ID'},'admin':{'$first':'$IS_ADMIN'},'ROLE':{'$first':'$ROLE_ID.ROLE_id'}}},

    {'$project':{'_id':'$_id'}}])))

    if df1.empty==True:
        temp={'Result':0}
        return json.dumps(temp, default=str)

    else:
        df1
    userid=str(df1['_id'][0])

    #     print(schoolid)
    df5=DataFrame(list(db.user_master.aggregate([{"$match":
    {'$and': [
    {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
    {"IS_DISABLED":{"$ne":"Y"}},
    {"IS_BLOCKED":{"$ne":"Y"}},
    {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                            { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                            { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    {'_id':ObjectId(""+userid+"")},
    #                    {'IS_ADMIN':'Y'},

                         {'EMAIL_ID':{'$ne':''}},

                             {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},

                                       {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                         {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
    ]}},
    # {'$group':{'_id':'$schoolId._id','teacher':{'$sum':1},'school_name':{'$first':'$schoolId.NAME'},'date':{'$min':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},'country':{'$first':'$schoolId.COUNTRY'},
    # 'State':{'$first':'$schoolId.STATE'},'INIVITES':{'$first':'$INVITES_ASSIGNED'},'city':{'$first':'$schoolId.CITY'},'admin':{'$first':'$IS_ADMIN'},'ROLE':{'$first':'$ROLE_ID.ROLE_id'}}},

    {'$project':{'_id': "$_id",'ADMIN':'$IS_DISTRICT_ADMIN','INIVITES':'$INVITES_ASSIGNED'}}])))

    user_id = list(df5["_id"])


    df2=DataFrame(list(db.invite_master.aggregate([
    {"$match":
    {'$and': [
        {'USER_ID._id' : ObjectId(""+userid+"") },
                      {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
        {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
        {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #     //             {'USER_ID.IS_PORTAL':'Y'},
        {'USER_ID.EMAIL_ID':{'$ne':''}},
                    {"USER_ID._id" : ObjectId("5f2e12f3592000521523721a")},


    #     //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
    ]}},
    # {'$group':{'_id':'$USER_ID.schoolId._id','ID':{'$addToSet':'$USER_ID._id'},
    # 'invited_user':{'$addToSet':'$INVITED_USER_ID._id'},
    # 'accepted' :  {'$sum' : {'$cond': [ {'$eq': [ '$STATUS', 'Y' ] }, 1, 0 ] } },}},

    {'$project':{'_id':'$INVITED_USER_ID._id',"User_Name" : "$INVITED_USER_ID.USER_NAME",
                 "EMAIL_ID" : '$INVITED_USER_ID.EMAIL_ID','accepted':'$STATUS'}}
    ])))
    if df2.empty:
        temp={'Result':0}
        return json.dumps(temp, default=str)
    else:
        df2

    df2_Y = df2[df2["accepted"] == "Y"]
    df2_N = df2[df2["accepted"] == "N"]
    user_id1 = list(df2["_id"])
    user_id2 = list(df2_Y["_id"])


    df3=DataFrame(list(db.audio_track_master.aggregate([
    {"$match":
    {'$and': [
    {'USER_ID._id' : {"$in" : user_id1 }},
    {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
    {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
    {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
    {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

                         {'USER_ID.EMAIL_ID':{'$ne':''}},

    {'MODIFIED_DATE':{"$gte": csy_first_date()}},

                         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
    ]}},
    {'$group':{'_id':'$USER_ID._id','pc':{'$sum':1},
               'last_practice_date_q1':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}},
    'Total_Mindful_Minutes':{"$sum":{"$round":[{"$divide":[{"$subtract":['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
    {'$project':{'_id':1,'teacher_practice':'$pc','Total_Mindful_Minutes':'$Total_Mindful_Minutes',
                'last_practice_date':'$last_practice_date_q1'}}])))

    if df3.empty:
        df3=pd.DataFrame(columns=['_id','teacher_practice','Total_Mindful_Minutes','last_practice_date'])
        df3['_id']=df2['_id'].copy()
    df3.fillna(0,inplace=True)

    df4=DataFrame(list(db.audio_track_master.aggregate([
    {"$match":
    {'$and': [
    {'USER_ID._id' : {"$in" : user_id2 }},
    {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
    {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
    {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
    {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

                         {'USER_ID.EMAIL_ID':{'$ne':''}},

    {'MODIFIED_DATE':{"$gte":csy_first_date() }},

                         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
    ]}},
    {'$group':{'_id':'$USER_ID._id','pc':{'$sum':1},
               'last_practice_date_q1':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}},
    'Total_Mindful_Minutes':{"$sum":{"$round":[{"$divide":[{"$subtract":['$CURSOR_END','$cursorStart']}, 60]},0]}}}},
    {'$project':{'_id':1,'teacher_practice':'$pc','Total_Mindful_Minutes':'$Total_Mindful_Minutes',
                'last_practice_date':'$last_practice_date_q1'}}])))

    if df4.empty:
        df4=pd.DataFrame(columns=['_id','teacher_practice','Total_Mindful_Minutes','last_practice_date'])
        df4['_id']=df2_Y['_id'].copy()
    df4.fillna(0,inplace=True)

    df6=DataFrame(list(db.login_logs.aggregate([
    {"$match":
    {'$and': [
    {'USER_ID._id' : {"$in" : user_id1 }},
    {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
    {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
    {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
    {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #         //             {'USER_ID.IS_PORTAL':'Y'},
                         {'USER_ID.EMAIL_ID':{'$ne':''}},

                 {'LAST_LOGGED_IN':{"$gte": csy_first_date()}},
    #         //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
    ]}},
    # {'$group':{'_id':'$USER_ID._id','pc':{'$sum':1},'LAST_LOGGED_IN':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$LAST_LOGGED_IN'}}},
    # }},
    {'$project':{'_id':'$USER_ID._id','LAST_LOGGED_IN':{"$dateToString": { "format": "%Y-%m-%d", "date":'$LAST_LOGGED_IN'}}}}])))

    if df6.empty:
        df6=pd.DataFrame(columns=['_id','LAST_LOGGED_IN'])
        df6['_id']=df2['_id'].copy()
    df6.fillna(0,inplace=True)

    df7 = DataFrame(list(db.login_logs.aggregate([
    {"$match":
    {'$and': [
    {'USER_ID._id' : {"$in" : user_id2 }},
    {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
    {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
    {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
    {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

                         {'USER_ID.EMAIL_ID':{'$ne':''}},

    #                      {'LAST_LOGGED_IN':{"$gte": datetime(2020,8,1)}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
    ]}},
    # {'$group':{'_id':'$USER_ID._id','pc':{'$sum':1},'LAST_LOGGED_IN':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$LAST_LOGGED_IN'}}},
    # }},
    {'$project':{'_id':'$USER_ID._id','LAST_LOGGED_IN':{"$dateToString": { "format": "%Y-%m-%d", "date":'$LAST_LOGGED_IN'}}}}])))

    if df7.empty:
        df7=pd.DataFrame(columns=['_id','LAST_LOGGED_IN'])
        df7['_id']=df2_Y['_id'].copy()
    df7.fillna(0,inplace=True)

    df01=pd.merge(df5,df2,how='right', on='_id')
    df02=pd.merge(df01,df3,how='left', on='_id')
    df03=pd.merge(df02,df6,how='left', on='_id')
    # dff=pd.merge(dfff,df3, how='left', on='_id')
    final_df = df03.fillna(0)
    final_df = final_df[['_id','User_Name', 'EMAIL_ID','last_practice_date','LAST_LOGGED_IN','teacher_practice','Total_Mindful_Minutes']]
    final_df.columns = ['USER_ID','USER_NAME', 'EMAIL_ID','LAST_PRACTICE_DATE','LAST_LOGIN_DATE','PRACTICE_SESSIONS','MINDFUL_MINUTES']


    df11=pd.merge(df5,df2_Y,how='right', on='_id')
    df22=pd.merge(df11,df4,how='left', on='_id')
    df33=pd.merge(df22,df7,how='left', on='_id')
    final_df1 = df33.fillna(0)
    final_df1 = final_df1[['_id','User_Name', 'EMAIL_ID','last_practice_date','LAST_LOGGED_IN','teacher_practice','Total_Mindful_Minutes']]
    final_df1.columns = ['USER_ID','USER_NAME', 'EMAIL_ID','LAST_PRACTICE_DATE','LAST_LOGIN_DATE','PRACTICE_SESSIONS','MINDFUL_MINUTES']

    temp = {"INVITE_SENT" : final_df.to_numpy().tolist(), "INVITE_ACCEPTED" : final_df1.to_numpy().tolist()}
    #         print('school_data',len(final_df),len(final_df1))
    return json.dumps(temp, default=str)
    # return df2

@app.route('/district_manage_invite/<userid>')
def district_manage_invites(userid):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass


    collection2=db.school_master
    collection=db.user_master
    collection4=db.invite_master
    collection5=db.login_logs
    collection1=db.audio_track_master
    collection3=db.subscription_master
   
    from datetime import datetime

    df0 = DataFrame(list(collection.aggregate([
        {"$match":{'$and': [{"_id" : ObjectId(""+userid+"")}]}},
        {'$project':{'_id':1,"EMAIL_ID" : 1,'district_admin':'$IS_DISTRICT_ADMIN','school_admin':'$IS_ADMIN'}}])))
#     print(df0)



    if 'district_admin' not in df0.columns:
        df0['district_admin']=0

    # if df0[df0['district_admin']=='Y']:
    #     if 'Y' in df0['district_admin'][0]:
    if df0['district_admin'][0]=='Y':
        uemail = df0["EMAIL_ID"].to_list()

        df00 = DataFrame(list(db.district_master.aggregate([
        {"$match":{'$and': [
        {"ADMIN_EMAIL" : {"$in" : uemail}}]}},
        {'$project':{'_id':1,"ADMIN_EMAIL" : 1}}])))
#         print(df00)


        if df00.empty==True:
            data={'Result':0}        
            return json.dumps(data)
        else:
            disid = df00["_id"].to_list()
#             print(disid)

            df1=DataFrame(list(collection.aggregate([{"$match":
                 {'$and': [
#                  {"DISTRICT_ID._id" : {"$in" : disid}},
        #             {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
             {"IS_DISABLED":{"$ne":"Y"}},
             {"IS_BLOCKED":{"$ne":"Y"}},
             {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
             { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                {"IS_DISTRICT_ADMIN" : "Y"},
#                            {'IS_ADMIN':'Y'},
                     {"_id" : ObjectId(""+userid+"")},
             {'EMAIL_ID':{'$ne':''}},
             {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
             {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}

             ]}},
             {'$group':{'_id':'$_id','sid':{'$addToSet':'$schoolId._id'},'school_name':{'$first':'$schoolId.NAME'},'date':{'$min':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},'country':{'$first':'$schoolId.COUNTRY'},
             'State':{'$first':'$schoolId.STATE'},'INIVITES':{'$first':'$INVITES_ASSIGNED'},'EMAIL':{'$first':'$EMAIL_ID'},'admin':{'$first':'$IS_ADMIN'},'district_admin':{'$first':'$IS_DISTRICT_ADMIN'},'ROLE':{'$first':'$ROLE_ID.ROLE_id'}}},
             {'$project':{'_id':1,'sid':'$sid','ADMIN':'$admin','district_admin':'$district_admin','EMAIL_ID':'$EMAIL','INIVITES':'$INIVITES'}}])))

#             print(df1)
            if df1.empty==True:
                data={'Result':0}        
                return json.dumps(data)
            
            df2=DataFrame(list(collection4.aggregate([
             {"$match":
             {'$and': [

             {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
             {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
             {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
             { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
             {'USER_ID.EMAIL_ID':{'$ne':''}},
                            {"USER_ID._id" : ObjectId(""+userid+"")},
                     


             {'USER_ID.EMAIL_ID':{'$ne':''}},
             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
#              {'USER_ID.DISTRICT_ID._id':{"$in" : disid}},
             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
                 ]}},
             {'$group':{'_id':'$USER_ID._id','ID':{'$addToSet':'$USER_ID._id'},'invited_user':{'$addToSet':'$INVITED_USER_ID._id'},
             'accepted' :  {'$sum' : {'$cond': [ {'$eq': [ '$STATUS', 'Y' ] }, 1, 0 ] } },}},

             {'$project':{'_id':1,'user_id':'$ID','invited_user':{'$size':'$invited_user'},'accepted':'$accepted'}}
             ])))
            if df2.empty is True:
                sent=0
                accepted=0
                remaining=50
                data={"Invite_sent":str(sent),"invite_accepted":str(accepted),
                    "Total_invites":str(df1['INIVITES'][0]),
                    'Remaining_invites':str(abs(remaining)),
                        }   
                return json.dumps(data)
                
            else:
                df2
               

                df2['remaining']=df1['INIVITES']-df2['accepted']

                remaining=[0]
                try:
                    remaining=df2['remaining'][0]
                except:
                    remaining=[0]
                sent=[0]
                try:
                    sent=df2['invited_user'][0]
                except:
                    sent=[0]


                accepted=[0]
                try:
                    accepted=df2['accepted'][0]
                except:
                    accepted=[0]

                INIVITES=[0]
                try:
                    INIVITES=df1['INIVITES']
                except:
                    INIVITES=[0]
                data={"Total_invites":str(INIVITES[0]),
                    "Invite_sent":str(sent),"invite_accepted":str(accepted),

                            'Remaining_invites':str(abs(remaining))
                        }   

                return json.dumps(data)

        
@app.route('/school_practice_mindful_minutes_new/<userid>')
def schoolpracticemindfulsessions_new(userid):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    
    if len(userid)<10:
        data={'Result':0}
        return json.dumps(data)
    
    else:
        collection=db.audio_track_master
        collection1=db.user_master
        from datetime import datetime
        dfuser=DataFrame(list(collection1.aggregate([{"$match":
             {'$and': [
        #             {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                        {"IS_DISABLED":{"$ne":"Y"}},
                          {"IS_BLOCKED":{"$ne":"Y"}},
                         {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                        { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                        { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        #                    {'IS_ADMIN':'Y'},
                     {"schoolId._id" : ObjectId(""+userid+"")},
                     {'EMAIL_ID':{'$ne':''}},
                         {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                                   {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                     {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
             ]}},
                {'$group':{'_id':'$schoolId._id','sid':{'$addToSet':'$schoolId._id'},'school_name':{'$first':'$schoolId.NAME'}}},
                {'$project':{'_id':1,'sid':'$sid'}}])))
        # print("dfuser",dfuser)
        if dfuser.empty==True:
            data={'Result':0}    

        else:  
            schoolid=str(dfuser['_id'][0])
        #     print(schoolid)
            df_practice = DataFrame(list(collection.aggregate([
            {"$match":{
                     '$and':[
                                 {'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #                              {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id")}},
                                  {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                                  {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                                  {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                              {"USER_ID.schoolId._id" : ObjectId(""+schoolid+"")},
                              {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                                  {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                                  {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                                  {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},
                              {'MODIFIED_DATE':{'$gte': LSY_Date(),"$lt": csy_first_date() }},
                     ]}},
                      {'$group':{'_id':{'$month':'$MODIFIED_DATE'}, 'Practice_Sessions':{'$sum':1},
                        'Mindful_Minutes':{'$sum':{'$round':[{'$divide':[{'$subtract':['$CURSOR_END','$cursorStart']},60]},0]}}}},
                      {'$project':{'_id':1, 'Practice_Sessions_LSY':'$Practice_Sessions','Mindful_Minutes_LSY':'$Mindful_Minutes'}}
            ])))
            df_practice.rename(columns = { '_id': 'Month'}, inplace = True)
            df_practice=df_practice.fillna(0)
            if df_practice.empty==True:
                empty={'Month':["Aug","Sep","Oct","Nov","Dec","Jan","Feb","Mar","Apr","May","Jun","Jul"],
                      'Practice_Sessions_LSY':[0,0,0,0,0,0,0,0,0,0,0,0],'Mindful_Minutes_LSY':[0,0,0,0,0,0,0,0,0,0,0,0]}
                df_practice=pd.DataFrame(empty)

                df_practice1 = DataFrame(list(collection.aggregate([
                {"$match":{
                         '$and':[
                                     {'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #                                  {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id")}},
                                      {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                                      {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                                      {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                                  {"USER_ID.schoolId._id" : ObjectId(""+schoolid+"")},
                                  {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                                      {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                                      {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                                      {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},
                                  {'MODIFIED_DATE':{'$gte': csy_first_date() }},
                         ]}},
                          {'$group':{'_id':{'$month':'$MODIFIED_DATE'}, 'Practice_Sessions':{'$sum':1},
                            'Mindful_Minutes':{'$sum':{'$round':[{'$divide':[{'$subtract':['$CURSOR_END','$cursorStart']},60]},0]}}}},
                          {'$project':{'_id':1, 'Practice_Sessions_CSY':'$Practice_Sessions','Mindful_Minutes_CSY':'$Mindful_Minutes'}}
                ])))
                df_practice1
                df_practice1.rename(columns = { '_id': 'Month'}, inplace = True)
                if df_practice1.empty==True:
                    empty={'Month':["Aug","Sep","Oct","Nov","Dec","Jan","Feb","Mar","Apr","May","Jun","Jul"],
                      'Practice_Sessions_CSY':[0,0,0,0,0,0,0,0,0,0,0,0],'Mindful_Minutes_CSY':[0,0,0,0,0,0,0,0,0,0,0,0]}
                    df_practice1=pd.DataFrame(empty)
                    dffinal=pd.merge(df_practice1,df_practice, on='Month', how='outer')
                    dffinal=dffinal.fillna(0)
                    month=dffinal['Month'].tolist()
                    pc_lsy=dffinal['Practice_Sessions_LSY'].tolist()
                    mm_lsy=dffinal['Mindful_Minutes_LSY'].tolist()
                    pc_csy=dffinal['Practice_Sessions_CSY'].tolist()
                    mm_csy=dffinal['Mindful_Minutes_CSY'].tolist()
                    data={'MONTH':month,'Practice_Sessions_LSY':pc_lsy,'Practice_Sessions_CSY':pc_csy,'Mindful_Minutes_LSY':mm_lsy,
                     'Mindful_Minutes_CSY':mm_csy}
                else:
                    df_practice1['Mindful_Minutes_CSY']=df_practice1['Mindful_Minutes_CSY'].astype(int)
                    d = dict(enumerate(calendar.month_abbr))
                    df_practice1['Month'] = df_practice1['Month'].map(d)
            #         print(df_practice1.dtypes)
                    df=pd.merge(df_practice1,df_practice, on='Month', how='outer')
                    df=df.fillna(0)
                    Month={'Month':["Aug","Sep","Oct","Nov","Dec","Jan","Feb","Mar","Apr","May","Jun","Jul"]}
                    data=pd.DataFrame(Month)
                    dffinal=pd.merge(data,df, on='Month', how='left')
                    dffinal=dffinal.fillna(0)
                    month=dffinal['Month'].tolist()
                    pc_lsy=dffinal['Practice_Sessions_LSY'].tolist()
                    mm_lsy=dffinal['Mindful_Minutes_LSY'].tolist()
                    pc_csy=dffinal['Practice_Sessions_CSY'].tolist()
                    mm_csy=dffinal['Mindful_Minutes_CSY'].tolist()
                    data={'MONTH':month,'Practice_Sessions_LSY':pc_lsy,'Practice_Sessions_CSY':pc_csy,'Mindful_Minutes_LSY':mm_lsy,
                     'Mindful_Minutes_CSY':mm_csy}
            else:
                df_practice1 = DataFrame(list(collection.aggregate([
                {"$match":{
                         '$and':[
                                     {'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #                                  {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id")}},
                                      {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                                      {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
                                      {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                                  {"USER_ID.schoolId._id" : ObjectId(""+schoolid+"")},
                                  {'USER_ID.ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                                      {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
                                      {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
                                      {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},
                                  {'MODIFIED_DATE':{'$gte':csy_first_date()}},
                         ]}},
                          {'$group':{'_id':{'$month':'$MODIFIED_DATE'}, 'Practice_Sessions':{'$sum':1},
                            'Mindful_Minutes':{'$sum':{'$round':[{'$divide':[{'$subtract':['$CURSOR_END','$cursorStart']},60]},0]}}}},
                          {'$project':{'_id':1, 'Practice_Sessions_CSY':'$Practice_Sessions','Mindful_Minutes_CSY':'$Mindful_Minutes'}}
                ])))

                if df_practice1.empty==True:
                    data={'Result':0}
                else:
                    df_practice1.rename(columns = { '_id': 'Month'}, inplace = True)
                    df=pd.merge(df_practice,df_practice1, on='Month',how='outer')
                    df=df.fillna(0)
                    d = dict(enumerate(calendar.month_abbr))    # to convert monthnumber of dataframe into monthname
                    df['Month'] = df['Month'].map(d)
                    Month={'Month':["Aug","Sep","Oct","Nov","Dec","Jan","Feb","Mar","Apr","May","Jun","Jul"]}
                    data=pd.DataFrame(Month)
                    dffinal=pd.merge(data,df, on='Month', how='left')
                    dffinal=dffinal.fillna(0)
                    month=dffinal['Month'].tolist()
                    pc_lsy=dffinal['Practice_Sessions_LSY'].tolist()
                    mm_lsy=dffinal['Mindful_Minutes_LSY'].tolist()
                    pc_csy=dffinal['Practice_Sessions_CSY'].tolist()
                    mm_csy=dffinal['Mindful_Minutes_CSY'].tolist()
                #     print(mm_csy)
                    data={'MONTH':month,'Practice_Sessions_LSY':pc_lsy,'Practice_Sessions_CSY':pc_csy,'Mindful_Minutes_LSY':mm_lsy,
                     'Mindful_Minutes_CSY':mm_csy}
    #     print(data)
        return json.dumps(data)

@app.route('/adminstatsprogram_practice_new/<name>')
def prog_prac_admin_new(name):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    if len(name)<10:
        data={'Result':0}
        return json.dumps(data)    
    else:
        
        collection = db.user_master
        user=[
             {"$match":{'$and':[  { "schoolId._id":ObjectId(name)}, 
                     {"USER_NAME": { "$not": { "$regex": "test",'$options':'i'}}},
                                 {"USER_NAME": { "$not": { "$regex": "1gen",'$options':'i'}}},
                                   {"USER_NAME":{ "$ne": ""}},
                           {"EMAIL_ID":{ "$not": { "$regex": "test",'$options':'i'}}},
                             {"EMAIL_ID":{ "$not": { "$regex": "1gen",'$options':'i'}}},
                             {"EMAIL_ID":{ "$ne": ""}},
                              # {"schoolId":{"$exists":1 }}, # remove for family
                    {'IS_BLOCKED':{"$ne":'Y'}},
                    {'IS_DISABLED':{"$ne":'Y'}},
                    {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
                    {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
        #        { "IS_ADMIN":"Y"},
        ]}},
                  { "$project": { "ADMIN_ID":"$_id","_id":0, "SCHOOL_ID":"$schoolId._id"
                                }}
            ]
        update=list(collection.aggregate(user))
        df0=pd.DataFrame(update)
        # print(df0,'DF0')
        if df0.empty==True:
            data={'Result':0}
        else:
            list_of_names=df0["SCHOOL_ID"].to_list()
            collection = db.user_master
            user=[
                 {"$match":{'$and':[   { "schoolId._id":{"$in":list_of_names}}, 
                         {"USER_NAME": { "$not": { "$regex": "test",'$options':'i'}}},
                                       {"USER_NAME":{ "$ne": ""}},
                               {"EMAIL_ID":{ "$not": { "$regex": "test",'$options':'i'}}},
                                 {"EMAIL_ID":{ "$not": { "$regex": "1gen",'$options':'i'}}},
                                 {"EMAIL_ID":{ "$ne": ""}},
                        {'IS_BLOCKED':{"$ne":'Y'}},
                        {'IS_DISABLED':{"$ne":'Y'}},
                                         {'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                   {'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                        {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
                        {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
            ]}},
                      { "$project": { "USER_ID":"$_id","_id":0,
                                    }}
                ]
            update=list(collection.aggregate(user))
            df00=pd.DataFrame(update)
        #     print(df00,'DF00')
            list_of_names1=df00["USER_ID"].to_list()
            collection = db.audio_track_master
            prog_prac_table1 = DataFrame(list(collection.aggregate([
             {"$match":{
                 '$and':[ { "USER_ID._id":{"$in":list_of_names1}},
                {'USER_ID.ROLE_ID.ROLE_ID' :{'$ne':3}},
                 {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                {'PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME':{"$not":{"$regex":"wellness",'$options':'i'}}},
                    {'PROGRAM_AUDIO_ID.AUDIO_DAY':{"$not":{"$regex":"bonus",'$options':'i'}}},
                  {'PROGRAM_AUDIO_ID.AUDIO_DAY':{"$not":{"$regex":"sound",'$options':'i'}}},
                    {'PROGRAM_AUDIO_ID.AUDIO_DAY':{'$not':{'$regex':'Counselor','$options':'i'}}},    
                    {"PROGRAM_AUDIO_ID.AUDIO_DAY":{"$not":{"$regex":'Bonus','$options':'i'}}},
                          {"MODIFIED_DATE":{'$gte':csy_first_date()}},
                          {'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                   {'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
                               {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #                        {'PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_ID':{'$nin':[1,2,3,4,5,6,7,8]}},
    #         {'MODIFIED_DATE':{'$gte': startdate, '$lte':enddate}}
                        ]}},
            {'$group':{'_id':{'pn':'$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_ID','Month':{'$month':'$MODIFIED_DATE'}}, 'auc': {'$sum':1},
                       'pg':{'$first':'$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME'}}},
            {'$project':{'pg':'$pg','pn':'$_id.pn','Month':'$_id.Month', 'Active_usercount in 2020-2021':'$auc','_id':0}},
              { "$sort":{'pg' : 1 }}])))
            df1 = pd.DataFrame(prog_prac_table1)

        #     print(df1,'DF1')
            index=[0,1,2,3,4,5,6,7,8,9,10,11]
            if df1.empty:
                data={"month": ["Aug", "Sep", "Oct", "Nov", "Dec", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul"], 
                      "elem": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prek": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                      "mid": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "high": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}
            else:
                df1["pn"]=df1["pn"].replace({1:11, 2:12, 3:13, 4:9})
                data = [['Aug', 8], ['Sep', 9], ['Oct', 10],['Nov', 11], ['Dec', 12], ['Jan', 1],['Feb', 2], ['Mar', 3], ['Apr', 4],['May', 5], ['Jun', 6], ['Jul', 7]] 
                df9 = pd.DataFrame(data, columns = ['Monthname', 'Month']) 

                DF=pd.merge(df9,df1, on='Month',how='left').fillna(0)
                DF=DF.sort_values(by=['pn'])
                month=DF['Month'].tolist()
                prog_prac_table=DF
                month=['Aug','Sep','Oct','Nov','Dec','Jan','Feb','Mar','Apr','May','Jun','Jul']

                elem=[]
                mid=[]
                pre=[]
                high=[]


                for i in set(prog_prac_table.pn.tolist()):
                    for j in month:
        #                     print(j)
                        if i==11:
                            df=prog_prac_table[prog_prac_table['pn']==i]

                            try:
                                df=df[df['Monthname']==j]['Active_usercount in 2020-2021']
        #                             print(df)
                                pre.append(int(df))
        #                             print(pre)
                            except:
                                pre.append(0)
                        elif i==12:
                            df=prog_prac_table[prog_prac_table['pn']==i]
                            try:
                                df=df[df['Monthname']==j]['Active_usercount in 2020-2021']
                                elem.append(int(df))
                            except:
                                elem.append(0)
                        elif i==13:
                            df=prog_prac_table[prog_prac_table['pn']==i]
                            try:
                                df=df[df['Monthname']==j]['Active_usercount in 2020-2021']
                                mid.append(int(df))
                            except:
                                mid.append(0)
                        elif i==9:
                            df=prog_prac_table[prog_prac_table['pn']==i]
        #                         print(df)
                            try:
                                df=df[df['Monthname']==j]['Active_usercount in 2020-2021']
        #                             print(df)
                                high.append(int(df))
                            except:
                                high.append(0)            
                        else:
                            break

                    ll=[0,0,0,0,0,0,0,0,0,0,0,0]
                if len(elem)==0:    elem = ll
                if len(pre)==0:    pre =  ll
                if len(mid)==0:    mid =  ll
                if len(high)==0:    high = ll
        #             if len(alls)==0:    alls = ll
                data={'month':month,'elem':elem,'prek':pre,'mid':mid,'high':high}
        return json.dumps(data)

@app.route("/feedback_rating_new/<admin_id>") 
def feedback_rating_new(admin_id):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass

    # username = urllib.parse.quote_plus('adminIE')                                     #SwitchedToBeta
    # password = urllib.parse.quote_plus('CtZh5Nqp8Qn9LHUDx2GH')
    # client = MongoClient("mongodb://%s:%s@54.184.165.106:27017/" % (username, password))
    # db=client.compass_beta

#     start_date = dateutil.parser.parse(start_date)
#     end_date = dateutil.parser.parse(end_date)
    if len(admin_id)<10:
        data={'Result':0}
        return json.dumps(data)    
    else:

        collection = db.user_master
        user=[

        {"$match":{'$and':[ 
             {"schoolId._id":ObjectId(admin_id)},
             {"USER_NAME": { "$not": { "$regex": "test",'$options':'i'}}},
                           {"USER_NAME":{ "$ne": ""}},
                   {"EMAIL_ID":{ "$not": { "$regex": "test",'$options':'i'}}},
                     {"EMAIL_ID":{ "$not": { "$regex": "1gen",'$options':'i'}}},
                     {"EMAIL_ID":{ "$ne": ""}},
            {'IS_BLOCKED':{"$ne":'Y'}},
            {'IS_DISABLED':{"$ne":'Y'}},
            {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
            {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
    #     { "IS_ADMIN":"Y"},
        ]}},

        { "$project": { "ADMIN_ID":"$_id","_id":0, "SCHOOL_ID":"$schoolId._id"
                            }}
        ]
        update=list(collection.aggregate(user))
        df0=pd.DataFrame(update)
        if df0.empty==True:
            data={'Result':0}
        else:

            admin_ids=df0["ADMIN_ID"].to_list()
            school_ids=df0["SCHOOL_ID"].to_list()


            collection1 = db.user_master
            user=[

            {"$match":{'$and':[ 
                 { "schoolId._id":{"$in": school_ids}},
                 {"USER_NAME": { "$not": { "$regex": "test",'$options':'i'}}},
                               {"USER_NAME":{ "$ne": ""}},
                       {"EMAIL_ID":{ "$not": { "$regex": "test",'$options':'i'}}},
                         {"EMAIL_ID":{ "$not": { "$regex": "1gen",'$options':'i'}}},
                         {"EMAIL_ID":{ "$ne": ""}},
                {'IS_BLOCKED':{"$ne":'Y'}},
                {'IS_DISABLED':{"$ne":'Y'}},
                {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
                {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
            ]}},

            { "$project": { "_id":0, "USER ID":"$_id"
                                }}
            ]
            update=list(collection1.aggregate(user))
            df1=pd.DataFrame(update)

            user_ids=df1["USER ID"].to_list()


            collection2=db.audio_track_master
            user=[      
            {"$match":{"$and":
                [
                {"USER_ID._id":{"$in": user_ids}},

                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                 {'MODIFIED_DATE':{'$gte':csy_first_date()}},

                ]}
            },
            {
                "$group":{"_id":"$USER_ID._id","USER_PRACTICE_COUNT":{"$sum":1},}
            },
            {
            "$project":
            {
                "USER_PRACTICE_COUNT":1,"USER ID" :"$_id","_id":0,
            }}]
            update= list(collection2.aggregate(user))
            df2=pd.DataFrame(update)

            if df2.empty:
                df2["USER_PRACTICE_COUNT"]= 0
                df2["USER ID"]= 0

            df21=pd.merge(df1,df2,on="USER ID",how="left").fillna(0)


            collection3 = db.audio_feedback
            user=[
            {"$match":{'$and':[ 

            #         {"USER._id":{"$in":db.user_master.distinct("_id",{"USER_ID.schoolId._id":school_ids})}},

                    {"USER._id":{"$in": user_ids}},
                    {"USER.USER_NAME": { "$not": { "$regex": "test",'$options':'i'}}},
                    {"USER.USER_NAME":{ "$ne": ""}},
                    {"USER.EMAIL_ID":{ "$not": { "$regex": "test",'$options':'i'}}},
                    {"USER.EMAIL_ID":{ "$not": { "$regex": "1gen",'$options':'i'}}},
                    {"USER.EMAIL_ID":{ "$ne": ""}},  
                    {'USER.IS_BLOCKED':{"$ne":'Y'}}, 
                    {'USER.IS_DISABLED':{"$ne":'Y'}}, 
                    {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                    {'MODIFIED_DATE':{"$gte": csy_first_date()}},   

              ]}},
            { "$project": { "USER ID": "$USER._id", "_id":0,"RATING":1,
                "COMMENT":1 }}
            ]
            update=list(collection3.aggregate(user))
            df3=pd.DataFrame(update)

            if "COMMENT" not in df3.columns:
                df3["COMMENT"] = 0


            if df3.empty:
                df3["USER ID"]=0
                df3["RATING"]= 0
                df3["COMMENT"]= 0

            df31=pd.merge(df21,df3,on="USER ID",how="left").fillna(0)
            df31['COMMENT'].replace("",0, inplace=True)

            if df2.empty or df3.empty:
                AVERAGE_FEEDBACK_RATING = 0
                PLUS_3_RATING = 0
                STAR_RATING = 0
                FEEDBACK = 0
            else:
                AVERAGE_FEEDBACK_RATING = round(np.mean(df31["RATING"]),2)
                PLUS_3_RATING = len(df31.loc[df31['RATING'] > 3])
                STAR_RATING = round((len(df31.loc[df31['RATING'] != 0]) / len(df31.loc[df31['USER_PRACTICE_COUNT'] != 0])) * 100,2)
                FEEDBACK = round((len(df31.loc[df31['COMMENT'] != 0]) / len(df31.loc[df31['USER_PRACTICE_COUNT'] != 0])) * 100,2)
            data = dict({"AVERAGE_FEEDBACK_RATING": AVERAGE_FEEDBACK_RATING , "PLUS_3_RATING" : PLUS_3_RATING ,
                     "STAR_RATING" : STAR_RATING , "FEEDBACK" : FEEDBACK})
        return json.dumps(data)    

@app.route('/wordcloudfeedback_new/<adminid>')
def wordcloud_new(adminid):
    import nltk
    from nltk.corpus import stopwords
    from textblob import TextBlob
    from nltk import FreqDist
    import re
    clean_list=[]
    news_headlines_senti = []
    news_headlines_dict = {}
    pnews_headlines=0
    nnews_headlines=0
    nenews_headlines = 0

    #     startdate= dateutil.parser.parse(str(startdate))
    #     enddate= dateutil.parser.parse(str(enddate))+timedelta(days=1)
    
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass

    # username = urllib.parse.quote_plus('adminIE')                                     #SwitchedToBeta
    # password = urllib.parse.quote_plus('CtZh5Nqp8Qn9LHUDx2GH')
    # client = MongoClient("mongodb://%s:%s@54.184.165.106:27017/" % (username, password))
    # db=client.compass_beta
    if len(adminid)<10:
        data={'Result':0}
        return json.dumps(data)    
    else:
        
        collection1=db.user_master
        query=[{'$match':
                {'$and':[ {'schoolId._id':ObjectId(adminid)},
                    {"USER_NAME": { "$not": { "$regex": "test",'$options':'i'}}},
                                 {"USER_NAME": { "$not": { "$regex": "1gen",'$options':'i'}}},
                                   {"USER_NAME":{ "$ne": ""}},
                           {"EMAIL_ID":{ "$not": { "$regex": "test",'$options':'i'}}},
                             {"EMAIL_ID":{ "$not": { "$regex": "1gen",'$options':'i'}}},
                             {"EMAIL_ID":{ "$ne": ""}},
                              # {"schoolId":{"$exists":1 }}, # remove for family
                    {'IS_BLOCKED':{"$ne":'Y'}},
                    {'IS_DISABLED':{"$ne":'Y'}},
                    {'schoolId.NAME':{'$not':{'$regex':'test', '$options':'i'}}},
                    {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},

                        ]}},
            {'$project':{
                '_id':0,
                'USER_ID':'$_id',
                'schoolId':'$schoolId._id'
                }}]
        schoolinfo=list(collection1.aggregate(query))
        schoolinfo=pd.DataFrame(schoolinfo)
        if schoolinfo.empty==True:
    #         data={'Result':0}
            return json.dumps({'Result':0})
        else:  
            schoolId=str(schoolinfo['schoolId'][0])

        #     schoolId=schoolinfo[0].get('schoolId')
        collection=db.audio_feedback
        #     mydatetime= dateutil.parser.parse(datestr)
        #     yester= pd.to_datetime(mydatetime) +timedelta(hours=4)
        #     tod=mydatetime+ timedelta(hours=4)
        #     start= tod- timedelta(days=8)+timedelta(days=1)
        #     start_15day= start-timedelta(days=8)+timedelta(days=1)
        user=[
        {"$match":{'$and':[ 
            {"USER.USER_NAME": { "$not": { "$regex": "test",'$options':'i'}}},
                    {"USER.USER_NAME":{ "$ne": ""}},
                    {"USER.EMAIL_ID":{ "$not": { "$regex": "test",'$options':'i'}}},
                    {"USER.EMAIL_ID":{ "$not": { "$regex": "1gen",'$options':'i'}}},
                    {"USER.EMAIL_ID":{ "$ne": ""}},  
                    {'USER.IS_BLOCKED':{"$ne":'Y'}}, 
                    {'USER.IS_DISABLED':{"$ne":'Y'}},
                        {"USER.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        #                 {'MODIFIED_DATE':{'$gte': start, '$lt':yester}},
                    {'USER._id':{'$in':db.user_master.distinct('_id',{'schoolId._id':ObjectId(""+schoolId+"")})}},
                     {'MODIFIED_DATE':{'$gte':csy_first_date()}},

                           {'COMMENT':{'$nin':['',' ', None,'.']}},
                      {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                            ]}},
        { "$project": { "USER_ID": "$USER._id", "USER_NAME": "$USER.USER_NAME","_id":0, "EMAIL": "$USER.EMAIL_ID", "RATING":1,
        "LAST_COMMENT_DATE": "$MODIFIED_DATE", "AUDIO_NAME": "$AUDIO_ID.AUDIO_NAME", "NARRATOR_NAME": "$AUDIO_ID.NARRATEDBY",
        "COMMENT":1, "PROGRAM_NAME": "$AUDIO_ID.PROGRAM_ID.PROGRAM_NAME"}}
        ]
        update=list(collection.aggregate(user))
        df123=pd.DataFrame(update).fillna("no info")
        if df123.empty:
    #         data={'Result':0}
            return json.dumps({'Result':0})
        else:
            list_of_names=df123["USER_ID"].to_list()
            xx=df123[df123["COMMENT"]!="no info"]
            xxc=xx[xx["COMMENT"]!=""]
            comment_list=xxc["COMMENT"].to_list()
            newtexttoken=[]

            import nltk
        #     nltk.download('punkt')
        #     nltk.download()
            nltk.download('stopwords')

            for i in comment_list:
                text_tokens = nltk.tokenize.word_tokenize(i)
                newtexttoken.append(text_tokens)
            newlist=[]
            for i in newtexttoken:
                for z in i:
                    newlist.append(z.lower())
            st_word=stopwords.words('english')
            tokens_without_sw= [word for word in newlist if not word in st_word]
            token5=[]
            for sentence in tokens_without_sw:
                text3 = sentence.split('ing')    
                for i in text3:
                    token5.append(i)
            words = [w.replace('liked', 'like') for w in token5]
            words2 = [w.replace('relaxed', 'relax') for w in words]
            words3 = [w.replace('relaxing', 'relax') for w in words2]
            words4 = [w.replace('excitinging', 'excited') for w in words3]
            zxc=""
            name=""
            count=""
            try:
                xcvv=[x for x in words4 if len(x)>3]
                fdist=FreqDist(xcvv)
                df_fdist = pd.DataFrame.from_dict(fdist, orient='index')
            #         print(df_fdist)
                df_fdist.columns = ['Frequency']
                df_fdist.index.name = 'Term'
                xc=df_fdist.sort_values(by='Frequency', ascending=False, na_position='first')
                #     tt=xc.drop(["i","it","we","made","us","the","feeling","some","students"])
                cc=xc[0:10]
                name=cc.index.to_list()
                count=cc["Frequency"].to_list()
                zxc=' '.join(word for word in xcvv)
            except:
                pass
            for item in comment_list:
                # trim
                item = item.strip()
                # Removing RT
                item = item.replace('RT', '')
                # Removing new line character
                item = item.replace('\\n', '')
                # Replace #word with word
                news_headlines = re.sub(r'#([^\s]+)', r'\1', item)
                # Convert @username to username
                news_headlines = re.sub(r'@([^\s]+)', r'\1', item)
                item = " ".join(re.findall("[a-zA-Z]+", item))
                tmp_var = re.sub(r'^\S*\s', '', item)
                clean_list.append(tmp_var)
            for item in clean_list:
                    #print(item)
                    # create TextBlob object of passed news_headlines text
                    analysis = TextBlob(item)
                    # set sentiment
                    if analysis.sentiment.polarity > 0:
                        # saving sentiment of news_headlines
                        news_headlines_score = 'positive'
                        pnews_headlines = pnews_headlines + 1
                        news_headlines_dict[item] = news_headlines_score
                    elif analysis.sentiment.polarity == 0:
                        # saving sentiment of news_headlines
                        news_headlines_score = 'neutral'
                        nenews_headlines = nenews_headlines + 1
                        news_headlines_dict[item] = news_headlines_score
                    else:
                        # saving sentiment of news_headlines
                        news_headlines_score = 'negative'
                        nnews_headlines = nnews_headlines + 1
                        news_headlines_dict[item] = news_headlines_score
            # print(clean_list)
            newssentiment=[]
            # for k, v in news_headlines_dict.items():
            #     print(k,':',v)
            for k, v in news_headlines_dict.items():
                if v == "positive":
                    newssentiment.append({"sentiment":int(1),"text":k})
                elif v == "negative":
                    newssentiment.append({"sentiment":int(-1),"text":k})
                else:
                    newssentiment.append({"sentiment":int(0),"text":k})
            newssentiment_dataframe=pd.DataFrame.from_dict(newssentiment)
        #         neg = 100 * (nnews_headlines) / ((nnews_headlines) + (pnews_headlines))
        #         pos = 100 * (pnews_headlines) / ((nnews_headlines) + (pnews_headlines))

            try:
                neg = 100 * (nnews_headlines) / ((nnews_headlines) + (pnews_headlines))
            except ZeroDivisionError:
                neg = 0

            try:
                pos = 100 * (pnews_headlines) / ((nnews_headlines) + (pnews_headlines))
            except ZeroDivisionError:
                pos = 0

            df123["SCORE"]=""
            for i in range(len(df123)):
                try:
                    analysis = TextBlob(df123["COMMENT"][i])
                    if analysis.sentiment.polarity > 0:
                        df123.at[i,"SCORE"]= 1
            #             
                    elif analysis.sentiment.polarity == 0:
                        df123.at[i,"SCORE"]= 0
                    else:
                        df123.at[i,"SCORE"]= -1
                except:
                    df123.at[i,"SCORE"]= 0
        #         df123['just_date'] = df123['LAST_COMMENT_DATE'].dt.date
            df123['just_date']=pd.to_datetime(df123['LAST_COMMENT_DATE'], errors='coerce')

            xccx=df123.sort_values(by='just_date')
            xccx=df123.dropna()
            negdf=xccx[xccx["SCORE"]==-1]
            posdf=xccx[xccx["SCORE"]==1]
            df123['LAST_COMMENT_DATE']=pd.to_datetime(df123["LAST_COMMENT_DATE"]).dt.strftime('%Y-%m-%d')
            positivep=df123[df123["SCORE"]==1]
            df1234=positivep.groupby(["LAST_COMMENT_DATE"])["SCORE"].count().reset_index()
            df14i=df1234[["LAST_COMMENT_DATE","SCORE"]]
            df14i['LAST_COMMENT_DATE'] = pd.to_datetime(df14i['LAST_COMMENT_DATE'])
            df15i=df14i.sort_values(by='LAST_COMMENT_DATE')
            df15i['LAST_COMMENT_DATE']=df15i['LAST_COMMENT_DATE'].astype(np.int64)/int(1e6)
            shp1=df15i[["LAST_COMMENT_DATE","SCORE"]].values.tolist()
            negativen=df123[df123["SCORE"]==-1]
            df12345=negativen.groupby(["LAST_COMMENT_DATE"])["SCORE"].count().reset_index()
            df14ii=df12345[["LAST_COMMENT_DATE","SCORE"]]
            df14ii['LAST_COMMENT_DATE'] = pd.to_datetime(df14ii['LAST_COMMENT_DATE'])
            df15ii=df14ii.sort_values(by='LAST_COMMENT_DATE')
            df15ii['LAST_COMMENT_DATE']=df15ii['LAST_COMMENT_DATE'].astype(np.int64)/int(1e6)
            shp2=df15ii[["LAST_COMMENT_DATE","SCORE"]].values.tolist()
            df123['LAST_COMMENT_DATE']=pd.to_datetime(df123["LAST_COMMENT_DATE"]).dt.strftime('%Y-%m-%d')
            word_chart={"word_cloud":zxc}
        #         word_chart={'positive':shp1,'negative':shp2,"word_cloud":zxc,"label":name,"count":count,"donut":{"pos":round(pos, 2),"neg":round(neg, 2)}}
            return json.dumps(word_chart)


        
@app.route('/districtlive_user/<districtid>')
def live_user_district(districtid):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username,password))
    db=client.compass
    district=disdic[districtid]

    mydatetime=datetime.datetime.utcnow()

    today_min=datetime.datetime.combine(mydatetime,datetime.time.min)
    # +timedelta(hours=4)
    today_max=datetime.datetime.combine(mydatetime, datetime.time.max)
    # +timedelta(hours=4)
    df=DataFrame(list(db.user_master.aggregate([{"$match":
             {'$and': [
                

#                     {"IS_DISABLED":{"$ne":"Y"}},
#                       {"IS_BLOCKED":{"$ne":"Y"}},
#                      {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
#                     { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
#                     { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
# #                             {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                    {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#         # //               {'IS_ADMIN':'Y'},
#     #                      {'DISTRICT_ID._id':{'$ne':None}},
#                     {'schoolId._id':{'$ne':None}},
#                      {'EMAIL_ID':{'$ne':''}},
# #                 
#                      {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
#                                {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
#                                  {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
             ]}},

                {'$group':{'_id':'$_id','ID':{'$addToSet':'$EMAIL_ID'}}},
                      {'$project':{'_id':1,'name':'$ID'}},
#                {'$sort':{'name':1}}

                      ])))
    ids=df['_id'].tolist()

    collection= db.audio_track_master
    df_playback= DataFrame(list(collection.aggregate([
        {"$match":{
    '$and':[
    {'USER_ID._id':{"$in":ids}},
    {'MODIFIED_DATE': {'$gte':datetime.datetime.utcnow()-datetime.timedelta(minutes=10)}}
    ]}},
    {'$group':{'_id':'$USER_ID._id', 'practice':{'$sum':1}}}
    ])))

    if df_playback.empty:
        data= {'active_users':str(0)}
#         temp={"data":data.values.tolist()}
        temp={"data":[data]}
    else: 
        list_of_users=df_playback['_id'].tolist()
        active_users=str(len(df_playback))

        df_IMAGE=DataFrame(list(db.user_master.aggregate([{"$match":{
        '$and':[
           
        {'_id':{'$in':list_of_users}}
               ]}},
        {'$group':{'_id':'$_id', 'url':{'$first':'$IMAGE_URL'}}}]))).fillna('')

        IMAGE=df_IMAGE['url'].tolist()
        

        data1= {'active_users':str(active_users),'image':IMAGE}
        temp ={'data':[data1]} 
    return json.dumps(temp)



# D360 APIS
@app.route('/districtheatmap_oct13_/<districtid>/<startdate>/<enddate>')
def heat_district_(districtid,startdate,enddate):
    
    import collections
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    collection2=db.user_master
    district=disdic[districtid]
    myDatetime1 = dateutil.parser.parse(startdate)
    myDatetime2 = dateutil.parser.parse(enddate)

   

    df=DataFrame(list(collection2.aggregate([{"$match":
             {'$and': [
                

                    {"IS_DISABLED":{"$ne":"Y"}},
                      {"IS_BLOCKED":{"$ne":"Y"}},
                     {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                    { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                             {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                    {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
        # //               {'IS_ADMIN':'Y'},
    #                      {'DISTRICT_ID._id':{'$ne':None}},
                    {'schoolId._id':{'$ne':None}},
                     {'EMAIL_ID':{'$ne':''}},
#                  {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},

#                   {'DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
                     {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                               {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

                {'$group':{'_id':'$schoolId._id','ID':{'$first':'$schoolId.NAME'}}},
                      {'$project':{'_id':1,'name':'$ID'}},
                  {'$sort':{'name':1}}
                      ])))

    ids=list(df['_id'])
    
    
#     df3=DataFrame(list(collection.aggregate([
# {"$match":
#     {'$and': [

         
#         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
# {'USER_ID.schoolId._id':{'$in':ids}},


# #  {'MODIFIED_DATE':{'$gte':csy_first_date()}},
#     {'MODIFIED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}}
#     ]}},


#         {'$group':{'_id':'$USER_ID.schoolId._id','uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
#               {'$project':{'_id':1,'active_user_count':{'$size':'$uc'},'name':'$NAME','practice_count':'$pc'}},
#     { '$sort' : { 'active_user_count' : -1} },
# #     {'$limit':30}
#     ])))
#     top=list(df3['_id'])
#     print(df3)
#     df3.to_csv('file1.csv')
    df22=DataFrame(list(collection.aggregate([
    {"$match":
        {'$and': [
            
#              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
    {'USER_ID.schoolId._id':{'$in':ids}},
    # {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
  
#      {'MODIFIED_DATE':{'$gte':csy_first_date()}},
        {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}}]}},


            {'$group':{'_id':{'school':'$USER_ID.schoolId._id','month':{'$month':'$MODIFIED_DATE'}},'uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
                  {'$project':{'_id':0,'_id':'$_id.school','month':'$_id.month','active_user_count':{'$size':'$uc'},'school':'$NAME','practice_count':'$pc'}},
        { '$sort' : { 'name' : 1,'month'  :1} },


    # //               {'$count':'count'}
                  ])))
    # df2
    if df22.empty is True:
        df["month"]=0
        df["active_user_count"]=0
        df["practice_count"]=0
        df1=df
    else:
        df2=pd.merge(df,df22, on='_id',how='left')
        df1=df2
    df1=df1.sort_values(by=['name'], ascending=True)
    # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    dislist=list(set(df1["name"]))
    # print(len(dislist))
    df2=df1[["name","month","active_user_count","practice_count"]]
    # print(df2)
    overall=pd.DataFrame(columns=["name","month","active_user_count","practice_count"])
    # overall
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["name"]==k]
        df45.reset_index()
    #     print(df45)
        for i in range(1,13):
            if i in list(df45["month"]):
                pass
            else:
                a=max(list(df45.index))
                df45.loc[a+i] = [k] +[i]+[0]+[0]
  
        sorted_df =df45.sort_values(by=['month'], ascending=True)
    #     sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
        DF = pd.concat(result)
    data = [['Aug', 8], ['Sep', 9], ['Oct', 10],['Nov', 11], ['Dec', 12], ['Jan', 1],['Feb', 2], ['Mar', 3], ['Apr', 4],['May', 5], ['Jun', 6], ['Jul', 7]] 

    df9 = pd.DataFrame(data, columns = ['Monthname', 'month']) 

    finaldf=pd.merge(df9,DF, on='month',how='left')
    #     finaldf=finaldf.sort_values(by=['name'])


    data={}
    for i in dislist:


        schoolname= finaldf[(finaldf.name ==i)].reset_index(drop = True)
        active_user_count = schoolname['active_user_count'].tolist()
        practice_count = schoolname['practice_count'].tolist()


        data[i] =active_user_count
    data=collections.OrderedDict(sorted(data.items()))
    data={'meanTemp':data}

    
    return json.dumps(data)


@app.route('/90daysuserpractising_oct13_/<districtid>/<startdate>/<enddate>')
def user_practice_90days_(districtid,startdate,enddate):
    
    from datetime import datetime
    from datetime import timedelta
    
    today1= datetime.utcnow()
    tod1= today1+ timedelta(hours=4)
    start1= tod1-timedelta(days=90)
    
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    district=disdic[districtid]
    
    myDatetime1 = dateutil.parser.parse(startdate)
    myDatetime2 = dateutil.parser.parse(enddate)
    df1 = DataFrame(list(collection.aggregate([
    {"$match":
     {'$and': [
#     {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
#             {"USER_ID._id":{"$in":db.schoology_master.distinct( "USER_ID._id")}},
#             {"USER_ID._id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
              {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            {'USER_ID.schoolId._id':{'$ne':None}},
# //               {'IS_ADMIN':'Y'},
# //             {'USER_ID.IS_PORTAL':'Y'},
             {'USER_ID.EMAIL_ID':{'$ne':''}},
                  {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#              {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
#              {'MODIFIED_DATE':{'$gte':start1}},
         {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}},
# //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
         {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
        {'$group':{'_id':{"$dateToString": { "format": "%Y-%m-%d", "date": "$MODIFIED_DATE"}},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
              {'$project':{'_id':1,'user_count':'$pc'}},
    { '$sort' : { '_id' : 1} }
    

# //               {'$count':'count'}
              ])))
    if df1.empty:
        df1=pd.DataFrame({'_id':[],'user_count':[]})
    
    df2 = DataFrame(list(collection.aggregate([
    {"$match":
     {'$and': [
    {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID._id":{'$not':{"$in":db.schoology_master.distinct( "USER_ID._id")}}},
            {"USER_ID._id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
              {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            {'USER_ID.schoolId._id':{'$ne':None}},
# //               {'IS_ADMIN':'Y'},
# //             {'USER_ID.IS_PORTAL':'Y'},
             {'USER_ID.EMAIL_ID':{'$ne':''}},
                  {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#              {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
#              {'MODIFIED_DATE':{'$gte':start1}},
         {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}},
# //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
         {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
        {'$group':{'_id':{"$dateToString": { "format": "%Y-%m-%d", "date": "$MODIFIED_DATE"}},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
              {'$project':{'_id':1,'teachers':'$pc'}},
    { '$sort' : { '_id' : 1} }
    

# //               {'$count':'count'}
              ])))
    if df2.empty:
        df2=pd.DataFrame({'_id':[],'teachers':[]})
    
    df3 = DataFrame(list(collection.aggregate([
    {"$match":
     {'$and': [
    {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
#             {"USER_ID._id":{"$in":db.schoology_master.distinct( "USER_ID._id")}},
#             {"USER_ID._id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
              {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            {'USER_ID.schoolId._id':{'$ne':None}},
# //               {'IS_ADMIN':'Y'},
# //             {'USER_ID.IS_PORTAL':'Y'},
             {'USER_ID.EMAIL_ID':{'$ne':''}},
                  {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#              {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
#              {'MODIFIED_DATE':{'$gte':start1}},
         {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}},
# //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
         {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
        {'$group':{'_id':{"$dateToString": { "format": "%Y-%m-%d", "date": "$MODIFIED_DATE"}},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
              {'$project':{'_id':1,'parents':'$pc'}},
    { '$sort' : { '_id' : 1} }
    

# //               {'$count':'count'}
              ])))
    if df3.empty:
        df3=pd.DataFrame({'_id':[],'parents':[]})
    
    df4 = DataFrame(list(collection.aggregate([
    {"$match":
     {'$and': [
    {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID._id":{'$not':{"$in":db.schoology_master.distinct( "USER_ID._id")}}},
            {"USER_ID._id":{"$in":db.clever_master.distinct( "USER_ID._id")}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
              {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            {'USER_ID.schoolId._id':{'$ne':None}},
# //               {'IS_ADMIN':'Y'},
# //             {'USER_ID.IS_PORTAL':'Y'},
             {'USER_ID.EMAIL_ID':{'$ne':''}},
                  {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#              {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
#              {'MODIFIED_DATE':{'$gte':start1}},
         {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}},
# //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
         {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
        {'$group':{'_id':{"$dateToString": { "format": "%Y-%m-%d", "date": "$MODIFIED_DATE"}},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
              {'$project':{'_id':1,'clever':'$pc'}},
    { '$sort' : { '_id' : 1} }
    

# //               {'$count':'count'}
              ])))
    if df4.empty:
        df4=pd.DataFrame({'_id':[],'clever':[]})
    
    
    df5 = DataFrame(list(collection.aggregate([
    {"$match":
     {'$and': [
    {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID._id":{"$in":db.schoology_master.distinct( "USER_ID._id")}},
            {"USER_ID._id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
              {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            {'USER_ID.schoolId._id':{'$ne':None}},
# //               {'IS_ADMIN':'Y'},
# //             {'USER_ID.IS_PORTAL':'Y'},
             {'USER_ID.EMAIL_ID':{'$ne':''}},
                  {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#              {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
#              {'MODIFIED_DATE':{'$gte':start1}},
         {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}},
# //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
         {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
        {'$group':{'_id':{"$dateToString": { "format": "%Y-%m-%d", "date": "$MODIFIED_DATE"}},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
              {'$project':{'_id':1,'scoology':'$pc'}},
    { '$sort' : { '_id' : 1} }
    

# //               {'$count':'count'}
              ])))
    if df5.empty:
        df5=pd.DataFrame({'_id':[],'scoology':[]})
        
        
        
    df6= pd.merge(df1,df2,on='_id',how='left')
    df7= pd.merge(df6,df3,on='_id',how='left')
    df8= pd.merge(df7,df4,on='_id',how='left')
    DF= pd.merge(df8,df5,on='_id',how='left')
    
    # df['SCH_CREATED_DATE']=pd.to_datetime(df['SCH_CREATED_DATE'])
    DF.rename(columns = { '_id': 'date'}, inplace = True)
    
    
    if DF.empty == True:
        DF = pd.DataFrame(columns=['date', 'teachers' ,'parents','clever','scoology','user_count'])
#         DF = DF.append({'date', 'teachers' ,'parents','clever','scoology','user_count'}, ignore_index=True)
    
    DF=DF.fillna(0)
    print(DF)
    date=DF['date'].tolist()

    T=DF['teachers'].tolist()
    P=DF['parents'].tolist()
    C=DF['clever'].tolist()
    S=DF['scoology'].tolist()
    uc=DF['user_count'].tolist()


    data={'Date':date,'Teachers':T,'Parents':P,'Clever':C,'Scoology':S}
    return json.dumps(data)






@app.route('/monthwisepracticedistrict_oct13_/<districtid>/<startdate>/<enddate>')
def monthwisepc_(districtid,startdate,enddate):
    
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    district=disdic[districtid]
    myDatetime1 = dateutil.parser.parse(startdate)
    myDatetime2 = dateutil.parser.parse(enddate)
    pre_start= myDatetime1 - relativedelta(years=1)
    print(pre_start)
    pre_end=myDatetime2 - relativedelta(years=1)
    print(pre_end)
    df0= DataFrame(list(collection.aggregate([
    {"$match":
    {'$and': [
#       {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
#             {"USER_ID._id":{'$not':{"$in":db.schoology_master.distinct( "USER_ID._id")}}},
#             {"USER_ID._id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.schoolId._id':{'$ne':None}},
    # //               {'IS_ADMIN':'Y'},
        
    # //             {'USER_ID.IS_PORTAL':'Y'},
         {'USER_ID.EMAIL_ID':{'$ne':''}},
                 {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#                {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
#          {'MODIFIED_DATE':{'$gte':csy_first_date()}},
        {'MODIFIED_DATE':{"$gte": pre_start ,
                             "$lte":pre_end}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
    {'$group':{'_id':{'$month':'$MODIFIED_DATE'},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
          {'$project':{'_id':1,'practice_count_lsy':'$pc'}},
    { '$sort' : { '_id' : 1} }
              ])))
    if df0.empty:
        df0=pd.DataFrame({'_id':[1,2,3,4,5,6,7,8,9,10,11,12],'practice_count_lsy':[0,0,0,0,0,0,0,0,0,0,0,0]})
    
    
    df1= DataFrame(list(collection.aggregate([
    {"$match":
    {'$and': [
#       {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
#             {"USER_ID._id":{'$not':{"$in":db.schoology_master.distinct( "USER_ID._id")}}},
#             {"USER_ID._id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.schoolId._id':{'$ne':None}},
    # //               {'IS_ADMIN':'Y'},
        
    # //             {'USER_ID.IS_PORTAL':'Y'},
         {'USER_ID.EMAIL_ID':{'$ne':''}},
                 {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#                {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
#          {'MODIFIED_DATE':{'$gte':csy_first_date()}},
        {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
    {'$group':{'_id':{'$month':'$MODIFIED_DATE'},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
          {'$project':{'_id':1,'practice_count':'$pc'}},
    { '$sort' : { '_id' : 1} }
              ])))
    if df1.empty:
        df1=pd.DataFrame({'_id':[1,2,3,4,5,6,7,8,9,10,11,12],'practice_count':[0,0,0,0,0,0,0,0,0,0,0,0]})
    
    df2 = DataFrame(list(collection.aggregate([
    {"$match":
    {'$and': [
      {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID._id":{'$not':{"$in":db.schoology_master.distinct( "USER_ID._id")}}},
            {"USER_ID._id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.schoolId._id':{'$ne':None}},
        
    # //               {'IS_ADMIN':'Y'},
    # //             {'USER_ID.IS_PORTAL':'Y'},
         {'USER_ID.EMAIL_ID':{'$ne':''}},
                 {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#                {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
#          {'MODIFIED_DATE':{'$gte':csy_first_date()}},
        {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
    {'$group':{'_id':{'$month':'$MODIFIED_DATE'},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
          {'$project':{'_id':1,'teachers':'$pc'}},
    { '$sort' : { '_id' : 1} }
              ])))
    if df2.empty:
        df2=pd.DataFrame({'_id':[1,2,3,4,5,6,7,8,9,10,11,12],'teachers':[0,0,0,0,0,0,0,0,0,0,0,0]})
    
    df3 = DataFrame(list(collection.aggregate([
    {"$match":
    {'$and': [
      {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
#             {"USER_ID._id":{'$not':{"$in":db.schoology_master.distinct( "USER_ID._id")}}},
#             {"USER_ID._id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.schoolId._id':{'$ne':None}},
    # //               {'IS_ADMIN':'Y'},
    # //             {'USER_ID.IS_PORTAL':'Y'},
         {'USER_ID.EMAIL_ID':{'$ne':''}},
                 {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#                {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
#          {'MODIFIED_DATE':{'$gte':csy_first_date()}},
        {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
    {'$group':{'_id':{'$month':'$MODIFIED_DATE'},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
          {'$project':{'_id':1,'parents':'$pc'}},
    { '$sort' : { '_id' : 1} }
              ])))
    if df3.empty:
        df3=pd.DataFrame({'_id':[1,2,3,4,5,6,7,8,9,10,11,12],'parents':[0,0,0,0,0,0,0,0,0,0,0,0]})
    
    df4 = DataFrame(list(collection.aggregate([
    {"$match":
    {'$and': [
      {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID._id":{'$not':{"$in":db.schoology_master.distinct( "USER_ID._id")}}},
            {"USER_ID._id":{"$in":db.clever_master.distinct( "USER_ID._id")}},
        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.schoolId._id':{'$ne':None}},
    # //               {'IS_ADMIN':'Y'},
    # //             {'USER_ID.IS_PORTAL':'Y'},
         {'USER_ID.EMAIL_ID':{'$ne':''}},
                 {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#                {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
#          {'MODIFIED_DATE':{'$gte':csy_first_date()}},
        {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
    {'$group':{'_id':{'$month':'$MODIFIED_DATE'},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
          {'$project':{'_id':1,'clever':'$pc'}},
    { '$sort' : { '_id' : 1} }
              ])))
    if df4.empty:
        df4=pd.DataFrame({'_id':[1,2,3,4,5,6,7,8,9,10,11,12],'clever':[0,0,0,0,0,0,0,0,0,0,0,0]})
    
    df5 = DataFrame(list(collection.aggregate([
    {"$match":
    {'$and': [
      {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID._id":{"$in":db.schoology_master.distinct( "USER_ID._id")}},
            {"USER_ID._id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.schoolId._id':{'$ne':None}},
    # //               {'IS_ADMIN':'Y'},
    # //             {'USER_ID.IS_PORTAL':'Y'},
         {'USER_ID.EMAIL_ID':{'$ne':''}},
                 {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#                {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
#          {'MODIFIED_DATE':{'$gte':csy_first_date()}},
        {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
    {'$group':{'_id':{'$month':'$MODIFIED_DATE'},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
          {'$project':{'_id':1,'scoology':'$pc'}},
    { '$sort' : { '_id' : 1} }
              ])))
    
    
    if df5.empty:
        df5=pd.DataFrame({'_id':[1,2,3,4,5,6,7,8,9,10,11,12],'scoology':[0,0,0,0,0,0,0,0,0,0,0,0]})
    
    df6= pd.merge(df1,df2,on='_id',how='left')
    df66= pd.merge(df6,df0,on='_id',how='left')
    df7= pd.merge(df66,df3,on='_id',how='left')
    df8= pd.merge(df7,df4,on='_id',how='left')
    df= pd.merge(df8,df5,on='_id',how='left')

    df.rename(columns = { '_id': 'Month'}, inplace = True)

    data = [['Aug', 8], ['Sep', 9], ['Oct', 10],['Nov', 11], ['Dec', 12], ['Jan', 1],['Feb', 2], ['Mar', 3], ['Apr', 4],['May', 5], ['Jun', 6], ['Jul', 7]] 


# Create the pandas DataFrame 
    df9 = pd.DataFrame(data, columns = ['Monthname', 'Month']) 

    DF=pd.merge(df9,df, on='Month',how='left')
    DF=DF.fillna(0)

#         d = dict(enumerate(calendar.month_abbr))    # to convert monthnumber of dataframe into monthname

#         try:
#             df['Month'] = df['Month'].map(d)
#         except:
#             pass

    if df.empty == True:
        Month=['Aug','Sep','Oct','Nov','Dec','Jan','Feb','Mar','Apr','May','Jun','Jul',]

        T=[0,0,0,0,0,0,0,0,0,0,0,0]
    else:
        Month=DF['Monthname'].tolist()
        
        T=DF['teachers'].tolist()
        P=DF['parents'].tolist()
        C=DF['clever'].tolist()
        S=DF['scoology'].tolist()
        pc=DF['practice_count'].tolist()
        lsy=DF['practice_count_lsy'].tolist()


    data={'monthname':Month,'Teachers':T,'Parents':P,'Clever':C,'Scoology':S,'lsy':lsy}
    return json.dumps(data)


@app.route('/schoolwiseusercounttop20_oct13_/<districtid>/<startdate>/<enddate>')
def schwiseucc_(districtid,startdate,enddate):

    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.user_master
    district=disdic[districtid]
    
    myDatetime1 = dateutil.parser.parse(startdate)
    myDatetime2 = dateutil.parser.parse(enddate)
#     enddate = dateutil.parser.parse(enddate)
    df1 = DataFrame(list(collection.aggregate([
    {"$match":
         {'$and': [
#              {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //               {'IS_ADMIN':'Y'},
#                 {'IS_PORTAL':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
                {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#                   
#              {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
#              {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$_id'},'NAME':{'$first':'$schoolId.NAME'},'district':{'$first':'$DISTRICT_ID.DISTRICT_NAME'}}},
                  {'$project':{'_id':1,'user_count':{'$size':'$ID'},'name':'$NAME','district':'$district'}},
                   { '$sort' : { 'user_count' : -1}},
              {'$limit':20}
                  ])))
    if df1.empty:
        df1=pd.DataFrame({'_id':[],'user_count':[]})
    else:
        df1
    school=df1['_id'].tolist()
        
    df0 = DataFrame(list(db.audio_track_master.aggregate([
    {"$match":
    {'$and': [
    #       {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
    #             {"USER_ID._id":{"$in":db.schoology_master.distinct( "USER_ID._id")}},
    #             {"USER_ID._id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
          {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.schoolId._id':{'$ne':None}},
    # //               {'IS_ADMIN':'Y'},
       {'USER_ID.schoolId._id':{'$in':school}},
         {'USER_ID.EMAIL_ID':{'$ne':''}},
#                  {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':'Broward', '$options':'i'}})}},
    #                {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
#              {'MODIFIED_DATE':{'$gte':csy_first_date()}},
        {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
         {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
     {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                   {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
    {'$group':{'_id':'$USER_ID.schoolId._id','pc':{'$addToSet':'$USER_ID._id'},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
          {'$project':{'_id':1,'active':{'$size':'$pc'}}},
    { '$sort' : { 'active' : -1} },
         {'$limit':20}
          ])))
    if df0.empty:
        df0=pd.DataFrame({'_id':[],'active':[]})
    
    df2 = DataFrame(list(collection.aggregate([
    {"$match":
         {'$and': [
             {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"_id":{'$not':{"$in":db.schoology_master.distinct( "USER_ID._id")}}},
            {"_id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
#              {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //               {'IS_ADMIN':'Y'},
#                 {'IS_PORTAL':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
#                       {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,'FULL_EXPERIENCE':'Y',"CATEGORY":{'$regex':district, '$options':'i'}})}},
#                    {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#                  {'DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$_id'},'NAME':{'$first':'$schoolId.NAME'},'district':{'$first':'$DISTRICT_ID.DISTRICT_NAME'}}},
                  {'$project':{'_id':1,'teachers':{'$size':'$ID'}}},
                   { '$sort' : { 'teachers' : -1}},
#               {'$limit':20}
                  ])))
    if df2.empty:
        df2=pd.DataFrame({'_id':[],'teachers':[]})
    
    df3 = DataFrame(list(collection.aggregate([
    {"$match":
         {'$and': [
             {'ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //               {'IS_ADMIN':'Y'},
#                 {'IS_PORTAL':'Y'},
#               {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
                 {'EMAIL_ID':{'$ne':''}},
#                    
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$_id'},'NAME':{'$first':'$schoolId.NAME'},'district':{'$first':'$DISTRICT_ID.DISTRICT_NAME'}}},
                  {'$project':{'_id':1,'parents':{'$size':'$ID'}}},
                   { '$sort' : { 'parents' : -1}},
#               {'$limit':20}
                  ])))
    if df3.empty:
        df3=pd.DataFrame({'_id':[],'parents':[]})
    
    
    df4 = DataFrame(list(collection.aggregate([
    {"$match":
         {'$and': [
             {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"_id":{'$not':{"$in":db.schoology_master.distinct( "USER_ID._id")}}},
            {"_id":{"$in":db.clever_master.distinct( "USER_ID._id")}},
                {"IS_DISABLED":{"$ne":"Y"}},
             
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
#              {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
             
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //               {'IS_ADMIN':'Y'},
#                 {'IS_PORTAL':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
#                      
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$_id'},'NAME':{'$first':'$schoolId.NAME'},'district':{'$first':'$DISTRICT_ID.DISTRICT_NAME'}}},
                  {'$project':{'_id':1,'clever':{'$size':'$ID'}}},
                   { '$sort' : { 'clever' : -1}},
#               {'$limit':20}
                  ])))
    if df4.empty:
        df4=pd.DataFrame({'_id':[],'clever':[]})
    
    
    df5 = DataFrame(list(collection.aggregate([
    {"$match":
         {'$and': [
             {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"_id":{"$in":db.schoology_master.distinct( "USER_ID._id")}},
            {"_id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
#               {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //               {'IS_ADMIN':'Y'},
#                 {'IS_PORTAL':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
#                       {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,'FULL_EXPERIENCE':'Y',"CATEGORY":{'$regex':district, '$options':'i'}})}},
#                   
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$_id'},'NAME':{'$first':'$schoolId.NAME'},'district':{'$first':'$DISTRICT_ID.DISTRICT_NAME'}}},
                  {'$project':{'_id':1,'scoology':{'$size':'$ID'}}},
                   { '$sort' : { 'scoology' : -1}},
#               {'$limit':20}
                  ])))
    if df5.empty:
        df5=pd.DataFrame({'_id':[],'scoology':[]})
    
    
    df6= pd.merge(df1,df0,on='_id',how='left')
    df9= pd.merge(df6,df2,on='_id',how='left')
    df7=pd.merge(df9,df3,on='_id',how='left')
    df8=pd.merge(df7,df4,on='_id',how='left')
    df=pd.merge(df8,df5,on='_id',how='left')
    
    df=df.fillna(0)
    df

 

    if df.empty == True:
        
        schname=[]
        teacher=[]
        parent=[]
        clever=[]
        scoology=[]
        active=[]
      
    else:
        schname=df['name'].tolist()
        teacher=df['teachers'].tolist()
        parent=df['parents'].tolist()
        clever=df['clever'].tolist()
        scoology=df['scoology'].tolist()
        active=df['active'].tolist()
   
    data={'schname':schname,'Teachers':teacher,'Parents':parent,'Clever':clever,'Scoology':scoology,'active':active}
    
    return json.dumps(data)



@app.route('/schoolwisepracticecounttop20_oct13_/<districtid>/<startdate>/<enddate>')
def schwisepc_(districtid,startdate,enddate):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.user_master
    district=disdic[districtid]
    
    myDatetime1 = dateutil.parser.parse(startdate)
    myDatetime2 = dateutil.parser.parse(enddate)
#     enddate = dateutil.parser.parse(enddate)
    df1 = DataFrame(list(collection.aggregate([
    {"$match":
         {'$and': [
#              {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //               {'IS_ADMIN':'Y'},
#                 {'IS_PORTAL':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
                {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#                   
#              {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
#              {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$_id'},'NAME':{'$first':'$schoolId.NAME'},'district':{'$first':'$DISTRICT_ID.DISTRICT_NAME'}}},
                  {'$project':{'_id':1,'user_count':{'$size':'$ID'},'name':'$NAME','district':'$district'}},
                   { '$sort' : { 'user_count' : -1}},
              {'$limit':20}
                  ])))
    if df1.empty:
        df1=pd.DataFrame({'_id':[],'user_count':[]})
    
    df2 = DataFrame(list(collection.aggregate([
    {"$match":
         {'$and': [
             {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"_id":{'$not':{"$in":db.schoology_master.distinct( "USER_ID._id")}}},
            {"_id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
#              {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //               {'IS_ADMIN':'Y'},
#                 {'IS_PORTAL':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
#                       {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,'FULL_EXPERIENCE':'Y',"CATEGORY":{'$regex':district, '$options':'i'}})}},
#                    {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#                  {'DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$_id'},'NAME':{'$first':'$schoolId.NAME'},'district':{'$first':'$DISTRICT_ID.DISTRICT_NAME'}}},
                  {'$project':{'_id':1,'teachers':{'$size':'$ID'}}},
                   { '$sort' : { 'teachers' : -1}},
#               {'$limit':20}
                  ])))
    if df2.empty:
        df2=pd.DataFrame({'_id':[],'teachers':[]})
    
    df3 = DataFrame(list(collection.aggregate([
    {"$match":
         {'$and': [
             {'ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //               {'IS_ADMIN':'Y'},
#                 {'IS_PORTAL':'Y'},
#               {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
                 {'EMAIL_ID':{'$ne':''}},
#                    
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$_id'},'NAME':{'$first':'$schoolId.NAME'},'district':{'$first':'$DISTRICT_ID.DISTRICT_NAME'}}},
                  {'$project':{'_id':1,'parents':{'$size':'$ID'}}},
                   { '$sort' : { 'parents' : -1}},
#               {'$limit':20}
                  ])))
    if df3.empty:
        df3=pd.DataFrame({'_id':[],'parents':[]})
    
    
    df4 = DataFrame(list(collection.aggregate([
    {"$match":
         {'$and': [
             {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"_id":{'$not':{"$in":db.schoology_master.distinct( "USER_ID._id")}}},
            {"_id":{"$in":db.clever_master.distinct( "USER_ID._id")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
#              {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
             
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //               {'IS_ADMIN':'Y'},
#                 {'IS_PORTAL':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
#                      
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$_id'},'NAME':{'$first':'$schoolId.NAME'},'district':{'$first':'$DISTRICT_ID.DISTRICT_NAME'}}},
                  {'$project':{'_id':1,'clever':{'$size':'$ID'}}},
                   { '$sort' : { 'clever' : -1}},
#               {'$limit':20}
                  ])))
    if df4.empty:
        df4=pd.DataFrame({'_id':[],'clever':[]})
    
    
    df5 = DataFrame(list(collection.aggregate([
    {"$match":
         {'$and': [
             {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"_id":{"$in":db.schoology_master.distinct( "USER_ID._id")}},
            {"_id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
#               {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //               {'IS_ADMIN':'Y'},
#                 {'IS_PORTAL':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
#                       {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,'FULL_EXPERIENCE':'Y',"CATEGORY":{'$regex':district, '$options':'i'}})}},
#                   
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$_id'},'NAME':{'$first':'$schoolId.NAME'},'district':{'$first':'$DISTRICT_ID.DISTRICT_NAME'}}},
                  {'$project':{'_id':1,'scoology':{'$size':'$ID'}}},
                   { '$sort' : { 'scoology' : -1}},
#               {'$limit':20}
                  ])))
    if df5.empty:
        df5=pd.DataFrame({'_id':[],'scoology':[]})
    
    
    df6= pd.merge(df1,df2,on='_id',how='left')
    df7=pd.merge(df6,df3,on='_id',how='left')
    df8=pd.merge(df7,df4,on='_id',how='left')
    df=pd.merge(df8,df5,on='_id',how='left')
    
    df=df.fillna(0)
    df

 

    if df.empty == True:
        
        schname=[]
        teacher=[]
        parent=[]
        clever=[]
        scoology=[]
      
    else:
        schname=df['name'].tolist()
        teacher=df['teachers'].tolist()
        parent=df['parents'].tolist()
        clever=df['clever'].tolist()
        scoology=df['scoology'].tolist()
   
    data={'schname':schname,'Teachers':teacher,'Parents':parent,'Clever':clever,'Scoology':scoology}
    
    return json.dumps(data)


@app.route('/top20userspractisinginfo_oct13_/<districtid>/<startdate>/<enddate>')
def topusers_practice_(districtid,startdate,enddate):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    district=disdic[districtid]
    myDatetime1 = dateutil.parser.parse(startdate)
    myDatetime2 = dateutil.parser.parse(enddate)


    collection1 = db.user_master
    df1 = DataFrame(list(collection.aggregate([
    {"$match":
    {'$and': [
    #           {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
              {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            {'USER_ID.schoolId._id':{'$ne':None}},
    # //               {'IS_ADMIN':'Y'},
    # //             {'USER_ID.IS_PORTAL':'Y'},
             {'USER_ID.EMAIL_ID':{'$ne':''}},
             {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
                {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}},
             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
         {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
        {'$group':{'_id':'$USER_ID._id','pc':{'$sum':1}}},
              {'$project':{'_id':1,'practice_count':'$pc'}},
    { '$sort' : { 'practice_count' : -1} }



    # //               {'$count':'count'}
              ])))
    if df1.empty == True:

        schname=[]
        pc=[]
        
    else:

        df2=DataFrame(list(collection1.aggregate([{"$match":
         {'$and': [
        #         {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        #                  {'_id':{'$in':user}},
        # //               {'IS_ADMIN':'Y'},
    #          {'CREATED_DATE':{"$gte": myDatetime1 ,
    #                              "$lte":myDatetime2}},

                 {'EMAIL_ID':{'$ne':''}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

            {'$group':{'_id':'$_id','ID':{'$addToSet':'$_id'},'school_name':{'$first':'$schoolId.NAME'},'user_name':{'$first':'$USER_NAME'}
                      }},


            {'$project':{'_id':1,'user_name':1,'school_name':1}},]))).fillna('No info')

        df=pd.merge(df1,df2, how='left', on='_id')
        df
        if df.empty == True:

            schname=[]
            pc=[]

        else:
            df["users"] = df["user_name"] +','+' ' + df["school_name"]
            schname=df['users'].tolist()
            pc=df['practice_count'].tolist()



    #     data=[]    
    #     for i,k in zip(schname,uc):

    #         data.append([i,k])

    #     for i in range(len(schname)):
    #             schname[i] = schname[i]
    data={'schname':schname[0:20],'practicecount':pc[0:20]}

    return json.dumps(data)


@app.route('/districtschooltable_oct13_/<districtid>/<startdate>/<enddate>')
def district_school_table_(districtid,startdate,enddate):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 

    collection2=db.school_master
    collection=db.user_master
    collection1=db.audio_track_master
    collection3=db.subscription_master
    district=disdic[districtid]
    myDatetime1 = dateutil.parser.parse(startdate)
    myDatetime2 = dateutil.parser.parse(enddate)
    

    df2=DataFrame(list(collection.aggregate([{"$match":
         {'$and': [
#         {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},


    # //               {'IS_ADMIN':'Y'},
#              {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},

                 {'EMAIL_ID':{'$ne':''}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

            {'$group':{'_id':'$schoolId._id','ID':{'$addToSet':'$_id'},'school_name':{'$first':'$schoolId.NAME'},'date':{'$min':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},'country':{'$first':'$schoolId.COUNTRY'},
                      'State':{'$first':'$schoolId.STATE'},'city':{'$first':'$schoolId.CITY'}}},



            {'$project':{'_id':1,'usercount':{'$size':'$ID'},'Created_date':'$date','country':1,'State':1,'school_name':1,'city':1}},



  
                                            ])))


    df3 = DataFrame(list(collection1.aggregate([
    {"$match":
         {'$and': [
#              {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},

    # //        
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
             {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}},
    #                  
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$USER_ID.schoolId._id','ID':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'},'last_practice_date':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}},'prog':{'$first':'$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME'}}},
                  {'$project':{'_id':1,'Practice_Count':'$ID','program':1,'last_practice_date':'$last_practice_date'}},
                   ]))).fillna(0)
    df_ = DataFrame(list(collection1.aggregate([
    {"$match":
         {'$and': [
#              {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},

    # //        
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
             {'MODIFIED_DATE':{"$gte": csy_first_date()}},
    #                  
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$USER_ID.schoolId._id','ID':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'},'last_practice_date':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}},'prog':{'$first':'$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME'}}},
                  {'$project':{'_id':1,'Practice_Count_csy':'$ID'}},
                   ]))).fillna(0)
    df__ = DataFrame(list(collection1.aggregate([
    {"$match":
         {'$and': [
#              {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
                {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},

    # //        
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
             {'MODIFIED_DATE':{"$gte": LSY_Date() ,
                             }},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$USER_ID.schoolId._id','ID':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'},'last_practice_date':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}},'prog':{'$first':'$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME'}}},
                  {'$project':{'_id':1,'Practice_Count_lsy':'$ID'}},
                   ])))
    df4 = DataFrame(list(collection3.aggregate([
    {"$match":
         {'$and': [
#              {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
             {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
  
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#              {'USER_ID.CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
    #                  
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$USER_ID.schoolId._id','subsdate':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$SUBSCRIPTION_EXPIRE_DATE'}}}}},
                  {'$project':{'_id':1,'program':1,'Subscription_expire_date':'$subsdate'}},
                   ])))
    

    df5=pd.merge(df2,df3, how='left', on='_id')
    dff=pd.merge(df5,df_, how='left', on='_id')
    dfff=pd.merge(dff,df__, how='left', on='_id')
    df=pd.merge(dfff,df4, how='left', on='_id')
#     df=pd.merge(df6,df4, how='left', on='_id')
    df.rename(columns = { '_id': 'schoolid_'}, inplace = True)
    
    
#     df[["schoolid_", "schoolid"]]=df[["schoolid_", "schoolid"]].astype(str) 

    # df4.fillna(0)
#     print(df)
    df['school_name'].fillna("NO INFO", inplace=True)
    df['country'].fillna("NO INFO", inplace=True)
    df.Practice_Count=df.Practice_Count.fillna(0)
    df.Practice_Count_lsy=df.Practice_Count_lsy.fillna(0)
    df.Practice_Count_csy=df.Practice_Count_csy.fillna(0)
    df.Practice_Count=df.Practice_Count.astype('int64')
    df.Practice_Count_csy=df.Practice_Count_csy.astype('int64')
    df.Practice_Count_lsy=df.Practice_Count_lsy.astype('int64')
    df.usercount=df.usercount.fillna(0)
    df.usercount=df.usercount.astype('int64')   
    df['school_name'].replace("",'NO INFO', inplace=True)
    df['city'].replace("",'NO INFO', inplace=True)
    df['State'].replace("",'NO INFO', inplace=True)
    df['country'].replace("",'NO INFO', inplace=True)
    
    df['city'].fillna("NO INFO", inplace=True)
    df['city'].replace("NULL","NO INFO", inplace=True)
    df['State'].fillna("NO INFO", inplace=True)
    df['State'].replace("NULL","NO INFO", inplace=True)
   
    df['Created_date']=df['Created_date'].fillna(0)
    df['last_practice_date']=df['last_practice_date'].fillna('NO PRACTICE')
    df['Subscription_expire_date']=df['Subscription_expire_date'].fillna('No Info')
    df['label'] = np.where(df['Practice_Count_csy']!= 0, 'ENGAGED IN CSY', 'ENGAGED IN LSY')
    df.loc[(df['Practice_Count_lsy']==0) & (df['Practice_Count_csy']== 0), 'label']='INACTIVE'
#     if df['Practice_Count_lsy'] & df['Practice_Count_csy']== 0:
#         df['label'] = 'BLACK'
    data=[]
    for i,j,k,l,m,n,o,p,r,s,q,x,z in zip(df['school_name'].tolist(),df['country'].tolist(),df['State'].tolist(),df['city'].tolist(),df['Practice_Count'].tolist(),df['Practice_Count_csy'].tolist(),df['Practice_Count_lsy'].tolist(),df['usercount'].tolist(),df['Created_date'].tolist(),df['last_practice_date'].tolist(),df['Subscription_expire_date'].tolist(),df['schoolid_'].tolist(),df['label'].tolist()):
        data.append([i,j,k,l,m,n,o,p,r,s,q,x,z])
    temp={"data":data}
#     return df
    
    return json.dumps(temp,default=str)

# district_school_table_('5f2609807a1c0000950bb477','2021-08-01','2021-10-27')


@app.route('/districtusertableteacher_oct13_/<districtid>/<startdate>/<enddate>')
def district_user_table_teacher_(districtid,startdate,enddate):

    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 

    
    collection2=db.school_master
    collection=db.user_master
    collection1=db.audio_track_master
    collection3=db.subscription_master
    district=disdic[districtid]
    myDatetime1 = dateutil.parser.parse(startdate)
    myDatetime2 = dateutil.parser.parse(enddate)

    from datetime import datetime


    

    df2=DataFrame(list(collection.aggregate([{"$match":
         {'$and': [
            {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #                 {'_id':{'$in':user}},
    # //               {'IS_ADMIN':'Y'},
              {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},

                 {'EMAIL_ID':{'$ne':''}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
#              {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

            {'$group':{'_id':'$_id','ID':{'$addToSet':'$_id'},'school_name':{'$first':'$schoolId.NAME'},'school_id':{'$first':'$schoolId._id'},'user_name':{'$first':'$USER_NAME'},'EMAIL':{'$first':'$EMAIL_ID'},'date':{'$first':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},'country':{'$first':'$schoolId.COUNTRY'},
                      'State':{'$first':'$schoolId.STATE'},'city':{'$first':'$schoolId.CITY'}}},


            {'$project':{'_id':1,'Created_date':'$date','country':1,'State':1,'user_name':1,'EMAIL':1,'school_name':1,'city':1,'school_id':'$school_id'}},])))


    a=df2['_id'].tolist()
    b=[0]*len(a)
    c=['No Practice']*len(a)
    
    
    df3=DataFrame(list(collection1.aggregate([
     {"$match":
         {'$and': [
              {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
    #                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
#                  {'MODIFIED_DATE':{'$gte':datetime(2020,8,1)}},
             {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$USER_ID._id','user':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'last_practice_date':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}}}},
                  {'$project':{'_id':1,'user_id':'$user','Practice_Count':'$pc','last_practice_date':1}}])))

    if df3.empty is True:
        df3=pd.DataFrame(list(zip(a, b,c)),
               columns =['_id', 'Practice_Count','last_practice_date'])
    else:
        df3
    df_=DataFrame(list(collection1.aggregate([
     {"$match":
         {'$and': [
              {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
    #                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
#                  {'MODIFIED_DATE':{'$gte':datetime(2020,8,1)}},
             {'MODIFIED_DATE':{"$gte": csy_first_date() ,
                             }},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$USER_ID._id','user':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'last_practice_date':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}}}},
                  {'$project':{'_id':1,'Practice_Count_csy':'$pc'}}])))
    if df_.empty is True:
        df_=pd.DataFrame(list(zip(a, b)),
               columns =['_id', 'Practice_Count_csy'])
    else:
        df_

    df__=DataFrame(list(collection1.aggregate([
     {"$match":
         {'$and': [
              {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
    #                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
#                  {'MODIFIED_DATE':{'$gte':datetime(2020,8,1)}},
             {'MODIFIED_DATE':{"$gte": LSY_Date() ,
                             }},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$USER_ID._id','user':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'last_practice_date':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}}}},
                  {'$project':{'_id':1,'Practice_Count_lsy':'$pc',}}])))
    if df__.empty is True:
        df__=pd.DataFrame(list(zip(a, b)),
               columns =['_id', 'Practice_Count_lsy'])
    else:
        df__




#     df4 = DataFrame(list(collection3.aggregate([
#     {"$match":
#          {'$and': [
#                  {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
#                 {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
#                   {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
#                  {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
#                 { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
#                 { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#     #             {'USER_ID._id':{'$in':user}},
#             {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},

#                  {'USER_ID.EMAIL_ID':{'$ne':''}},
# #              {'USER_ID.CREATED_DATE':{"$gte": myDatetime1 ,
# #                              "$lte":myDatetime2}},
# #     #                  
#                  {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
#              {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
#                            {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
#                              {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
#             {'$group':{'_id':'$USER_ID._id','subsdate':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$SUBSCRIPTION_EXPIRE_DATE'}}}}},
#                   {'$project':{'_id':1,'Subscription_expire_date':'$subsdate'}},
#                    ])))

    df5=pd.merge(df2,df3, how='left', on='_id')
    dff=pd.merge(df5,df_, how='left', on='_id')
    df=pd.merge(dff,df__, how='left', on='_id')
#     df=pd.merge(df5,df4, how='left', on='_id')
    df


    df['country'].fillna("NO INFO", inplace=True)
    df.Practice_Count=df.Practice_Count.fillna(0)
    df.Practice_Count=df.Practice_Count.astype('int64')
    df.Practice_Count_lsy=df.Practice_Count_lsy.fillna(0)
    df.Practice_Count_csy=df.Practice_Count_csy.fillna(0)
#     df.Practice_Count=df.Practice_Count.astype('int64')
    df.Practice_Count_csy=df.Practice_Count_csy.astype('int64')
    df.Practice_Count_lsy=df.Practice_Count_lsy.astype('int64')

    df['school_name'].replace("",'NO INFO', inplace=True)
    df['city'].replace("",'NO INFO', inplace=True)
    df['State'].replace("",'NO INFO', inplace=True)
    df['country'].replace("",'NO INFO', inplace=True)
    df['user_name'].replace("",'NO INFO', inplace=True)
    df['EMAIL'].replace("",'NO INFO', inplace=True)
    df['city'].fillna("NO INFO", inplace=True)
    df['city'].replace("NULL","NO INFO", inplace=True)
    df['State'].fillna("NO INFO", inplace=True)
    df['State'].replace("NULL","NO INFO", inplace=True)



    df['Created_date']=df['Created_date'].fillna(0)
    df['last_practice_date']=df['last_practice_date'].fillna('NO PRACTICE')
    df['label'] = np.where(df['Practice_Count_csy']!= 0, 'ENGAGED IN CSY', 'ENGAGED IN LSY')
    df.loc[(df['Practice_Count_lsy']==0) & (df['Practice_Count_csy']== 0), 'label']='INACTIVE'
#     df['Subscription_expire_date']=df['Subscription_expire_date'].fillna('No Info')

    data=[]
    for i,j,k,l,m,n,o,p,r,q,s,x,z in zip(df['user_name'].tolist(),df['EMAIL'].tolist(),df['school_name'].tolist(),df['country'].tolist(),
                                         df['State'].tolist(),df['city'].tolist(),df['Practice_Count'].tolist(),df['Practice_Count_csy'].tolist(),
                                         df['Practice_Count_lsy'].tolist(),df['Created_date'].tolist(),df['last_practice_date'].tolist(),
                                         df['school_id'].tolist(),df['label'].tolist()):
        data.append([i,j,k,l,m,n,o,p,r,q,s,x,z])
    temp={"data":data}
#     return df
    return json.dumps(temp,default=str)
# district_user_table_teacher_('5f2609807a1c0000950bb477','2021-08-01','2021-10-27')


@app.route('/districtusertableparent_oct13_/<districtid>/<startdate>/<enddate>')
def district_user_table_parent_(districtid,startdate,enddate):

    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 

    
    collection2=db.school_master
    collection=db.user_master
    collection1=db.audio_track_master
    collection3=db.subscription_master
    district=disdic[districtid]
    myDatetime1 = dateutil.parser.parse(startdate)
    myDatetime2 = dateutil.parser.parse(enddate)

    from datetime import datetime


    

    df2=DataFrame(list(collection.aggregate([{"$match":
         {'$and': [
            {'ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #                 {'_id':{'$in':user}},
    # //               {'IS_ADMIN':'Y'},
              {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},

                 {'EMAIL_ID':{'$ne':''}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
#              {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

            {'$group':{'_id':'$_id','ID':{'$addToSet':'$_id'},'school_name':{'$first':'$schoolId.NAME'},'school_id':{'$first':'$schoolId._id'},'user_name':{'$first':'$USER_NAME'},'EMAIL':{'$first':'$EMAIL_ID'},'date':{'$first':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},'country':{'$first':'$schoolId.COUNTRY'},
                      'State':{'$first':'$schoolId.STATE'},'city':{'$first':'$schoolId.CITY'}}},


            {'$project':{'_id':1,'Created_date':'$date','country':1,'State':1,'user_name':1,'EMAIL':1,'school_name':1,'city':1,'school_id':'$school_id'}},])))

    a=df2['_id'].tolist()
    b=[0]*len(a)
    c=['No Practice']*len(a)
    
    
    df3=DataFrame(list(collection1.aggregate([
     {"$match":
         {'$and': [
              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
    #                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
#                  {'MODIFIED_DATE':{'$gte':datetime(2020,8,1)}},
             {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$USER_ID._id','user':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'last_practice_date':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}}}},
                  {'$project':{'_id':1,'user_id':'$user','Practice_Count':'$pc','last_practice_date':1}}])))
    if df3.empty is True:
        df3=pd.DataFrame(list(zip(a, b,c)),
               columns =['_id', 'Practice_Count','last_practice_date'])
    else:
        df3

    df_=DataFrame(list(collection1.aggregate([
     {"$match":
         {'$and': [
              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
    #                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
#                  {'MODIFIED_DATE':{'$gte':datetime(2020,8,1)}},
             {'MODIFIED_DATE':{"$gte": csy_first_date() ,
                             }},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$USER_ID._id','user':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'last_practice_date':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}}}},
                  {'$project':{'_id':1,'Practice_Count_csy':'$pc'}}])))
    if df_.empty is True:
        df_=pd.DataFrame(list(zip(a, b)),
               columns =['_id', 'Practice_Count_csy'])
    else:
        df_

    df__=DataFrame(list(collection1.aggregate([
     {"$match":
         {'$and': [
              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
    #                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
#                  {'MODIFIED_DATE':{'$gte':datetime(2020,8,1)}},
             {'MODIFIED_DATE':{"$gte": LSY_Date() ,
                             }},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$USER_ID._id','user':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'last_practice_date':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}}}},
                  {'$project':{'_id':1,'Practice_Count_lsy':'$pc',}}])))

    if df__.empty is True:
        df__=pd.DataFrame(list(zip(a, b)),
               columns =['_id', 'Practice_Count_lsy'])
    else:
        df__



#     df4 = DataFrame(list(collection3.aggregate([
#     {"$match":
#          {'$and': [
#                  {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
#                 {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
#                   {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
#                  {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
#                 { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
#                 { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#     #             {'USER_ID._id':{'$in':user}},
#             {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},

#                  {'USER_ID.EMAIL_ID':{'$ne':''}},
# #              {'USER_ID.CREATED_DATE':{"$gte": myDatetime1 ,
# #                              "$lte":myDatetime2}},
# #     #                  
#                  {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
#              {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
#                            {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
#                              {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
#             {'$group':{'_id':'$USER_ID._id','subsdate':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$SUBSCRIPTION_EXPIRE_DATE'}}}}},
#                   {'$project':{'_id':1,'Subscription_expire_date':'$subsdate'}},
#                    ])))

    df5=pd.merge(df2,df3, how='left', on='_id')
    dff=pd.merge(df5,df_, how='left', on='_id')
    df=pd.merge(dff,df__, how='left', on='_id')
#     df=pd.merge(df5,df4, how='left', on='_id')
    df


    df['country'].fillna("NO INFO", inplace=True)
    df.Practice_Count=df.Practice_Count.fillna(0)
    df.Practice_Count=df.Practice_Count.astype('int64')
    df.Practice_Count_lsy=df.Practice_Count_lsy.fillna(0)
    df.Practice_Count_csy=df.Practice_Count_csy.fillna(0)
#     df.Practice_Count=df.Practice_Count.astype('int64')
    df.Practice_Count_csy=df.Practice_Count_csy.astype('int64')
    df.Practice_Count_lsy=df.Practice_Count_lsy.astype('int64')

    df['school_name'].replace("",'NO INFO', inplace=True)
    df['city'].replace("",'NO INFO', inplace=True)
    df['State'].replace("",'NO INFO', inplace=True)
    df['country'].replace("",'NO INFO', inplace=True)
    df['user_name'].replace("",'NO INFO', inplace=True)
    df['EMAIL'].replace("",'NO INFO', inplace=True)
    df['city'].fillna("NO INFO", inplace=True)
    df['city'].replace("NULL","NO INFO", inplace=True)
    df['State'].fillna("NO INFO", inplace=True)
    df['State'].replace("NULL","NO INFO", inplace=True)



    df['Created_date']=df['Created_date'].fillna(0)
    df['last_practice_date']=df['last_practice_date'].fillna('NO PRACTICE')
    df['label'] = np.where(df['Practice_Count_csy']!= 0, 'ENGAGED IN CSY', 'ENGAGED IN LSY')
    df.loc[(df['Practice_Count_lsy']==0) & (df['Practice_Count_csy']== 0), 'label']='INACTIVE'
#     df['Subscription_expire_date']=df['Subscription_expire_date'].fillna('No Info')

    data=[]
    for i,j,k,l,m,n,o,p,r,q,s,x,z in zip(df['user_name'].tolist(),df['EMAIL'].tolist(),df['school_name'].tolist(),df['country'].tolist(),
                                         df['State'].tolist(),df['city'].tolist(),df['Practice_Count'].tolist(),df['Practice_Count_csy'].tolist(),
                                         df['Practice_Count_lsy'].tolist(),df['Created_date'].tolist(),df['last_practice_date'].tolist(),
                                         df['school_id'].tolist(),df['label'].tolist()):
        data.append([i,j,k,l,m,n,o,p,r,q,s,x,z])
    temp={"data":data}
#     return df
    return json.dumps(temp,default=str)




@app.route('/districtcardsinfo_oct13_/<districtid>/<startdate>/<enddate>')
def district_count_cards_(districtid,startdate,enddate):
    
    from datetime import datetime
    from datetime import timedelta
    
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection1 = db.user_master
    collection2=db.audio_track_master
    collection3=db.login_logs
    collection4=db.school_master
    district=disdic[districtid]
    myDatetime1 = dateutil.parser.parse(startdate)
    myDatetime2 = dateutil.parser.parse(enddate)
    
    df1_1 = DataFrame(list(collection1.aggregate([
     {"$match":
         {'$and': [
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                  {'IS_PORTAL':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
#                  {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
             {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
#              {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$_id','ID':{'$addToSet':'$schoolId._id'},'dn':{'$first':'$DISTRICT_ID.DISTRICT_NAME'}}},
#                   {'$project':{'_id':1,'school_count':{'$size':'$ID'},'district':'$dn'}}
                  ])))
    
    schoolid=df1_1['ID'].tolist()
    userid=df1_1['_id'].tolist()
#     print(userid)
    
    
#     print(district)
    df1 = DataFrame(list(collection1.aggregate([
     {"$match":
         {'$and': [
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                  {'IS_PORTAL':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
#                  {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
             {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
#              {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','ID':{'$addToSet':'$schoolId._id'},'dn':{'$first':'$DISTRICT_ID.DISTRICT_NAME'}}},
                  {'$project':{'_id':1,'school_count':{'$size':'$ID'},'district':'$dn'}}
                  ])))
    
    
    df10 = DataFrame(list(collection4.aggregate([ {"$match":{"CATEGORY":{'$regex':district, '$options':'i'}}},
                            {'$project':{'_id':0,'CATEGORY':1,'PARTNER_CATEGORY':1,'STATE':1}} ])))                  
    df1['district']=df1['district'].fillna(df10['CATEGORY'])                        
    
    
    df2 = DataFrame(list(collection1.aggregate([ {"$match":
         {'$and': [
              {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                  {'IS_PORTAL':'Y'},
                 {'EMAIL_ID':{'$ne':''}},
                {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#                  {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','ID':{'$addToSet':'$_id'}}},
                  {'$project':{'_id':1,'teacher_count':{'$size':'$ID'}}}
                  ])))
    df5 = DataFrame(list(collection1.aggregate([ {"$match":
         {'$and': [
              {'ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
             
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                  {'IS_PORTAL':'Y'},
                  {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
                 {'EMAIL_ID':{'$ne':''}},
#              {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
#                  {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','ID':{'$addToSet':'$_id'}}},
                  {'$project':{'_id':1,'family_count':{'$size':'$ID'}}}
                  ])))
    today1= datetime.utcnow()
    tod1= today1+ timedelta(hours=4)
    start1= tod1-timedelta(days=30)
    df3=DataFrame(list(collection2.aggregate([
     {"$match":
         {'$and': [
          {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
                 {'MODIFIED_DATE':{'$gte':csy_first_date()}},
#             
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','pc':{'$addToSet':'$USER_ID._id'}}},
                  {'$project':{'_id':1,'engd_teacher_csy':{'$size':'$pc'}}}])))
    df33=DataFrame(list(collection2.aggregate([
     {"$match":
         {'$and': [
          {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
                 {'MODIFIED_DATE':{'$gte':LSY_Date()}},
#             
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','pc':{'$addToSet':'$USER_ID._id'}}},
                  {'$project':{'_id':1,'engd_teacher_lsy':{'$size':'$pc'}}}])))
    df333=DataFrame(list(collection2.aggregate([
     {"$match":
         {'$and': [
          {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
                 {'MODIFIED_DATE':{'$gte':csy_first_date()}},
#             
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','pc':{'$addToSet':'$USER_ID._id'}}},
                  {'$project':{'_id':1,'engd_parent_csy':{'$size':'$pc'}}}])))
    df3333=DataFrame(list(collection2.aggregate([
     {"$match":
         {'$and': [
          {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
                 {'MODIFIED_DATE':{'$gte':LSY_Date()}},
#             
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','pc':{'$addToSet':'$USER_ID._id'}}},
                  {'$project':{'_id':1,'engd_parent_lsy':{'$size':'$pc'}}}])))
   
   

    df4=DataFrame(list(db.audio_feedback.aggregate([{"$match":
         {'$and': [
    #           {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
#                 {"USER.":{"$ne":"Y"}},
#                   {"USER.IS_BLOCKED":{"$ne":"Y"}},
#                  {"USER.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
#                 { 'USER.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
#                 { 'USER.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                 {'USER.schoolId._id':{'$ne':None}},
#     # //               {'IS_ADMIN':'Y'},
                  {"USER._id":{"$in":userid}},
                     {'RATING':{'$ne':0}},
#     # //             {'USER_ID.IS_PORTAL':'Y'},
#                  {'USER.EMAIL_ID':{'$ne':''}},
# #                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#     #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
# #                  {'LAST_LOGGED_IN':{'$gte':start1}},
             {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}},
             
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
#                  {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
#              {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
#                            {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
#                              {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
         ]}},
            {'$group':{'_id':'','rating':{'$avg':'$RATING'}}},
                  {'$project':{'_id':1,'rating':'$rating'}}])))
    df6=DataFrame(list(collection2.aggregate([
     {"$match":
         {'$and': [
             {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
#                  {'MODIFIED_DATE':{'$gte':csy_first_date()}},
             {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','pc':{'$sum':1},'MINDFUL_MINUTES':{'$sum':{'$round':[{'$divide':[{'$subtract':['$CURSOR_END','$cursorStart']}, 60]},2]}}}},
                  {'$project':{'_id':1,'practice_sessions_t':'$pc','MINDFUL_MINUTES_t':'$MINDFUL_MINUTES'}}])))
   
    df7=DataFrame(list(collection2.aggregate([
     {"$match":
         {'$and': [
             {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
#                  {'MODIFIED_DATE':{'$gte':csy_first_date()}},
             {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','pc':{'$sum':1},'MINDFUL_MINUTES':{'$sum':{'$round':[{'$divide':[{'$subtract':['$CURSOR_END','$cursorStart']}, 60]},2]}}}},
                  {'$project':{'_id':1,'practice_sessions_p':'$pc','MINDFUL_MINUTES_p':'$MINDFUL_MINUTES'}}])))
    
    df77=DataFrame(list(collection2.aggregate([
     {"$match":
         {'$and': [
#              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
#                  {'MODIFIED_DATE':{'$gte':csy_first_date()}},
             {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','pc':{'$sum':1},'MINDFUL_MINUTES':{'$sum':{'$round':[{'$divide':[{'$subtract':['$CURSOR_END','$cursorStart']}, 60]},2]}}}},
                  {'$project':{'_id':1,'practice_sessions':'$pc','MINDFUL_MINUTES':'$MINDFUL_MINUTES'}}])))
    
    
    
    
    df0=DataFrame(list(collection2.aggregate([
     {"$match":
         {'$and': [
    # //          {'ROLE_ID._id' :{'$':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
                 {'MODIFIED_DATE':{'$gte':csy_first_date()}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','pc':{'$addToSet':'$USER_ID.schoolId._id'}}},
                  {'$project':{'_id':1,'engdschool_csy':{'$size':'$pc'}}}])))
    df00=DataFrame(list(collection2.aggregate([
     {"$match":
         {'$and': [
    # //          {'ROLE_ID._id' :{'$':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
#                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
                 {'MODIFIED_DATE':{'$gte':LSY_Date()}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'','pc':{'$addToSet':'$USER_ID.schoolId._id'}}},
                  {'$project':{'_id':1,'engdschool_lsy':{'$size':'$pc'}}}])))

    
    engd_parent_lsy=[0]
    try:
        engd_parent_lsy=df3333['engd_parent_lsy']
    except:
        engd_parent_lsy=[0]
    engd_parent_csy=[0]
    try:
        engd_parent_csy=df333['engd_parent_csy']
    except:
        engd_parent_csy=[0]
        
    engd_teacher_csy=[0]
    try:
        engd_teacher_csy=df3['engd_teacher_csy']
    except:
        engd_teacher_csy=[0]
    engd_teacher_lsy=[0]
    try:
        engd_teacher_lsy=df33['engd_teacher_lsy']
    except:
        engd_teacher_lsy=[0]
        
    
    
    
    engdschool_lsy=[0]
    try:
        engdschool_lsy=df00['engdschool_lsy']
    except:
        engdschool_lsy=[0]
    rating=[0]
    try:
        rating=df4['rating']
    except:
        rating=[0]
        
    engdschool_csy=[0]
    try:
        engdschool_csy=df0['engdschool_csy']
    except:
        engdschool_csy=[0]
    sc=[0]
    try:
        sc=df1['school_count']
    except:
        sc=[0]
        
    tc=[0]
    try:
        tc=df2['teacher_count']
    except:
        tc=[0]
    
    pct=[0]
    try:
        pct=df6['practice_sessions_t']
    except:
        pct=[0]
    pcp=[0]
    try:
        pcp=df7['practice_sessions_p']
    except:
        pcp=[0]
        
    mmt=[0]
    try:
        mmt=df6['MINDFUL_MINUTES_t']
    except:
        mmt=[0]
    mmp=[0]
    try:
        mmp=df7['MINDFUL_MINUTES_p']
    except:
        mmp=[0]     
            
        
    mm=[0]
    try:
        mm=df77['MINDFUL_MINUTES']
    except:
        mm=[0]
    pc=[0]
    try:
        pc=df77['practice_sessions']
    except:
        pc=[0]
    
    lc=[0]
    try:
        lc=df4['logins']
    except:
        lc=[0]
        
    fc=[0]
    try:
        fc=df5['family_count']
    except:
        fc=[0]

    dn=[0]
    try:
        dn=df1['district']
    except:
        dn=[0]
    
    
    ca=[0]
    try:
        ca=df10['CATEGORY']
    except:
        ca=[0]
    
    Pa=[0]
    try:
        Pa=df10['PARTNER_CATEGORY']
    except:
        Pa=[0] 
    state=[0]
    try:
        state=df10['STATE']
    except:
        state=[0]
    data={"schoolcount":str(sc[0]),"engd_teacher_lsy":str(engd_teacher_lsy[0]),"engd_teacher_csy":str(engd_teacher_csy[0]),
          "engd_parent_csy":str(engd_parent_csy[0]),"engd_parent_lsy":str(engd_parent_lsy[0]),
          "engaged_school_csy":str(engdschool_csy[0]),"engaged_school_lsy":str(engdschool_lsy[0]),"teachercount":str(tc[0]),"familycount":str(fc[0]),"teacherpracticecount":str(pct[0]),"parentspracticecount":str(pcp[0]),
          'MINDFUL_MINUTES':str(round(int(mm[0]))),'rating':str(round(rating[0],1)),'state':str(state[0]),'MINDFUL_MINUTES_Teacher':str(round(int(mmt[0]))),'MINDFUL_MINUTES_parent':str(round(int(mmp[0]))),'district':str(dn[0]),"practicecount":str(pc[0]),'category':str(ca[0]),'partnercategory':str(Pa[0])}
    return json.dumps(data)

@app.route('/districtheatmappracfamily_oct13_/<districtid>/<startdate>/<enddate>')
def heat_district_family_prac_(districtid,startdate,enddate):
    import collections
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    collection2=db.user_master
    district=disdic[districtid]
    myDatetime1 = dateutil.parser.parse(startdate)
    myDatetime2 = dateutil.parser.parse(enddate)

   

    df=DataFrame(list(collection2.aggregate([{"$match":
             {'$and': [
                

                    {"IS_DISABLED":{"$ne":"Y"}},
                      {"IS_BLOCKED":{"$ne":"Y"}},
                     {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                    { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                             {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                    {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
        # //               {'IS_ADMIN':'Y'},
    #                      {'DISTRICT_ID._id':{'$ne':None}},
                    {'schoolId._id':{'$ne':None}},
                     {'EMAIL_ID':{'$ne':''}},
#                  {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},

#                   {'DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
                     {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                               {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

                {'$group':{'_id':'$schoolId._id','ID':{'$first':'$schoolId.NAME'}}},
                      {'$project':{'_id':1,'name':'$ID'}},
               {'$sort':{'name':1}}

                      ])))

    ids=list(df['_id'])
    
    
#     df3=DataFrame(list(collection.aggregate([
# {"$match":
#     {'$and': [

         
#         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
# {'USER_ID.schoolId._id':{'$in':ids}},


# #  {'MODIFIED_DATE':{'$gte':csy_first_date()}},
#     {'MODIFIED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}}]}},


#         {'$group':{'_id':'$USER_ID.schoolId._id','uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
#               {'$project':{'_id':1,'active_user_count':{'$size':'$uc'},'name':'$NAME','practice_count':'$pc'}},
#     { '$sort' : { 'active_user_count' : -1} },
# #     {'$limit':30}
#     ])))
#     top=list(df3['_id'])
#     print(df3)
#     df3.to_csv('file1.csv')
    df22=DataFrame(list(collection.aggregate([
    {"$match":
        {'$and': [
            
             {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
    {'USER_ID.schoolId._id':{'$in':ids}},
    # {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
  
#      {'MODIFIED_DATE':{'$gte':csy_first_date()}},
        {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}}]}},


            {'$group':{'_id':{'school':'$USER_ID.schoolId._id','month':{'$month':'$MODIFIED_DATE'}},'uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
                  {'$project':{'_id':0,'_id':'$_id.school','month':'$_id.month','active_user_count':{'$size':'$uc'},'school':'$NAME','practice_count':'$pc'}},
        { '$sort' : { 'name' : 1,'month'  :1} },


    # //               {'$count':'count'}
                  ])))
    # df2
    if df22.empty is True:
        df["month"]=0
        df["active_user_count"]=0
        df["practice_count"]=0
        df1=df
    else:
        df2=pd.merge(df,df22, on='_id',how='left')
        df1=df2
    df1=df1.sort_values(by=['name'], ascending=True)
    # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    dislist=list(set(df1["name"]))
    # print(len(dislist))
    df2=df1[["name","month","active_user_count","practice_count"]]
    # print(df2)
    overall=pd.DataFrame(columns=["name","month","active_user_count","practice_count"])
    # overall
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["name"]==k]
        df45.reset_index()
    #     print(df45)
        for i in range(1,13):
            if i in list(df45["month"]):
                pass
            else:
                a=max(list(df45.index))
                df45.loc[a+i] = [k] +[i]+[0]+[0]
  
        sorted_df =df45.sort_values(by=['month'], ascending=True)
    #     sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
        DF = pd.concat(result)
    data = [['Aug', 8], ['Sep', 9], ['Oct', 10],['Nov', 11], ['Dec', 12], ['Jan', 1],['Feb', 2], ['Mar', 3], ['Apr', 4],['May', 5], ['Jun', 6], ['Jul', 7]] 

    df9 = pd.DataFrame(data, columns = ['Monthname', 'month']) 

    finaldf=pd.merge(df9,DF, on='month',how='left')
    #     finaldf=finaldf.sort_values(by=['name'])


    data={}
    for i in dislist:


        schoolname= finaldf[(finaldf.name ==i)].reset_index(drop = True)
        active_user_count = schoolname['active_user_count'].tolist()
        practice_count = schoolname['practice_count'].tolist()


        data[i] =practice_count
    data=collections.OrderedDict(sorted(data.items()))
    df['_id']=df['_id'].astype(str)
    schoolid=  df['_id'].tolist()
    schoolname=  df['name'].tolist()
    data={'meanTemp':data,'schoolid':dict(zip(schoolname,schoolid))}
    return json.dumps(data)


@app.route('/districtheatmappracteacher_oct13_/<districtid>/<startdate>/<enddate>')
def heat_district_teachers_prac_(districtid,startdate,enddate):
    import collections
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    collection2=db.user_master
    district=disdic[districtid]
    myDatetime1 = dateutil.parser.parse(startdate)
    myDatetime2 = dateutil.parser.parse(enddate)

   

    df=DataFrame(list(collection2.aggregate([{"$match":
             {'$and': [
                

                    {"IS_DISABLED":{"$ne":"Y"}},
                      {"IS_BLOCKED":{"$ne":"Y"}},
                     {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                    { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                             {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                    {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
        # //               {'IS_ADMIN':'Y'},
    #                      {'DISTRICT_ID._id':{'$ne':None}},
                    {'schoolId._id':{'$ne':None}},
                     {'EMAIL_ID':{'$ne':''}},
#                  {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},

#                   {'DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
                     {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                               {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

                {'$group':{'_id':'$schoolId._id','ID':{'$first':'$schoolId.NAME'}}},
                      {'$project':{'_id':1,'name':'$ID'}},
                         {'$sort':{'name':1}}

                      ])))

    ids=list(df['_id'])
    
    
#     df3=DataFrame(list(collection.aggregate([
# {"$match":
#     {'$and': [

         
#         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
# {'USER_ID.schoolId._id':{'$in':ids}},


# #  {'MODIFIED_DATE':{'$gte':csy_first_date()}},
#     {'MODIFIED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}}]}},


#         {'$group':{'_id':'$USER_ID.schoolId._id','uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
#               {'$project':{'_id':1,'active_user_count':{'$size':'$uc'},'name':'$NAME','practice_count':'$pc'}},
#     { '$sort' : { 'active_user_count' : -1} },
# #     {'$limit':30}
#     ])))
#     top=list(df3['_id'])
# #     print(df3)
# #     df3.to_csv('file1.csv')
    df22=DataFrame(list(collection.aggregate([
    {"$match":
        {'$and': [
            
             {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
    {'USER_ID.schoolId._id':{'$in':ids}},
    # {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
  
#      {'MODIFIED_DATE':{'$gte':csy_first_date()}},
        {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}}]}},


            {'$group':{'_id':{'school':'$USER_ID.schoolId._id','month':{'$month':'$MODIFIED_DATE'}},'uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
                  {'$project':{'_id':0,'_id':'$_id.school','month':'$_id.month','active_user_count':{'$size':'$uc'},'school':'$NAME','practice_count':'$pc'}},
        { '$sort' : { 'name' : 1,'month'  :1} },


    # //               {'$count':'count'}
                  ])))
    # df2
    if df22.empty is True:
        df["month"]=0
        df["active_user_count"]=0
        df["practice_count"]=0
        df1=df
    else:
        df2=pd.merge(df,df22, on='_id',how='left')
        df1=df2
    df1=df1.sort_values(by=['name'], ascending=True)
    # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    dislist=list(set(df1["name"]))
    # print(len(dislist))
    df2=df1[["name","month","active_user_count","practice_count"]]
    # print(df2)
    overall=pd.DataFrame(columns=["name","month","active_user_count","practice_count"])
    # overall
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["name"]==k]
        df45.reset_index()
    #     print(df45)
        for i in range(1,13):
            if i in list(df45["month"]):
                pass
            else:
                a=max(list(df45.index))
                df45.loc[a+i] = [k] +[i]+[0]+[0]
  
        sorted_df =df45.sort_values(by=['month'], ascending=True)
    #     sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
        DF = pd.concat(result)
    data = [['Aug', 8], ['Sep', 9], ['Oct', 10],['Nov', 11], ['Dec', 12], ['Jan', 1],['Feb', 2], ['Mar', 3], ['Apr', 4],['May', 5], ['Jun', 6], ['Jul', 7]] 

    df9 = pd.DataFrame(data, columns = ['Monthname', 'month']) 

    finaldf=pd.merge(df9,DF, on='month',how='left')
    #     finaldf=finaldf.sort_values(by=['name'])


    data={}
    for i in dislist:


        schoolname= finaldf[(finaldf.name ==i)].reset_index(drop = True)
        active_user_count = schoolname['active_user_count'].tolist()
        practice_count = schoolname['practice_count'].tolist()


        data[i] =practice_count
    data=collections.OrderedDict(sorted(data.items()))
    df['_id']=df['_id'].astype(str)
    schoolid=  df['_id'].tolist()
    schoolname=  df['name'].tolist()
    data={'meanTemp':data,'schoolid':dict(zip(schoolname,schoolid))}
    return json.dumps(data)

@app.route('/districtheatmappractice_oct13_/<districtid>/<startdate>/<enddate>')
def heatmap_prac_district_(districtid,startdate,enddate):   
    import collections
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    collection2=db.user_master
    district=disdic[districtid]
    myDatetime1 = dateutil.parser.parse(startdate)
    myDatetime2 = dateutil.parser.parse(enddate)

   

    df=DataFrame(list(collection2.aggregate([{"$match":
             {'$and': [
                

                    {"IS_DISABLED":{"$ne":"Y"}},
                      {"IS_BLOCKED":{"$ne":"Y"}},
                     {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                    { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                             {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                    {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
        # //               {'IS_ADMIN':'Y'},
    #                      {'DISTRICT_ID._id':{'$ne':None}},
                    {'schoolId._id':{'$ne':None}},
                     {'EMAIL_ID':{'$ne':''}},
#                  {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},

#                   {'DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
                     {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                               {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

                {'$group':{'_id':'$schoolId._id','ID':{'$first':'$schoolId.NAME'}}},
                      {'$project':{'_id':1,'name':'$ID'}},
                      {'$sort':{'name':1}}

                      ])))

    ids=list(df['_id'])
    
    
#     df3=DataFrame(list(collection.aggregate([
# {"$match":
#     {'$and': [

         
#         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
# {'USER_ID.schoolId._id':{'$in':ids}},


# #  {'MODIFIED_DATE':{'$gte':csy_first_date()}},
#     {'MODIFIED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}}
#     ]}},


#         {'$group':{'_id':'$USER_ID.schoolId._id','uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
#               {'$project':{'_id':1,'active_user_count':{'$size':'$uc'},'name':'$NAME','practice_count':'$pc'}},
#     { '$sort' : { 'active_user_count' : -1} },
# #     {'$limit':30}
#     ])))
#     top=list(df3['_id'])
# #     print(df3)
# #     df3.to_csv('file1.csv')
    df22=DataFrame(list(collection.aggregate([
    {"$match":
        {'$and': [
            
#              {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
    {'USER_ID.schoolId._id':{'$in':ids}},
    # {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
  
#      {'MODIFIED_DATE':{'$gte':csy_first_date()}},
        {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}}]}},


            {'$group':{'_id':{'school':'$USER_ID.schoolId._id','month':{'$month':'$MODIFIED_DATE'}},'uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
                  {'$project':{'_id':0,'_id':'$_id.school','month':'$_id.month','active_user_count':{'$size':'$uc'},'school':'$NAME','practice_count':'$pc'}},
        { '$sort' : { 'name' : 1,'month'  :1} },


    # //               {'$count':'count'}
                  ])))
    if df22.empty is True:
        df["month"]=0
        df["active_user_count"]=0
        df["practice_count"]=0
        df1=df
    else:
        df2=pd.merge(df,df22, on='_id',how='left')
        df1=df2
    df1=df1.sort_values(by=['name'], ascending=True)
    # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    dislist=list(set(df1["name"]))
    # print(len(dislist))
    df2=df1[["name","month","active_user_count","practice_count"]]
    # print(df2)
    overall=pd.DataFrame(columns=["name","month","active_user_count","practice_count"])
    # overall
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["name"]==k]
        df45.reset_index()
    #     print(df45)
        for i in range(1,13):
            if i in list(df45["month"]):
                pass
            else:
                a=max(list(df45.index))
                df45.loc[a+i] = [k] +[i]+[0]+[0]
  
        sorted_df =df45.sort_values(by=['month'], ascending=True)
    #     sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
        DF = pd.concat(result)
    data = [['Aug', 8], ['Sep', 9], ['Oct', 10],['Nov', 11], ['Dec', 12], ['Jan', 1],['Feb', 2], ['Mar', 3], ['Apr', 4],['May', 5], ['Jun', 6], ['Jul', 7]] 

    df9 = pd.DataFrame(data, columns = ['Monthname', 'month']) 

    finaldf=pd.merge(df9,DF, on='month',how='left')
    #     finaldf=finaldf.sort_values(by=['name'])


    data={}
    for i in dislist:


        schoolname= finaldf[(finaldf.name ==i)].reset_index(drop = True)
        active_user_count = schoolname['active_user_count'].tolist()
        practice_count = schoolname['practice_count'].tolist()


        data[i] =practice_count
    data=collections.OrderedDict(sorted(data.items()))
    df['_id']=df['_id'].astype(str)
    schoolid=  df['_id'].tolist()
    schoolname=  df['name'].tolist()
    data={'meanTemp':data,'schoolid':dict(zip(schoolname,schoolid))}
    return json.dumps(data)


@app.route('/teachersdistrictheatmap_oct13_/<districtid>/<startdate>/<enddate>')
def heat_district_teachers_active_(districtid,startdate,enddate):
    import collections
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    collection2=db.user_master
    district=disdic[districtid]
    myDatetime1 = dateutil.parser.parse(startdate)
    myDatetime2 = dateutil.parser.parse(enddate)

   

    df=DataFrame(list(collection2.aggregate([{"$match":
             {'$and': [
                

                    {"IS_DISABLED":{"$ne":"Y"}},
                      {"IS_BLOCKED":{"$ne":"Y"}},
                     {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                    { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                             {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                    {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
        # //               {'IS_ADMIN':'Y'},
    #                      {'DISTRICT_ID._id':{'$ne':None}},
                    {'schoolId._id':{'$ne':None}},
                     {'EMAIL_ID':{'$ne':''}},
#                  {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},

#                   {'DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
                     {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                               {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

                {'$group':{'_id':'$schoolId._id','ID':{'$first':'$schoolId.NAME'}}},
                      {'$project':{'_id':1,'name':'$ID'}},
                    {'$sort':{'name':1}}
                      ])))

    ids=list(df['_id'])
    
    
#     df3=DataFrame(list(collection.aggregate([
# {"$match":
#     {'$and': [

         
#         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
# {'USER_ID.schoolId._id':{'$in':ids}},


# #  {'MODIFIED_DATE':{'$gte':csy_first_date()}},
#     {'MODIFIED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}}]}},


#         {'$group':{'_id':'$USER_ID.schoolId._id','uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
#               {'$project':{'_id':1,'active_user_count':{'$size':'$uc'},'name':'$NAME','practice_count':'$pc'}},
#     { '$sort' : { 'active_user_count' : -1} },
# #     {'$limit':30}
#     ])))
#     top=list(df3['_id'])
#     print(df3)
#     df3.to_csv('file1.csv')
    df22=DataFrame(list(collection.aggregate([
    {"$match":
        {'$and': [
            
             {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
    {'USER_ID.schoolId._id':{'$in':ids}},
    # {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
  
#      {'MODIFIED_DATE':{'$gte':csy_first_date()}},
        {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}}]}},


            {'$group':{'_id':{'school':'$USER_ID.schoolId._id','month':{'$month':'$MODIFIED_DATE'}},'uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
                  {'$project':{'_id':0,'_id':'$_id.school','month':'$_id.month','active_user_count':{'$size':'$uc'},'school':'$NAME','practice_count':'$pc'}},
        { '$sort' : { 'name' : 1,'month'  :1} },


    # //               {'$count':'count'}
                  ])))
    # df2
    if df22.empty is True:
        df["month"]=0
        df["active_user_count"]=0
        df["practice_count"]=0
        df1=df
    else:
        df2=pd.merge(df,df22, on='_id',how='left')
        df1=df2
    df1=df1.sort_values(by=['name'], ascending=True)
    # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    dislist=list(set(df1["name"]))
    # print(len(dislist))
    df2=df1[["name","month","active_user_count","practice_count"]]
    # print(df2)
    overall=pd.DataFrame(columns=["name","month","active_user_count","practice_count"])
    # overall
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["name"]==k]
        df45.reset_index()
    #     print(df45)
        for i in range(1,13):
            if i in list(df45["month"]):
                pass
            else:
                a=max(list(df45.index))
                df45.loc[a+i] = [k] +[i]+[0]+[0]
  
        sorted_df =df45.sort_values(by=['month'], ascending=True)
    #     sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
        DF = pd.concat(result)
    data = [['Aug', 8], ['Sep', 9], ['Oct', 10],['Nov', 11], ['Dec', 12], ['Jan', 1],['Feb', 2], ['Mar', 3], ['Apr', 4],['May', 5], ['Jun', 6], ['Jul', 7]] 

    df9 = pd.DataFrame(data, columns = ['Monthname', 'month']) 

    finaldf=pd.merge(df9,DF, on='month',how='left')
    #     finaldf=finaldf.sort_values(by=['name'])


    data={}
    for i in dislist:


        schoolname= finaldf[(finaldf.name ==i)].reset_index(drop = True)
        active_user_count = schoolname['active_user_count'].tolist()
        practice_count = schoolname['practice_count'].tolist()


        data[i] =active_user_count
    data=collections.OrderedDict(sorted(data.items()))
    df['_id']=df['_id'].astype(str)
    schoolid=  df['_id'].tolist()
    schoolname=  df['name'].tolist()
    data={'meanTemp':data,'schoolid':dict(zip(schoolname,schoolid))}
    return json.dumps(data)



@app.route('/familydistrictheatmap_oct13_/<districtid>/<startdate>/<enddate>')
def heat_district_family_active_(districtid,startdate,enddate):
    
    import collections
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    collection2=db.user_master
    district=disdic[districtid]
    myDatetime1 = dateutil.parser.parse(startdate)
    myDatetime2 = dateutil.parser.parse(enddate)

   

    df=DataFrame(list(collection2.aggregate([{"$match":
             {'$and': [
                

                    {"IS_DISABLED":{"$ne":"Y"}},
                      {"IS_BLOCKED":{"$ne":"Y"}},
                     {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                    { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
#                             {'DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                    {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
        # //               {'IS_ADMIN':'Y'},
    #                      {'DISTRICT_ID._id':{'$ne':None}},
                    {'schoolId._id':{'$ne':None}},
                     {'EMAIL_ID':{'$ne':''}},
#                  {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},

#                   {'DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
                     {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                               {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

                {'$group':{'_id':'$schoolId._id','ID':{'$first':'$schoolId.NAME'}}},
                      {'$project':{'_id':1,'name':'$ID'}},
                        {'$sort':{'name':1}}
                      ])))

    ids=list(df['_id'])
    
    
#     df3=DataFrame(list(collection.aggregate([
# {"$match":
#     {'$and': [

         
#         {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
# {'USER_ID.schoolId._id':{'$in':ids}},


# #  {'MODIFIED_DATE':{'$gte':csy_first_date()}},
#     {'MODIFIED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}}]}},


#         {'$group':{'_id':'$USER_ID.schoolId._id','uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
#               {'$project':{'_id':1,'active_user_count':{'$size':'$uc'},'name':'$NAME','practice_count':'$pc'}},
#     { '$sort' : { 'active_user_count' : -1} },
# #     {'$limit':30}
#     ])))
#     top=list(df3['_id'])
#     print(df3)
#     df3.to_csv('file1.csv')
    df22=DataFrame(list(collection.aggregate([
    {"$match":
        {'$and': [
            
             {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
    {'USER_ID.schoolId._id':{'$in':ids}},
    # {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
  
#      {'MODIFIED_DATE':{'$gte':csy_first_date()}},
        {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}}]}},


            {'$group':{'_id':{'school':'$USER_ID.schoolId._id','month':{'$month':'$MODIFIED_DATE'}},'uc':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'NAME':{'$first':'$USER_ID.schoolId.NAME'}}},
                  {'$project':{'_id':0,'_id':'$_id.school','month':'$_id.month','active_user_count':{'$size':'$uc'},'school':'$NAME','practice_count':'$pc'}},
        { '$sort' : { 'name' : 1,'month'  :1} },


    # //               {'$count':'count'}
                  ])))
    # df2
    if df22.empty is True:
        df["month"]=0
        df["active_user_count"]=0
        df["practice_count"]=0
        df1=df
    else:
        df2=pd.merge(df,df22, on='_id',how='left')
        df1=df2
    df1=df1.sort_values(by=['name'], ascending=True)
    # x=df1[df1['NAME_DISTRICT']=="Belleville School District"]
    dislist=list(set(df1["name"]))
    # print(len(dislist))
    df2=df1[["name","month","active_user_count","practice_count"]]
    # print(df2)
    overall=pd.DataFrame(columns=["name","month","active_user_count","practice_count"])
    # overall
    result=[]
    for k in dislist:
    #     print(k)
        df45=df2[df2["name"]==k]
        df45.reset_index()
    #     print(df45)
        for i in range(1,13):
            if i in list(df45["month"]):
                pass
            else:
                a=max(list(df45.index))
                df45.loc[a+i] = [k] +[i]+[0]+[0]
  
        sorted_df =df45.sort_values(by=['month'], ascending=True)
    #     sorted_df1=sorted_df.reset_index()
        result.append(sorted_df)
        DF = pd.concat(result)
    data = [['Aug', 8], ['Sep', 9], ['Oct', 10],['Nov', 11], ['Dec', 12], ['Jan', 1],['Feb', 2], ['Mar', 3], ['Apr', 4],['May', 5], ['Jun', 6], ['Jul', 7]] 

    df9 = pd.DataFrame(data, columns = ['Monthname', 'month']) 

    finaldf=pd.merge(df9,DF, on='month',how='left')
    #     finaldf=finaldf.sort_values(by=['name'])


    data={}
    for i in dislist:


        schoolname= finaldf[(finaldf.name ==i)].reset_index(drop = True)
        active_user_count = schoolname['active_user_count'].tolist()
        practice_count = schoolname['practice_count'].tolist()


        data[i] =active_user_count
    data=collections.OrderedDict(sorted(data.items()))
    df['_id']=df['_id'].astype(str)
    schoolid=  df['_id'].tolist()
    schoolname=  df['name'].tolist()
    data={'meanTemp':data,'schoolid':dict(zip(schoolname,schoolid))}
    return json.dumps(data)


@app.route('/districtfeedbackrating_csy/<districtid>/<startdate>/<enddate>')
def dis_schoolrating_csy__(districtid,startdate,enddate):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    collection = db.audio_feedback
    district=disdic[districtid]
    myDatetime1 = dateutil.parser.parse(startdate)
    myDatetime2 = dateutil.parser.parse(enddate)

    df1=DataFrame(list(db.user_master.aggregate([
        {"$match":
         {
            '$and':[
    # // #             {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
             {"IS_DISABLED":{"$ne":"Y"}},
              {"IS_BLOCKED":{"$ne":"Y"}},
             {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                {'EMAIL_ID':{'$ne':''}},
    {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},

    #                 {'schoolId._id':{'$in':school}},

                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
         { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]

         }},
        {'$project':{'_id':'$_id','school':'$schoolId._id' }}
        ])))

    user=df1['_id'].tolist() 


    df = DataFrame(list(collection.aggregate([
     {"$match":{'$and':[

           {'USER._id':{'$in':user}},

        {'RATING':{'$ne':0}},
        {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}},

     ]}},

    {'$group':{'_id':'$RATING' ,'count':{'$sum':1}}},
           {'$sort':{'_id':-1}}

    ])))

    df['_id']=df['_id'].replace({5:'five', 4:'four',3:'three',2:'two',1:'one'})

    dff=df.set_index("_id")["count"].to_dict()

    dff={str(k):int(v) for k,v in dff.items()}

    temp={"donut":dff}
   
    return json.dumps(temp)


@app.route('/districtsentimentdonut_csy/<districtid>/<startdate>/<enddate>')
def dis_sentiment_pie(districtid,startdate,enddate):
    clean_list=[]
    news_headlines_senti = []
    news_headlines_dict = {}
    pnews_headlines=0
    nnews_headlines=0
    nenews_headlines = 0
    # date1=startdate
    # date2=enddate
    today = date.today()
    d1 = today.strftime("%Y-%m-%d")
    # myDatetimestrt = dateutil.parser.parse(date1)
    # myDatetimeend = dateutil.parser.parse(date2)
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    collection = db.audio_feedback
    district=disdic[districtid]
    myDatetime1 = dateutil.parser.parse(startdate)
    myDatetime2 = dateutil.parser.parse(enddate)

    df1=DataFrame(list(db.user_master.aggregate([
        {"$match":
         {
            '$and':[
#                 {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
             {"IS_DISABLED":{"$ne":"Y"}},
              {"IS_BLOCKED":{"$ne":"Y"}},
             {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                {'EMAIL_ID':{'$ne':''}},
                {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
         { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
            ]

         }},
        {'$project':{'_id':'$_id','school':'$schoolId._id' }}
        ])))

    userid=df1['_id'].tolist() 
    x=['NA','N/A','n.a','.\n',"a\\n","a\n","v\n","v\\n","0-",'na\n','na','Write a feedback (optional)','Na','k,n/l','[pppppppppppsz']
    user=[
    {"$match":{'$and':[ {'USER._id':{'$in':userid}},
                    {'COMMENT':{'$exists':1}},
                       {'COMMENT':{'$ne':''}},
                       {'COMMENT':{'$ne':None}},
                        {'COMMENT':{'$nin':x}},
                       
                       
                       
    #         {'RATING':{'$ne':0}},
         {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}}
                         ,
                        ]}},
    { "$project": { "USER_ID": "$USER._id", "USER_NAME": "$USER.USER_NAME","_id":0, "EMAIL": "$USER.EMAIL_ID", "RATING":1,
    "LAST_COMMENT_DATE": "$MODIFIED_DATE", "AUDIO_NAME": "$AUDIO_ID.AUDIO_NAME", "NARRATOR_NAME": "$AUDIO_ID.NARRATEDBY",
    "COMMENT":1, "PROGRAM_NAME": "$AUDIO_ID.PROGRAM_ID.PROGRAM_NAME"}}
    ]
    update=list(collection.aggregate(user))
    df=pd.DataFrame(update).fillna("no info")
    text=df["COMMENT"].to_list()
    df=df[['COMMENT']]
    df = df.sample(frac=1.0).reset_index(drop=True)
    for i in df['COMMENT'].tolist():
        df = df[df.COMMENT.str.len()!=1] 
    
    import nltk
    nltk.download('vader_lexicon')

    from nltk.sentiment.vader import SentimentIntensityAnalyzer
    sia = SentimentIntensityAnalyzer()
    df['Positivity'] = df['COMMENT'].apply(lambda x: sia.polarity_scores(x)['pos'])
    df['Negativity'] = df['COMMENT'].apply(lambda x: sia.polarity_scores(x)['neg'])
    df['Neutrality'] = df['COMMENT'].apply(lambda x: sia.polarity_scores(x)['neu'])
    df['Compound'] = df['COMMENT'].apply(lambda x: sia.polarity_scores(x)['compound'])
    pd.pandas.set_option('display.max_rows',None)  
    neg=df[df['Compound']<0]
    pos=df[df['Compound']>0]
    neu=df[df['Compound']==0]
    neg_sentiment=round(100*(len(neg)/(len(neu)+len(neg)+len(pos))),2)
    pos_sentiment=round(100*(len(pos)/(len(neu)+len(neg)+len(pos))),2)
    neu_sentiment=round(100*(len(neu)/(len(neu)+len(neg)+len(pos))),2)
    word_chart={'donut':{'pos':pos_sentiment,'neg':neg_sentiment,'neu':neu_sentiment},'text':['pos','neg','neu']}

#     print(df)
    
#     word_chart={"donut":{"pos":round(pos, 2),"neg":round(neg, 2)}}
    return json.dumps(word_chart)


@app.route('/districtsentiment_table/<districtid>/<table_type>/<startdate>/<enddate>')
def dis_sentiment_pie_table(districtid,table_type,startdate,enddate):
    clean_list=[]
    news_headlines_senti = []
    news_headlines_dict = {}
    pnews_headlines=0
    nnews_headlines=0
    nenews_headlines = 0
    # date1=startdate
    # date2=enddate
    today = date.today()
    d1 = today.strftime("%Y-%m-%d")
    # myDatetimestrt = dateutil.parser.parse(date1)
    # myDatetimeend = dateutil.parser.parse(date2)
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    collection = db.audio_feedback
    district=disdic[districtid]
    myDatetime1 = dateutil.parser.parse(startdate)
    myDatetime2 = dateutil.parser.parse(enddate)

    df1=DataFrame(list(db.user_master.aggregate([
        {"$match":
         {
            '$and':[
#                 {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
             {"IS_DISABLED":{"$ne":"Y"}},
              {"IS_BLOCKED":{"$ne":"Y"}},
             {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                {'EMAIL_ID':{'$ne':''}},
                {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
         { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}
            ]

         }},
        {'$project':{'_id':'$_id','school':'$schoolId._id' }}
        ])))

    userid=df1['_id'].tolist() 
    x=['NA','N/A','n.a','.\n',"a\\n","a\n","v\n","v\\n","0-",'na\n','na','Write a feedback (optional)','Na','k,n/l','[pppppppppppsz']
    user=[
    {"$match":{'$and':[ {'USER._id':{'$in':userid}},
                    {'COMMENT':{'$exists':1}},
                       {'COMMENT':{'$ne':''}},
                       {'COMMENT':{'$ne':None}},
                        {'COMMENT':{'$nin':x}},
                       
                       
                       
    #         {'RATING':{'$ne':0}},
         {'MODIFIED_DATE':{"$gte": myDatetime1 ,
                             "$lte":myDatetime2}}
                         ,
                        ]}},
    { "$project": { "USER_ID": "$USER._id", "USER_NAME": "$USER.USER_NAME","_id":0, "EMAIL": "$USER.EMAIL_ID", "RATING":1,
    "LAST_COMMENT_DATE":{"$dateToString": { "format": "%Y-%m-%d", "date":"$MODIFIED_DATE"}}, "AUDIO_NAME": "$AUDIO_ID.AUDIO_NAME", "NARRATOR_NAME": "$AUDIO_ID.NARRATEDBY",
    "COMMENT":1, "PROGRAM_NAME": "$AUDIO_ID.PROGRAM_ID.PROGRAM_NAME"}}
    ]
    update=list(collection.aggregate(user))
    df=pd.DataFrame(update).fillna("no info")
    text=df["COMMENT"].tolist()
#     df=df[['COMMENT']]
    df = df.sample(frac=1.0).reset_index(drop=True)
    df['RATING']=df['RATING'].replace({0:'NO RATING'})
    for i in df['COMMENT'].tolist():
        df = df[df.COMMENT.str.len()!=1] 
    
    import nltk
    nltk.download('vader_lexicon')

    from nltk.sentiment.vader import SentimentIntensityAnalyzer
    sia = SentimentIntensityAnalyzer()
    df['Positivity'] = df['COMMENT'].apply(lambda x: sia.polarity_scores(x)['pos'])
    df['Negativity'] = df['COMMENT'].apply(lambda x: sia.polarity_scores(x)['neg'])
    df['Neutrality'] = df['COMMENT'].apply(lambda x: sia.polarity_scores(x)['neu'])
    df['Compound'] = df['COMMENT'].apply(lambda x: sia.polarity_scores(x)['compound'])
    pd.pandas.set_option('display.max_rows',None)  
    neg=df[df['Compound']<0]
    pos=df[df['Compound']>0]
    neu=df[df['Compound']==0]
    neg_sentiment=round(100*(len(neg)/(len(neu)+len(neg)+len(pos))),2)
    pos_sentiment=round(100*(len(pos)/(len(neu)+len(neg)+len(pos))),2)
    neu_sentiment=round(100*(len(neu)/(len(neu)+len(neg)+len(pos))),2)
    a={'pos':pos,'neg':neg,'neu':neu}
    table_name=a[table_type]
    table=table_name[["USER_NAME","EMAIL","COMMENT","RATING","LAST_COMMENT_DATE"]]
    temp = {"table":table.to_numpy().tolist()}
    return json.dumps(temp, default=str)



@app.route('/90daystable/<districtid>/<startdate>')
def district_Date_table(districtid,startdate):
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 

    
    collection2=db.school_master
    collection=db.user_master
    collection1=db.audio_track_master
    collection3=db.subscription_master
    district=disdic[districtid]
    print(district)
    startdate= dateutil.parser.parse(str(startdate))
    enddat= dateutil.parser.parse(str(startdate))
    enddate=datetime.datetime.combine(enddat,datetime.time.max)

#     from datetime import datetime


    

    df2=DataFrame(list(collection.aggregate([{"$match":
         {'$and': [
            {'ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"IS_DISABLED":{"$ne":"Y"}},
                  {"IS_BLOCKED":{"$ne":"Y"}},
                 {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    #                 {'_id':{'$in':user}},
    # //               {'IS_ADMIN':'Y'},
              {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},

                 {'EMAIL_ID':{'$ne':''}},
                 {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
#              {'CREATED_DATE':{"$gte": myDatetime1 ,
#                              "$lte":myDatetime2}},
                           {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

            {'$group':{'_id':'$_id','ID':{'$addToSet':'$_id'},'school_name':{'$first':'$schoolId.NAME'},'school_id':{'$first':'$schoolId._id'},'user_name':{'$first':'$USER_NAME'},'EMAIL':{'$first':'$EMAIL_ID'},'date':{'$first':{"$dateToString": { "format": "%Y-%m-%d", "date":'$CREATED_DATE'}}},'country':{'$first':'$schoolId.COUNTRY'},
                      'State':{'$first':'$schoolId.STATE'},'city':{'$first':'$schoolId.CITY'}}},


            {'$project':{'_id':1,'Created_date':'$date','country':1,'State':1,'user_name':1,'EMAIL':1,'school_name':1,'city':1,'school_id':'$school_id'}},])))


    
    
    df3=DataFrame(list(collection1.aggregate([
     {"$match":
         {'$and': [
#               {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                  {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                 {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
    # //             {'USER_ID.IS_PORTAL':'Y'},
                 {'USER_ID.EMAIL_ID':{'$ne':''}},
    #                  {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
                               {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
    #              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Sarasota County'},
#                  {'MODIFIED_DATE':{'$gte':datetime(2020,8,1)}},
             {'MODIFIED_DATE':{"$gte": startdate ,
                             '$lte':enddate}},
    # //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
                 {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
            {'$group':{'_id':'$USER_ID._id','user':{'$addToSet':'$USER_ID._id'},'pc':{'$sum':1},'last_practice_date':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$MODIFIED_DATE'}}}}},
                  {'$project':{'_id':1,'user_id':'$user','Practice_Count':'$pc','last_practice_date':1}}])))

    if df3.empty is True:
        return json.dumps('NO DATA')
    else:
        df3



        df4 = DataFrame(list(collection3.aggregate([
        {"$match":
             {'$and': [
                     {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
                    {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
                      {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
                     {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
                    { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        #             {'USER_ID._id':{'$in':user}},
                {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},

                     {'USER_ID.EMAIL_ID':{'$ne':''}},
    #              {'USER_ID.CREATED_DATE':{"$gte": myDatetime1 ,
    #                              "$lte":myDatetime2}},
    #     #                  
                     {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                 {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                               {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                                 {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
                {'$group':{'_id':'$USER_ID._id','subsdate':{'$max':{"$dateToString": { "format": "%Y-%m-%d", "date":'$SUBSCRIPTION_EXPIRE_DATE'}}}}},
                      {'$project':{'_id':1,'Subscription_expire_date':'$subsdate'}},
                       ])))

        df5=pd.merge(df2,df3, how='right', on='_id')
        df=pd.merge(df5,df4, how='left', on='_id')
        df


        df['country'].fillna("NO INFO", inplace=True)
        df['user_name'].fillna("NO INFO", inplace=True)
        df['EMAIL'].fillna("NO INFO", inplace=True)
        df['school_name'].fillna("NO INFO", inplace=True)
        df['school_id'].fillna("NO INFO", inplace=True)
        df.Practice_Count=df.Practice_Count.fillna(0)
        df.Practice_Count=df.Practice_Count.astype('int64')

        df['school_name'].replace("",'NO INFO', inplace=True)
        df['city'].replace("",'NO INFO', inplace=True)
        df['State'].replace("",'NO INFO', inplace=True)
        df['country'].replace("",'NO INFO', inplace=True)
        df['user_name'].replace("",'NO INFO', inplace=True)
        df['city'].fillna("NO INFO", inplace=True)
        df['city'].replace("NULL","NO INFO", inplace=True)
        df['State'].fillna("NO INFO", inplace=True)
        df['State'].replace("NULL","NO INFO", inplace=True)



        df['Created_date']=df['Created_date'].fillna(0)
        df['last_practice_date']=df['last_practice_date'].fillna('NO PRACTICE')
        df['Subscription_expire_date']=df['Subscription_expire_date'].fillna('No Info')

        data=[]
        for i,j,k,l,m,n,o,p,r,s in zip(df['user_name'].tolist(),df['EMAIL'].tolist(),df['school_name'].tolist(),df['country'].tolist(),df['State'].tolist(),df['city'].tolist(),df['Created_date'].tolist(),df['Practice_Count'].tolist(),df['last_practice_date'].tolist(),df['school_id'].tolist()):
            data.append([i,j,k,l,m,n,o,p,r,s])
        temp={"data":data}
        return json.dumps(temp,default=str)
    
    
    
@app.route('/last90daysuserpractising/<districtid>')
def last_practice_90days_(districtid):
    
    from datetime import datetime
    from datetime import timedelta
    
    today1= datetime.utcnow()
    tod1= today1+ timedelta(hours=4)
    start1= tod1-timedelta(days=90)
    
    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass 
    collection = db.audio_track_master
    district=disdic[districtid]
    
#     myDatetime1 = dateutil.parser.parse(startdate)
#     myDatetime2 = dateutil.parser.parse(enddate)
    df1 = DataFrame(list(collection.aggregate([
    {"$match":
     {'$and': [
#     {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
#             {"USER_ID._id":{"$in":db.schoology_master.distinct( "USER_ID._id")}},
#             {"USER_ID._id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
              {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            {'USER_ID.schoolId._id':{'$ne':None}},
# //               {'IS_ADMIN':'Y'},
# //             {'USER_ID.IS_PORTAL':'Y'},
             {'USER_ID.EMAIL_ID':{'$ne':''}},
                  {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#              {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
#              {'MODIFIED_DATE':{'$gte':start1}},
         {'MODIFIED_DATE':{"$gte": start1}},
#                              "$lte":myDatetime2}},
# //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
         {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
        {'$group':{'_id':{"$dateToString": { "format": "%Y-%m-%d", "date": "$MODIFIED_DATE"}},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
              {'$project':{'_id':1,'user_count':'$pc'}},
    { '$sort' : { '_id' : 1} }
    

# //               {'$count':'count'}
              ])))
    if df1.empty:
        df1=pd.DataFrame({'_id':[],'user_count':[]})
    
    df2 = DataFrame(list(collection.aggregate([
    {"$match":
     {'$and': [
    {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID._id":{'$not':{"$in":db.schoology_master.distinct( "USER_ID._id")}}},
            {"USER_ID._id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
              {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            {'USER_ID.schoolId._id':{'$ne':None}},
# //               {'IS_ADMIN':'Y'},
# //             {'USER_ID.IS_PORTAL':'Y'},
             {'USER_ID.EMAIL_ID':{'$ne':''}},
                  {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#              {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
#              {'MODIFIED_DATE':{'$gte':start1}},
         {'MODIFIED_DATE':{"$gte": start1}},
# //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
         {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
        {'$group':{'_id':{"$dateToString": { "format": "%Y-%m-%d", "date": "$MODIFIED_DATE"}},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
              {'$project':{'_id':1,'teachers':'$pc'}},
    { '$sort' : { '_id' : 1} }
    

# //               {'$count':'count'}
              ])))
    if df2.empty:
        df2=pd.DataFrame({'_id':[],'teachers':[]})
    
    df3 = DataFrame(list(collection.aggregate([
    {"$match":
     {'$and': [
    {'USER_ID.ROLE_ID._id' :{'$eq':ObjectId("5f155b8a3b6800007900da2b")}},
#             {"USER_ID._id":{"$in":db.schoology_master.distinct( "USER_ID._id")}},
#             {"USER_ID._id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
              {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            {'USER_ID.schoolId._id':{'$ne':None}},
# //               {'IS_ADMIN':'Y'},
# //             {'USER_ID.IS_PORTAL':'Y'},
             {'USER_ID.EMAIL_ID':{'$ne':''}},
                  {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#              {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
#              {'MODIFIED_DATE':{'$gte':start1}},
         {'MODIFIED_DATE':{"$gte": start1}},
# //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
         {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
        {'$group':{'_id':{"$dateToString": { "format": "%Y-%m-%d", "date": "$MODIFIED_DATE"}},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
              {'$project':{'_id':1,'parents':'$pc'}},
    { '$sort' : { '_id' : 1} }
    

# //               {'$count':'count'}
              ])))
    if df3.empty:
        df3=pd.DataFrame({'_id':[],'parents':[]})
    
    df4 = DataFrame(list(collection.aggregate([
    {"$match":
     {'$and': [
    {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID._id":{'$not':{"$in":db.schoology_master.distinct( "USER_ID._id")}}},
            {"USER_ID._id":{"$in":db.clever_master.distinct( "USER_ID._id")}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
              {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            {'USER_ID.schoolId._id':{'$ne':None}},
# //               {'IS_ADMIN':'Y'},
# //             {'USER_ID.IS_PORTAL':'Y'},
             {'USER_ID.EMAIL_ID':{'$ne':''}},
                  {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#              {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
#              {'MODIFIED_DATE':{'$gte':start1}},
         {'MODIFIED_DATE':{"$gte": start1}},
# //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
         {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
        {'$group':{'_id':{"$dateToString": { "format": "%Y-%m-%d", "date": "$MODIFIED_DATE"}},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
              {'$project':{'_id':1,'clever':'$pc'}},
    { '$sort' : { '_id' : 1} }
    

# //               {'$count':'count'}
              ])))
    if df4.empty:
        df4=pd.DataFrame({'_id':[],'clever':[]})
    
    
    df5 = DataFrame(list(collection.aggregate([
    {"$match":
     {'$and': [
    {'USER_ID.ROLE_ID._id' :{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
            {"USER_ID._id":{"$in":db.schoology_master.distinct( "USER_ID._id")}},
            {"USER_ID._id":{'$not':{"$in":db.clever_master.distinct( "USER_ID._id")}}},
            {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
              {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
             {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
            { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
            {'USER_ID.schoolId._id':{'$ne':None}},
# //               {'IS_ADMIN':'Y'},
# //             {'USER_ID.IS_PORTAL':'Y'},
             {'USER_ID.EMAIL_ID':{'$ne':''}},
                  {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
#              {'USER_ID.DISTRICT_ID._id':{'$eq':ObjectId(""+districtid+"")}},
#              {'USER_ID.DISTRICT_ID.DISTRICT_NAME':'Broward County Public Schools'},
#              {'MODIFIED_DATE':{'$gte':start1}},
         {'MODIFIED_DATE':{"$gte":start1}},
# //              {'EMAIL_ID':{'$regex':'broward','$options':'i'}},
             {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
         {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                       {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},
        {'$group':{'_id':{"$dateToString": { "format": "%Y-%m-%d", "date": "$MODIFIED_DATE"}},'pc':{'$sum':1},'district':{'$first':'$USER_ID.DISTRICT_ID.DISTRICT_NAME'}}},
              {'$project':{'_id':1,'scoology':'$pc'}},
    { '$sort' : { '_id' : 1} }
    

# //               {'$count':'count'}
              ])))
    if df5.empty:
        df5=pd.DataFrame({'_id':[],'scoology':[]})
        
        
        
    df6= pd.merge(df1,df2,on='_id',how='left')
    df7= pd.merge(df6,df3,on='_id',how='left')
    df8= pd.merge(df7,df4,on='_id',how='left')
    DF= pd.merge(df8,df5,on='_id',how='left')
    DF=DF.fillna(0)
    # df['SCH_CREATED_DATE']=pd.to_datetime(df['SCH_CREATED_DATE'])
    DF.rename(columns = { '_id': 'date'}, inplace = True)
    
    
    if DF.empty == True:
        date=[]
        teachers=[]
    else:
        date=DF['date'].tolist()

        T=DF['teachers'].tolist()
        P=DF['parents'].tolist()
        C=DF['clever'].tolist()
        S=DF['scoology'].tolist()
        uc=DF['user_count'].tolist()


    data={'Date':date,'Teachers':T,'Parents':P,'Clever':C,'Scoology':S}
    return json.dumps(data)


@app.route('/active_teachers_on_School_Search/<idd>/<chart_type>')
def active_teachers_school_search(idd,chart_type):

    username = urllib.parse.quote_plus('admin')
    password = urllib.parse.quote_plus('F5tMazRj47cYqm33e')
    client = MongoClient("mongodb://%s:%s@52.41.36.115:27017/" % (username, password))
    db=client.compass
    collection= db.audio_track_master
    school=idd
    #     district=disdic[districtid]    
    #     myDatetime1 = dateutil.parser.parse(startdate)
    #     myDatetime2 = dateutil.parser.parse(enddate)

#     chart_type='Absolute_count'
#     chart_type=str(chart_type).title()
    
    if chart_type=='Absolute_count': 
        
        user_master=DataFrame(list(db.user_master.aggregate([{"$match":
        {'$and': [
        {"IS_DISABLED":{"$ne":"Y"}},
          {"IS_BLOCKED":{"$ne":"Y"}},
         {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

        #     {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" })}},
        #         "CATEGORY":{'$regex':district, '$options':'i'}})}},
        {'schoolId._id':ObjectId(idd)},    
        {'schoolId._id':{'$ne':None}},
         {'EMAIL_ID':{'$ne':''}},
         {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                   {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

        {'$group':{'_id':'$schoolId._id','Schoolname':{'$first':'$schoolId.NAME'}}}

          ])))

        df55 = DataFrame(list(collection.aggregate([
        {"$match":
        {'$and': [
        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
        {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
        {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.schoolId._id':{'$ne':None}},
        {'USER_ID.EMAIL_ID':{'$ne':''}},
        #      {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y"})}} ,
        #         "CATEGORY":{'$regex':district, '$options':'i'}})}},
        {'USER_ID.schoolId._id':ObjectId(school)},     
        {'MODIFIED_DATE':{"$gte": csy_first_date()
        #              "$lte":myDatetime2
                         }},

        {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},


        {'$project':{'_id':'$USER_ID._id', 'practice_date':{"$dateToString":{"format": "%Y-%m-%d", "date": "$MODIFIED_DATE" }},
                     'week': {'$week': "$MODIFIED_DATE" },
                    'school':'$USER_ID.schoolId._id', 'schoolname':'$USER_ID.schoolId.NAME',
        'Completion_Percentage':{"$round":[{"$divide":[{"$subtract":
                        ['$CURSOR_END','$cursorStart']},'$PROGRAM_AUDIO_ID.AUDIO_LENGTH']},2]}}}   ,          


        {"$match":{'Completion_Percentage':{"$gte":.5}}},

        {'$group':{'_id':'$school', 'active_users':{'$addToSet':'$_id'}}},
        {'$project':{'_id':1, 'active_users':{'$size':'$active_users'}}}    

        ])))   

        df5 = DataFrame(list(collection.aggregate([
        {"$match":
        {'$and': [
        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
        {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
        {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.schoolId._id':{'$ne':None}},
        {'USER_ID.EMAIL_ID':{'$ne':''}},
        #      {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
            {'USER_ID.schoolId._id':ObjectId(school)},  
        {'MODIFIED_DATE':{"$gte": csy_first_date()
        #              "$lte":myDatetime2
                         }},

        {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},


        {'$project':{'_id':'$USER_ID._id', 'practice_date':{"$dateToString":{"format": "%Y-%m-%d", "date": "$MODIFIED_DATE" }},
                     'week': {'$week': "$MODIFIED_DATE" },
                    'school':'$USER_ID.schoolId._id', 'schoolname':'$USER_ID.schoolId.NAME',
        'Completion_Percentage':{"$round":[{"$divide":[{"$subtract":
                        ['$CURSOR_END','$cursorStart']},'$PROGRAM_AUDIO_ID.AUDIO_LENGTH']},2]}}}   ,          


        {"$match":{'Completion_Percentage':{"$gte":.5}}},


        { '$sort' : { '_id' : 1} }

        ])))

        df6=df5.groupby(['_id','practice_date','week','school','schoolname'], as_index=False).sum()

        df7=df6.sort_values(by=['school','week'], ascending=False)

        df8=df7.groupby(['school','_id','week'], as_index=False).agg({'practice_date':'count'}).sort_values(['school','week'], ascending=False)


        def legend(row):
            if row['practice_date']==1:
                return '1 x/week'
            elif (row['practice_date']>=2) & (row['practice_date']<=4):
                return '2-4 x/week'
            else:
                return 'Daily'


        df8['legend']= df8.apply(legend, axis=1)

        df9=df8.groupby(['school','week','legend'], as_index=False).agg({'_id':'count'})

        df10=pd.merge(df9,df55, left_on='school', right_on='_id', how='left')

        df11=df10.groupby(['school','week'], as_index=False).agg({'_id_x':'sum'})

        df12=pd.merge(df11, df55, left_on='school', right_on='_id', how='left')
        df12['diffrenece']=df12['active_users']-df12['_id_x']

        def legend(row):
            if row['diffrenece']!=0:
                return ('Not Used')

        df12['legend']=df12.apply(legend, axis=1)

        df13=pd.concat([df10,df12]).sort_values(['school','week'])
        df13=df13[['school','week','legend','_id_x','active_users','diffrenece']]

        df13['diffrenece'].fillna(df13['_id_x'], inplace=True)


        df13=df13.rename(columns={'diffrenece':'Teachers'})

        df14=df13[['school', 'week', 'legend','Teachers']]
        df14['Teachers']=df14['Teachers'].astype(int)

        df15=df14.groupby(['school', 'week'], as_index=False).agg(list)

        legenddd=['Daily', '2-4 x/week', '1 x/week','Not Used']

        for i in range(len(df15)):
            if legenddd != df15['legend'][i]:
                missing=set(legenddd)-set(df15['legend'][i])
                df15['legend'][i].extend(missing)

        for j in range(len(df15)):
            if len(df15['legend'][j]) != len(df15['Teachers'][j]):
                diff=len(df15['legend'][j])- len(df15['Teachers'][j])
                zeros=[0.0]*diff
                str(zeros)
                df15['Teachers'][j].extend(zeros)

        df15['new_legend']=np.zeros(len(df15), dtype=int)
        for w in range(len(df15)):
            not_none=list(filter(lambda a:a!= None, df15['legend'][w]))
            df15['new_legend'][w]=not_none


        legend_list=['Daily','2-4 x/week','1 x/week','Not Used']

        d={k:v for v,k in enumerate(legend_list)}
        df15['empty_list'] = np.empty((len(df15), 0)).tolist()

        for i in range(len(df15)):
            dictionary=dict(zip(df15['new_legend'][i], df15['Teachers'][i]))
            from collections import OrderedDict
            dictionary22=OrderedDict([(el,dictionary[el]) for el in legend_list])
            x=list(dictionary22.values())
            df15['empty_list'][i]=x

        for j in range(len(df15)):
            given_list=df15['new_legend'][j]
            given_list.sort(key=d.get)

        df15['weeks_']= np.zeros(len(df15), dtype=int)

        for k in range(len(df15)):
            if (1<=df15['week'][k]<=30):
                xx=22+df15['week'][k]
                df15['weeks_'][k]=xx
            elif(31<=df15['week'][k]<=52):
                xy=30-df15['week'][k]
                df15['weeks_'][k]=xy

        df15['weeks_']=abs(df15['weeks_'])   
        df15=df15.sort_values(by=['weeks_'], ascending=True)

        df15['empty_list']=df15['empty_list'].astype(str).str.replace(r'\[|\]|', '')

        df15['new_legend']=df15['new_legend'].str.join(",")

        df16=df15[['school','weeks_','new_legend','empty_list']]
        df16['weeks_']='Week '+ df16['weeks_'].astype(str)

        df17=pd.merge(df16, user_master, how='left', left_on='school', right_on='_id')

        dataa=[]
        for l in range(len(df17)):
            data=[df17['Schoolname'][l], df17['weeks_'][l], df17['empty_list'][l]]
            dataa.append(data)

        list1=[]
        for ll in range(len(dataa)):
            dataa[ll][2]=dataa[ll][2].split(',')
            qq=[int(float(x)) for x in dataa[ll][2]]
            m=dataa[ll][0:2]+qq
            list1.append(m)

            each_list=list1[0][2:]
            total_teachers=sum(each_list)    

            yscale=(total_teachers)+2    

        temp={'data':list1, 'yscale':int(yscale)}
#         print(temp)
        return json.dumps(temp)
    

    else:
        
        user_master=DataFrame(list(db.user_master.aggregate([{"$match":
        {'$and': [
        {"IS_DISABLED":{"$ne":"Y"}},
          {"IS_BLOCKED":{"$ne":"Y"}},
         {"INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        { 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        { 'USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},

        #     {"schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" })}},
        #         "CATEGORY":{'$regex':district, '$options':'i'}})}},
        {'schoolId._id':ObjectId(idd)},    
        {'schoolId._id':{'$ne':None}},
         {'EMAIL_ID':{'$ne':''}},
         {'schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'schoolId.BLOCKED_BY_CAP':{'$exists':False}},
                   {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                     {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},

        {'$group':{'_id':'$schoolId._id','Schoolname':{'$first':'$schoolId.NAME'}}}

          ])))


        df55 = DataFrame(list(collection.aggregate([
        {"$match":
        {'$and': [
        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
        {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
        {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.schoolId._id':{'$ne':None}},
        {'USER_ID.EMAIL_ID':{'$ne':''}},
        #      {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y"})}} ,
        #         "CATEGORY":{'$regex':district, '$options':'i'}})}},
        {'USER_ID.schoolId._id':ObjectId(school)},     
        {'MODIFIED_DATE':{"$gte": csy_first_date()
        #              "$lte":myDatetime2
                         }},

        {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},


        {'$project':{'_id':'$USER_ID._id', 'practice_date':{"$dateToString":{"format": "%Y-%m-%d", "date": "$MODIFIED_DATE" }},
                     'week': {'$week': "$MODIFIED_DATE" },
                    'school':'$USER_ID.schoolId._id', 'schoolname':'$USER_ID.schoolId.NAME',
        'Completion_Percentage':{"$round":[{"$divide":[{"$subtract":
                        ['$CURSOR_END','$cursorStart']},'$PROGRAM_AUDIO_ID.AUDIO_LENGTH']},2]}}}   ,          


        {"$match":{'Completion_Percentage':{"$gte":.5}}},

        {'$group':{'_id':'$school', 'active_users':{'$addToSet':'$_id'}}},
        {'$project':{'_id':1, 'active_users':{'$size':'$active_users'}}}    

        ])))   

        df5 = DataFrame(list(collection.aggregate([
        {"$match":
        {'$and': [
        {"USER_ID.IS_DISABLED":{"$ne":"Y"}},
        {"USER_ID.IS_BLOCKED":{"$ne":"Y"}},
        {"USER_ID.INCOMPLETE_SIGNUP":{"$ne":"Y"}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        { 'USER_ID.USER_NAME':{"$not":{"$regex":"1gen",'$options':'i'}}},
        {'USER_ID.schoolId._id':{'$ne':None}},
        {'USER_ID.EMAIL_ID':{'$ne':''}},
        #      {"USER_ID.schoolId._id":{"$in":db.school_master.distinct( "_id", { "IS_PORTAL": "Y" ,"CATEGORY":{'$regex':district, '$options':'i'}})}},
            {'USER_ID.schoolId._id':ObjectId(school)},  
        {'MODIFIED_DATE':{"$gte": csy_first_date()
        #              "$lte":myDatetime2
                         }},

        {'USER_ID.schoolId.NAME':{"$not":{"$regex":"test",'$options':'i'}}},
        {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':False}},
           {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
             {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}}]}},


        {'$project':{'_id':'$USER_ID._id', 'practice_date':{"$dateToString":{"format": "%Y-%m-%d", "date": "$MODIFIED_DATE" }},
                     'week': {'$week': "$MODIFIED_DATE" },
                    'school':'$USER_ID.schoolId._id', 'schoolname':'$USER_ID.schoolId.NAME',
        'Completion_Percentage':{"$round":[{"$divide":[{"$subtract":
                        ['$CURSOR_END','$cursorStart']},'$PROGRAM_AUDIO_ID.AUDIO_LENGTH']},2]}}}   ,          


        {"$match":{'Completion_Percentage':{"$gte":.5}}},


        { '$sort' : { '_id' : 1} }

        ])))

        df6=df5.groupby(['_id','practice_date','week','school','schoolname'], as_index=False).sum()

        df7=df6.sort_values(by=['school','week'], ascending=False)

        df8=df7.groupby(['school','_id','week'], as_index=False).agg({'practice_date':'count'}).sort_values(['school','week'], ascending=False)


        def legend(row):
            if row['practice_date']==1:
                return '1 x/week'
            elif (row['practice_date']>=2) & (row['practice_date']<=4):
                return '2-4 x/week'
            else:
                return 'Daily'


        df8['legend']= df8.apply(legend, axis=1)

        df9=df8.groupby(['school','week','legend'], as_index=False).agg({'_id':'count'})

        df10=pd.merge(df9,df55, left_on='school', right_on='_id', how='left')

        df11=df10.groupby(['school','week'], as_index=False).agg({'_id_x':'sum'})

        df12=pd.merge(df11, df55, left_on='school', right_on='_id', how='left')
        df12['diffrenece']=df12['active_users']-df12['_id_x']

        def legend(row):
            if row['diffrenece']!=0:
                return ('Not Used')

        df12['legend']=df12.apply(legend, axis=1)

        df13=pd.concat([df10,df12]).sort_values(['school','week'])
        df13=df13[['school','week','legend','_id_x','active_users','diffrenece']]

        df13['diffrenece'].fillna(df13['_id_x'], inplace=True)


        df13=df13.rename(columns={'diffrenece':'Teachers'})

        df14=df13[['school', 'week', 'legend','Teachers']]
        df14['Teachers']=df14['Teachers'].astype(int)

        df15=df14.groupby(['school', 'week'], as_index=False).agg(list)

        legenddd=['Daily', '2-4 x/week', '1 x/week','Not Used']

        for i in range(len(df15)):
            if legenddd != df15['legend'][i]:
                missing=set(legenddd)-set(df15['legend'][i])
                df15['legend'][i].extend(missing)

        for j in range(len(df15)):
            if len(df15['legend'][j]) != len(df15['Teachers'][j]):
                diff=len(df15['legend'][j])- len(df15['Teachers'][j])
                zeros=[0.0]*diff
                str(zeros)
                df15['Teachers'][j].extend(zeros)

        df15['new_legend']=np.zeros(len(df15), dtype=int)
        for w in range(len(df15)):
            not_none=list(filter(lambda a:a!= None, df15['legend'][w]))
            df15['new_legend'][w]=not_none



        legend_list=['Daily','2-4 x/week','1 x/week','Not Used']

        d={k:v for v,k in enumerate(legend_list)}
        df15['empty_list'] = np.empty((len(df15), 0)).tolist()

        for i in range(len(df15)):
            dictionary=dict(zip(df15['new_legend'][i], df15['Teachers'][i]))
            from collections import OrderedDict
            dictionary22=OrderedDict([(el,dictionary[el]) for el in legend_list])
            x=list(dictionary22.values())
            df15['empty_list'][i]=x

        for j in range(len(df15)):
            given_list=df15['new_legend'][j]
            given_list.sort(key=d.get)

        df15['weeks_']= np.zeros(len(df15), dtype=int)

        for k in range(len(df15)):
            if (1<=df15['week'][k]<=30):
                xx=22+df15['week'][k]
                df15['weeks_'][k]=xx
            elif(31<=df15['week'][k]<=52):
                xy=30-df15['week'][k]
                df15['weeks_'][k]=xy

        df15['weeks_']=abs(df15['weeks_'])   
        df15=df15.sort_values(by=['weeks_'], ascending=True)

        df15['empty_list']=df15['empty_list'].astype(str).str.replace(r'\[|\]|', '')

        df15['new_legend']=df15['new_legend'].str.join(",")

        df16=df15[['school','weeks_','new_legend','empty_list']]
        df16['weeks_']='Week '+ df16['weeks_'].astype(str)

        df17=pd.merge(df16, user_master, how='left', left_on='school', right_on='_id')

        dataa=[]
        for l in range(len(df17)):
            data=[df17['Schoolname'][l], df17['weeks_'][l], df17['empty_list'][l]]
            dataa.append(data)

        list1=[]
        for ll in range(len(dataa)):
            dataa[ll][2]=dataa[ll][2].split(',')
            qq=[int(float(x)) for x in dataa[ll][2]]
            m=dataa[ll][0:2]+qq
            list1.append(m)

        each_list=list1[0][2:]
        total_teachers=sum(each_list)    

        yscale=(total_teachers)+2    

        for i in range(len(list1)):
            each_list=list1[i][2:]
            total_teachers=sum(each_list)
            list1[i][2:]=[round((x/total_teachers)*100) for x in each_list]

        temp={'data':list1, 'yscale':100}
        return json.dumps(temp)





# <<<<<<<<<<<<---------districtportalapi on live ---------------------->>>>>>>>>>
@app.route('/districtportalsignup/<districtid>')
def district_portal_signup_(districtid):
    client = MongoClient('mongodb://admin:F5tMazRj47cYqm33e@52.41.36.115:27017/')
    db=client.compass

    # Getting district id name from inserted district
    district=disdic[districtid]
    #  time frames
    current_time_utc=datetime.datetime.utcnow()
    last_30_days=current_time_utc-relativedelta(days=30)
    last__7_days=current_time_utc-relativedelta(days=7)
    last_24_hr=current_time_utc-relativedelta(hours=24)
    last_30_dates=[(last_30_days+timedelta(days=x)).date().strftime("%d-%m-%Y") for x in range((current_time_utc-last_30_days).days)]
    last_7_dates=[(last__7_days+timedelta(days=x)).date().strftime("%d-%m-%Y") for x in range((current_time_utc-last__7_days).days)]
    last_30_dates_df=pd.DataFrame({'DATE':last_30_dates})
    last_7_dates_df=pd.DataFrame({'DATE':last_7_dates})
    _24_hr_df=pd.DataFrame({'HOUR_OF_THE_DAY':list(range(1,25))})

    all_user_district=list(db.user_master.aggregate([{"$match":{
             '$and':[{ 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
              {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
              {'IS_DISABLED':{"$ne":'Y'}},
              {'IS_BLOCKED':{"$ne":'Y'}},
    #           {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
              {'schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
              {'schoolId.BLOCKED_BY_CAP':{'$exists':0}},
               {'schoolId.NAME':{'$not':{"$regex":'Test','$options':'i'}}},
                {'schoolId._id':{'$in':
                                db.school_master.distinct('_id',{'$and':[
                                    {'CATEGORY':{'$regex':district,'$options':'i'}},
                                    {'IS_PORTAL':'Y'}
                                ]})
                                }}
                    ]}},
                       {'$group':{
                            '_id':None,
                            'users':{'$addToSet':'$_id'}                        
                        }}
                           ]))[0].get('users')

    if len(all_user_district)==0:
        monthdf=last_30_dates_df
        monthdf['Count']=0
        monthdf['COUNTS']=0
        weekdf=last_7_dates_df
        weekdf['Count']=0
        weekdf['COUNTS']=0
        todaydf=_24_hr_df
        todaydf['Count']=0
        todaydf['COUNTS']=0

    else:
        all_signup_data=pd.DataFrame(db.user_master.aggregate([{'$match':{'$and':[{'_id':{'$in':
                                                                          all_user_district
                                                                          }}]}},                                          
                                               {'$project':{
                                                   '_id':0,
                                                   'USER_ID':'$_id',
                                                   'SIGNUP':'$CREATED_DATE',
                                                   'DATE':{ '$dateToString': {'format': "%d-%m-%Y", 'date': "$CREATED_DATE" }} 
                                                   }}
                                                                   ]))
        utc_aware = all_signup_data['SIGNUP'].dt.tz_localize('UTC')

        all_signup_data['SIGNUP_EST'] = utc_aware.dt.tz_convert('US/Eastern')

        all_signup_data['HOUR_OF_THE_DAY']=[i.hour for i in list(all_signup_data['SIGNUP_EST'])]

        all_signup_data['HOUR_OF_THE_DAY']=all_signup_data['HOUR_OF_THE_DAY']+1

        all_signup_data_grouped=all_signup_data.groupby('DATE')['USER_ID'].count().reset_index().rename(columns={'USER_ID':'Count',
                                                                                                                  'SIGNUP':'DATE'})

        monthdf=last_30_dates_df.merge(all_signup_data_grouped,how='left',on='DATE').fillna(0)
        monthdf['Cumulative']=monthdf['Count'].cumsum()
        monthdf.rename(columns={'Cumulative':'Count','Count':'COUNTS'},inplace=True)        

        weekdf=last_7_dates_df.merge(all_signup_data_grouped,how='left',on='DATE').fillna(0)
        weekdf['Cumulative']=weekdf['Count'].cumsum()
        weekdf.rename(columns={'Cumulative':'Count','Count':'COUNTS'},inplace=True)
        
        last_24_hr_signups=all_signup_data[all_signup_data['SIGNUP']>=last_24_hr].reset_index(drop=True)
        
        if last_24_hr_signups.empty:
            todaydf=_24_hr_df
            todaydf['Count']=0
            todaydf['COUNTS']=0
            
        else:
            last_24_hr_signups_df=last_24_hr_signups.groupby('HOUR_OF_THE_DAY')['USER_ID'].count().reset_index().rename(columns={'USER_ID':'Count'})
            todaydf=_24_hr_df.merge(last_24_hr_signups_df,how='left',on='HOUR_OF_THE_DAY').fillna(0)
            todaydf['Cumulative']=todaydf['Count'].cumsum()
            todaydf.rename(columns={'Cumulative':'Count','Count':'COUNTS'},inplace=True)
            
    temp={'month':{
        'count':sum(monthdf['COUNTS']),
        'graph_data':list(monthdf['Count'])},
          'week':{
              'count':sum(weekdf['COUNTS']),
              'graph_data':list(weekdf['Count'])
          },
          'today':{
              'count':sum(todaydf['COUNTS']),
              'graph_data':list(todaydf['Count'])                  
          }}
    return json.dumps(temp)
        
        
@app.route('/districtportalpractice/<districtid>') 
def district_portal_practice_(districtid):
    client = MongoClient('mongodb://admin:F5tMazRj47cYqm33e@52.41.36.115:27017/')
    db=client.compass

    # Getting district id name from inserted district
    district=disdic[districtid]
    #  time frames
    current_time_utc=datetime.datetime.utcnow()
    last_30_days=current_time_utc-relativedelta(days=30)
    last__7_days=current_time_utc-relativedelta(days=7)
    last_24_hr=current_time_utc-relativedelta(hours=24)
   
    last_30_dates=[(last_30_days+timedelta(days=x)).date().strftime("%d-%m-%Y") for x in range((current_time_utc-last_30_days).days)]
    last_7_dates=[(last__7_days+timedelta(days=x)).date().strftime("%d-%m-%Y") for x in range((current_time_utc-last__7_days).days)]
    last_30_dates_df=pd.DataFrame({'DATE':last_30_dates})
    last_7_dates_df=pd.DataFrame({'DATE':last_7_dates})
    _24_hr_df=pd.DataFrame({'HOUR_OF_THE_DAY':list(range(1,25))})

    all_user_district=list(db.user_master.aggregate([{"$match":{
             '$and':[{ 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
              {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
              {'IS_DISABLED':{"$ne":'Y'}},
              {'IS_BLOCKED':{"$ne":'Y'}},
    #           {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
              {'schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
              {'schoolId.BLOCKED_BY_CAP':{'$exists':0}},
               {'schoolId.NAME':{'$not':{"$regex":'Test','$options':'i'}}},
                {'schoolId._id':{'$in':
                                db.school_master.distinct('_id',{'$and':[
                                    {'CATEGORY':{'$regex':district,'$options':'i'}},
                                    {'IS_PORTAL':'Y'}
                                ]})
                                }},
                    ]}},
                       {'$group':{
                            '_id':None,
                            'users':{'$addToSet':'$_id'}                        
                        }}
                           ]))[0].get('users')
    

    if len(all_user_district)==0:
        monthdf=last_30_dates_df
        monthdf['Count']=0
        monthdf['COUNTS']=0
        weekdf=last_7_dates_df
        weekdf['Count']=0
        weekdf['COUNTS']=0
        todaydf=_24_hr_df
        todaydf['Count']=0
        todaydf['COUNTS']=0

    else:
        all_practice_data=pd.DataFrame(db.audio_track_master.aggregate([{'$match':{'$and':[{'USER_ID._id':{'$in':
                                                                      all_user_district
                                                                      }},

                                                                   {'MODIFIED_DATE':{'$gte':
                                                                                    csy_first_date()-relativedelta(months=2)}} 
                                                                                               ]}},                                           
                                           {'$project':{
                                               '_id':0,
                                               'USER_ID':'$_id',
                                               'PRACTICE':'$MODIFIED_DATE',
                                               'DATE':{ '$dateToString': {'format': "%d-%m-%Y", 'date': "$MODIFIED_DATE" }} 
                                               }}
                                                               ]))
        if all_practice_data.empty:
            monthdf=last_30_dates_df
            monthdf['Count']=0
            monthdf['COUNTS']=0
            weekdf=last_7_dates_df
            weekdf['Count']=0
            weekdf['COUNTS']=0
            todaydf=_24_hr_df
            todaydf['Count']=0
            todaydf['COUNTS']=0

        else:

            utc_aware_practice = all_practice_data['PRACTICE'].dt.tz_localize('UTC')

            all_practice_data['PRACTICE_EST'] = utc_aware_practice.dt.tz_convert('US/Eastern')

            all_practice_data['HOUR_OF_THE_DAY']=[i.hour for i in list(all_practice_data['PRACTICE_EST'])]

            all_practice_data['HOUR_OF_THE_DAY']=all_practice_data['HOUR_OF_THE_DAY']+1

            all_practice_data_grouped=all_practice_data.groupby('DATE')['USER_ID'].count().reset_index().rename(columns={'USER_ID':'Count',
                                                                                                                      'PRACTICE':'DATE'})

            monthdf=last_30_dates_df.merge(all_practice_data_grouped,how='left',on='DATE').fillna(0)
            monthdf['Cumulative']=monthdf['Count'].cumsum()
            monthdf.rename(columns={'Cumulative':'Count','Count':'COUNTS'},inplace=True)            

            weekdf=last_7_dates_df.merge(all_practice_data_grouped,how='left',on='DATE').fillna(0)
            weekdf['Cumulative']=weekdf['Count'].cumsum()
            weekdf.rename(columns={'Cumulative':'Count','Count':'COUNTS'},inplace=True)

            last_24_hr_practice=all_practice_data[all_practice_data['PRACTICE']>=last_24_hr].reset_index(drop=True)
            if last_24_hr_practice.empty:
                todaydf=_24_hr_df
                todaydf['Count']=0
                todaydf['COUNTS']=0
            else:
                last_24_hr_practice_df=last_24_hr_practice.groupby('HOUR_OF_THE_DAY')['USER_ID'].count().reset_index().rename(columns={'USER_ID':'Count'})
                todaydf=_24_hr_df.merge(last_24_hr_practice_df,how='left',on='HOUR_OF_THE_DAY').fillna(0)
                todaydf['Cumulative']=todaydf['Count'].cumsum()
                todaydf.rename(columns={'Cumulative':'Count','Count':'COUNTS'},inplace=True)
                
                
    temp={'month':{
    'count':sum(monthdf['COUNTS']),
    'graph_data':list(monthdf['Count'])},
      'week':{
          'count':sum(weekdf['COUNTS']),
          'graph_data':list(weekdf['Count'])
      },
      'today':{
          'count':sum(todaydf['COUNTS']),
          'graph_data':list(todaydf['Count'])                  
      }}
    return json.dumps(temp)
                
            

@app.route('/districtportalrating/<districtid>')  
def district_portal_rating_(districtid):
    client = MongoClient('mongodb://admin:F5tMazRj47cYqm33e@52.41.36.115:27017/')
    db=client.compass

    # Getting district id name from inserted district
    district=disdic[districtid]
    #  time frames
    current_time_utc=datetime.datetime.utcnow()
    last_30_days=current_time_utc-relativedelta(days=30)
    last__7_days=current_time_utc-relativedelta(days=7)
    last_24_hr=current_time_utc-relativedelta(hours=24)

    last_30_dates=[(last_30_days+timedelta(days=x)).date().strftime("%d-%m-%Y") for x in range((current_time_utc-last_30_days).days)]
    last_7_dates=[(last__7_days+timedelta(days=x)).date().strftime("%d-%m-%Y") for x in range((current_time_utc-last__7_days).days)]
    last_30_dates_df=pd.DataFrame({'DATE':last_30_dates})
    last_7_dates_df=pd.DataFrame({'DATE':last_7_dates})
    _24_hr_df=pd.DataFrame({'HOUR_OF_THE_DAY':list(range(1,25))})

    all_user_district=list(db.user_master.aggregate([{"$match":{
             '$and':[{ 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
              {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
              {'IS_DISABLED':{"$ne":'Y'}},
              {'IS_BLOCKED':{"$ne":'Y'}},
    #           {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
              {'schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
              {'schoolId.BLOCKED_BY_CAP':{'$exists':0}},
               {'schoolId.NAME':{'$not':{"$regex":'Test','$options':'i'}}},
                {'schoolId._id':{'$in':
                                db.school_master.distinct('_id',{'$and':[
                                    {'CATEGORY':{'$regex':district,'$options':'i'}},
                                    {'IS_PORTAL':'Y'}
                                ]})
                                }},
                    ]}},
                       {'$group':{
                            '_id':None,
                            'users':{'$addToSet':'$_id'}                        
                        }}
                           ]))[0].get('users')

    if len(all_user_district)==0:
        month_average=0
        week_average=0
        today_average=0 
    else:
        all_rating_data=pd.DataFrame(db.audio_feedback.aggregate([{'$match':{'$and':[{'USER._id':{'$in':all_user_district}},
    #                                                                         {'COMMENT':{'$nin':['',None,'null','NULL',' ']}},
                                                                            {'RATING':{'$in':[1,2,3,4,5]}},
                                                                            {'MODIFIED_DATE':{'$gte':csy_first_date()-relativedelta(months=2)}}             
                                                                                         ]}},                                          
                                                   {'$project':{
                                                       '_id':0,
                                                       'USER_ID':'$_id',
                                                       'RATING':'$RATING',
                                                       'RATING_DATE':'$MODIFIED_DATE',
                                                       'DATE':{ '$dateToString': {'format': "%d-%m-%Y", 'date': "$MODIFIED_DATE" }} 
                                                       }}
                                                                       ]))
        if all_rating_data.empty:            
            month_average=0                
            week_average=0
            today_average=0
        else:

            utc_aware_rate = all_rating_data['RATING_DATE'].dt.tz_localize('UTC')

            all_rating_data['RATING_EST'] = utc_aware_rate.dt.tz_convert('US/Eastern')

            all_rating_data['HOUR_OF_THE_DAY']=[i.hour for i in list(all_rating_data['RATING_EST'])]

            all_rating_data['HOUR_OF_THE_DAY']=all_rating_data['HOUR_OF_THE_DAY']+1

    #         all_rating_data_grouped=all_rating_data.groupby('DATE')['USER_ID'].count().reset_index().rename(columns={'USER_ID':'Count',
    #                                                                                                                   'RATING':'DATE'})

            monthdf=last_30_dates_df.merge(all_rating_data,how='left',on='DATE').fillna(0)
            month_average=math.ceil(round(monthdf['RATING'].mean(),1))

            weekdf=last_7_dates_df.merge(all_rating_data,how='left',on='DATE').fillna(0)
            week_average=math.ceil(round(weekdf['RATING'].mean(),1))       

            last_24_hr_rating=all_rating_data[all_rating_data['RATING_DATE']>=last_24_hr].reset_index(drop=True)

            if last_24_hr_rating.empty:
                today_average=0            
            else:
                today_average=math.ceil(round(last_24_hr_rating['RATING'].mean(),1))
    #             last_24_hr_rating_df=last_24_hr_rating.groupby('HOUR_OF_THE_DAY')['USER_ID'].count().reset_index().rename(columns={'USER_ID':'Count'})
    #             todaydf=_24_hr_df.merge(last_24_hr_rating_df,how='left',on='HOUR_OF_THE_DAY').fillna(0)

    temp={'month':month_average,
          'week':week_average,
          'today':today_average}
    
    return json.dumps(temp)
                
        
@app.route('/districtportalcomments/<districtid>')
def district_portal_comment_(districtid):
    client = MongoClient('mongodb://admin:F5tMazRj47cYqm33e@52.41.36.115:27017/')
    db=client.compass

    # Getting district id name from inserted district
    district=disdic[districtid]
    #  time frames
    current_time_utc=datetime.datetime.utcnow()
    last_30_days=current_time_utc-relativedelta(days=30)
    last__7_days=current_time_utc-relativedelta(days=7)

    last_24_hr=current_time_utc-relativedelta(hours=24)
   
    last_30_dates=[(last_30_days+timedelta(days=x)).date().strftime("%d-%m-%Y") for x in range((current_time_utc-last_30_days).days)]
    last_7_dates=[(last__7_days+timedelta(days=x)).date().strftime("%d-%m-%Y") for x in range((current_time_utc-last__7_days).days)]
    last_30_dates_df=pd.DataFrame({'DATE':last_30_dates})
    last_7_dates_df=pd.DataFrame({'DATE':last_7_dates})
    _24_hr_df=pd.DataFrame({'HOUR_OF_THE_DAY':list(range(1,25))})

    all_user_district=list(db.user_master.aggregate([{"$match":{
             '$and':[{ 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
              {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
              {'IS_DISABLED':{"$ne":'Y'}},
              {'IS_BLOCKED':{"$ne":'Y'}},
    #           {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
              {'schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
              {'schoolId.BLOCKED_BY_CAP':{'$exists':0}},
               {'schoolId.NAME':{'$not':{"$regex":'Test','$options':'i'}}},
                {'schoolId._id':{'$in':
                                db.school_master.distinct('_id',{'$and':[
                                    {'CATEGORY':{'$regex':district,'$options':'i'}},
                                    {'IS_PORTAL':'Y'}
                                ]})
                                }},
                    ]}},
                       {'$group':{
                            '_id':None,
                            'users':{'$addToSet':'$_id'}                        
                        }}
                           ]))[0].get('users')

    if len(all_user_district)==0:
        comment_data_for_use_table="NO INFO"
    else:
        comments_data=pd.DataFrame(list(db.audio_feedback.aggregate([{'$match':{'$and':[
            {'USER._id':{'$in':all_user_district}},
            {'COMMENT':{'$nin':['',None,'null','NULL',' ']}},
            {'RATING':{'$in':[4,5]}}
        ]}},
             {'$project':{
                 '_id':0,
                 'USER_ID':'$USER._id',
                 'COMMENT':'$COMMENT',
                 'CREATED_DATE':'$MODIFIED_DATE',
                 'AUDIO_NAME':'$AUDIO_ID.AUDIO_TITLE',
                 'AUDIO_DAY':'$AUDIO_ID.AUDIO_DAY',
                 'PROGRAM':'$AUDIO_ID.PROGRAM_ID.PROGRAM_NAME'
             }}])))

        if comments_data.empty:
            comment_data_for_use_table="NO INFO"
        else:
            if 'AUDIO_DAY' not in comments_data.columns:
                comments_data['AUDIO_DAY']=''

            PRACTICE_DAY=[]    
            for i in range(len(comments_data)):
                digit=[int(k) for k in comments_data['AUDIO_DAY'][i].split() if k.isdigit()]
                if len(digit)==0:
                    PRACTICE_DAY.append('')
                else:
                    PRACTICE_DAY.append(digit[0])

            comments_data['PRACTICE_DAY']=PRACTICE_DAY
            comments_school_detail=pd.DataFrame(list(db.user_master.aggregate([{'$match':{
            '$and':[{'_id':{'$in':list(comments_data['USER_ID'])}}]
            }},
                     {'$project':{
                         '_id':0,
                         'USER_ID':'$_id',
                         'SCHOOL_ID':'$schoolId._id',
                         'SCHOOL_NAME':'$schoolId.NAME'


                     }}])))
            comment_data_final=comments_data.merge(comments_school_detail,how='left',on='USER_ID')

            comment_data_final[['AUDIO_NAME','SCHOOL_NAME']]=comment_data_final[['AUDIO_NAME','SCHOOL_NAME']].fillna('')
            comment_data_final=comment_data_final.sort_values(by=['CREATED_DATE'],ascending=False).reset_index(drop=True)
            COMMENT_DATE=[]

            for i in range(len(comment_data_final)):
                try:
                    COMMENT_DATE.append(comment_data_final['CREATED_DATE'][i].strftime("%b-%d-%Y, %I:%M:%S"))
                except:
                    pass
            comment_data_final['COMMENT_DATE']=COMMENT_DATE
            comment_data_for_use=comment_data_final[['COMMENT','SCHOOL_NAME','AUDIO_NAME','PROGRAM','PRACTICE_DAY','COMMENT_DATE']]
            comment_data_for_use_table=comment_data_for_use[0:50].values.tolist()
            
    temp={'comments':comment_data_for_use_table}
    return json.dumps(temp)
    
@app.route('/districtportaltuneins/<districtid>')  
def district_portal_tunein_(districtid):
    client = MongoClient('mongodb://admin:F5tMazRj47cYqm33e@52.41.36.115:27017/')
    db=client.compass

    # Getting district id name from inserted district
    district=disdic[districtid]
    #  time frames
    current_time_utc=datetime.datetime.utcnow()
    last_30_days=current_time_utc-relativedelta(days=30)
    last__7_days=current_time_utc-relativedelta(days=7)
    last_24_hr=current_time_utc-relativedelta(hours=24)
   
    last_30_dates=[(last_30_days+timedelta(days=x)).date().strftime("%d-%m-%Y") for x in range((current_time_utc-last_30_days).days)]
    last_7_dates=[(last__7_days+timedelta(days=x)).date().strftime("%d-%m-%Y") for x in range((current_time_utc-last__7_days).days)]
    last_30_dates_df=pd.DataFrame({'DATE':last_30_dates})
    last_7_dates_df=pd.DataFrame({'DATE':last_7_dates})
    _24_hr_df=pd.DataFrame({'HOUR_OF_THE_DAY':list(range(1,25))})

    all_user_district=list(db.user_master.aggregate([{"$match":{
             '$and':[{ 'USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                       {'EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                         {'EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
              {'INCOMPLETE_SIGNUP':{"$ne":'Y'}},
              {'IS_DISABLED':{"$ne":'Y'}},
              {'IS_BLOCKED':{"$ne":'Y'}},
    #           {'ROLE_ID._id':{'$ne':ObjectId("5f155b8a3b6800007900da2b")}},
              {'schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
              {'schoolId.BLOCKED_BY_CAP':{'$exists':0}},
               {'schoolId.NAME':{'$not':{"$regex":'Test','$options':'i'}}},
                {'schoolId._id':{'$in':
                                db.school_master.distinct('_id',{'$and':[
                                    {'CATEGORY':{'$regex':district,'$options':'i'}},
                                    {'IS_PORTAL':'Y'}
                                ]})
                                }},
                    ]}},
                       {'$group':{
                            '_id':None,
                            'users':{'$addToSet':'$_id'}                        
                        }}
                           ]))[0].get('users')

    if len(all_user_district)==0:        
        monthdf=last_30_dates_df
        monthdf['Count']=0
        monthdf['COUNTS']=0
        weekdf=last_7_dates_df
        weekdf['Count']=0
        weekdf['COUNTS']=0
        todaydf=_24_hr_df
        todaydf['Count']=0
        todaydf['COUNTS']=0
    else:
        
        email_ids=db.user_master.distinct('EMAIL_ID',{'$and':[{'_id':{'$in':all_user_district}},
                                                {'EMAIL_ID':{'$nin':['',' ']}}
                                                
                                                ]})

        tune_in_parents=db.tune_in_master.distinct('EMAIL',{'USER_ID.EMAIL_ID':{'$in':email_ids}})
        if len(tune_in_parents)==0:
            monthdf=last_30_dates_df                
            monthdf['Count']=0
            monthdf['COUNTS']=0
            weekdf=last_7_dates_df
            weekdf['Count']=0
            weekdf['COUNTS']=0
            todaydf=_24_hr_df
            todaydf['Count']=0
            todaydf['COUNTS']=0
        else:
            all_practice_data=pd.DataFrame(db.tune_in_audio_track_detail.aggregate([{'$match':{'$and':[{'INVITEE_EMAIL':{'$in':tune_in_parents}},
                                                                   {'MODIFIED_DATE':{'$gte':
                                                                                    csy_first_date()-relativedelta(months=2)}} 
                                                                                               ]}},                                           
                                           {'$project':{
                                               '_id':0,
                                               'INVITEE_EMAIL':'$INVITEE_EMAIL',
                                               'PRACTICE':'$MODIFIED_DATE',
                                               'DATE':{ '$dateToString': {'format': "%d-%m-%Y", 'date': "$MODIFIED_DATE" }} 
                                               }}
                                                               ]))
            if all_practice_data.empty:
                monthdf=last_30_dates_df                                    
                monthdf['Count']=0
                monthdf['COUNTS']=0
                weekdf=last_7_dates_df
                weekdf['Count']=0
                weekdf['COUNTS']=0
                todaydf=_24_hr_df
                todaydf['Count']=0
                todaydf['COUNTS']=0
            else:

                utc_aware_practice = all_practice_data['PRACTICE'].dt.tz_localize('UTC')

                all_practice_data['PRACTICE_EST'] = utc_aware_practice.dt.tz_convert('US/Eastern')

                all_practice_data['HOUR_OF_THE_DAY']=[i.hour for i in list(all_practice_data['PRACTICE_EST'])]

                all_practice_data['HOUR_OF_THE_DAY']=all_practice_data['HOUR_OF_THE_DAY']+1

                all_practice_data_grouped=all_practice_data.groupby('DATE')['INVITEE_EMAIL'].count().reset_index().rename(columns={'INVITEE_EMAIL':'Count',
                                                                                                                          'PRACTICE':'DATE'})
                monthdf=last_30_dates_df.merge(all_practice_data_grouped,how='left',on='DATE').fillna(0)
                monthdf['Cumulative']=monthdf['Count'].cumsum()
                monthdf.rename(columns={'Cumulative':'Count','Count':'COUNTS'},inplace=True)

                weekdf=last_7_dates_df.merge(all_practice_data_grouped,how='left',on='DATE').fillna(0)
                weekdf['Cumulative']=weekdf['Count'].cumsum()
                weekdf.rename(columns={'Cumulative':'Count','Count':'COUNTS'},inplace=True)

                last_24_hr_practice=all_practice_data[all_practice_data['PRACTICE']>=last_24_hr].reset_index(drop=True)
                if last_24_hr_practice.empty:
                    todaydf=_24_hr_df
                    todaydf['Count']=0
                    todaydf['COUNTS']=0
                else:
                    last_24_hr_practice_df=last_24_hr_practice.groupby('HOUR_OF_THE_DAY')['USER_ID'].count().reset_index().rename(columns={'USER_ID':'Count'})
                    todaydf=_24_hr_df.merge(last_24_hr_practice_df,how='left',on='HOUR_OF_THE_DAY').fillna(0)
                    todaydf['Cumulative']=todaydf['Count'].cumsum()
                    todaydf.rename(columns={'Cumulative':'Count','Count':'COUNTS'},inplace=True)
                    
                    
    temp={'month':{
    'count':sum(monthdf['COUNTS']),
    'graph_data':list(monthdf['Count'])},
      'week':{
          'count':sum(weekdf['COUNTS']),
          'graph_data':list(weekdf['Count'])
      },
      'today':{
          'count':sum(todaydf['COUNTS']),
          'graph_data':list(todaydf['Count'])                  
      }}
    return json.dumps(temp)





@app.route('/narratorprofileb1/<id>')
def narrator_profile_(id):
    import datetime
    from textblob import TextBlob, Word, Blobber
    client = MongoClient('mongodb://admin:F5tMazRj47cYqm33e@52.41.36.115:27017/')
    db=client.compass
    collection = db.narrator_profile.aggregate([
            {"$match":
            {"$and":[{'_id':{"$eq":ObjectId(""+id+"")}}]}}

            ])

    df= DataFrame(list(collection)).fillna(0)
    if 'NARRATOR_IMAGE_2' not in df.columns:
        df['NARRATOR_IMAGE_2']=''    
    else:
        df=df

    df['NARRATOR_DESCRIPITION']=df['NARRATOR_DESCRIPITION'].replace({0:''})
    narrator_list=df["_id"].tolist()

    collection2 = db.audio_track_master.aggregate([

        {"$match":{
            '$and':[{ 'USER_ID.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    {'USER_ID.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                        {'USER_ID.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
            {'USER_ID.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
            {'USER_ID.IS_DISABLED':{"$ne":'Y'}},
            {'USER_ID.IS_BLOCKED':{"$ne":'Y'}},
                                {"PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
            {'USER_ID.schoolId.NAME':{'$not':{"$regex":'Blocked','$options':'i'}}},
            {'USER_ID.schoolId.BLOCKED_BY_CAP':{'$exists':0}},
            {'USER_ID.schoolId.NAME':{'$not':{"$regex":'test','$options':'i'}}},
                    {'PROGRAM_AUDIO_ID.NARRATOR_ID._id':ObjectId(str(id))}
            ]}},
            {"$group":{"_id":{"AUDIO_TITLE":"$PROGRAM_AUDIO_ID.AUDIO_TITLE",
                        "PROGRAM_NAME":"$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_NAME",
                              "NARRATOR":"$PROGRAM_AUDIO_ID.NARRATOR_ID._id"},

        #                         "PROGRAM_ID":{"$first":"$PROGRAM_AUDIO_ID.PROGRAM_ID.PROGRAM_ID"},

                        'count':{'$sum':1},
                    'MODIFIED_DATE':{"$min":'$MODIFIED_DATE'}}},
        {'$project':{'_id':0,
                        'MODIFIED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$MODIFIED_DATE"}},
                    "AUDIO_TITLE":"$_id.AUDIO_TITLE" ,
                    "PROGRAM_NAME":"$_id.PROGRAM_NAME",
                    "NARRAROR":"$_id.NARRATOR",
                    "Total":"$count",
        #                      "PROGRAM_ID":"$PROGRAM_ID"
            }
            }])

    df02= list(collection2)
    practice= DataFrame(df02)

    if practice.empty == True:
        plays="0"
        since="0"
    else:    
        plays=int(sum(practice["Total"]))
        since=practice.MODIFIED_DATE.min()
    collection3=db.audio_feedback.aggregate([{"$match":{'$and':[
        {"AUDIO_ID.NARRATOR_ID._id":{
                    "$in":narrator_list
                }},
                { 'USER.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                {'USER.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                {'USER.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                        {"AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
                {'USER.IS_DISABLED':{"$ne":'Y'}},
                {'RATING':{"$ne":0}}
                ]}},
                {"$group": {"_id":"null", 'RATING': {"$avg":"$RATING"} } }
                ,
                {"$project":{"_id":0,'RATING':{"$round":["$RATING",1]}}}
                                            ])
    df033= list(collection3)
    df33= pd.DataFrame.from_dict(df033).fillna(0)

    if df33.empty == True:
        n_rating=0
    else:
        n_rating=df33["RATING"][0]
    info={"name":str(df["NARRATOR_NAME"][0]),"email":str(df["NARRATOR_EMAIL"][0]) ,"place":str(df["PLACE"][0]),"image":str(df["PROFILE_IMAGE"][0]),"image2":str(df["NARRATOR_IMAGE_2"][0]),"desc":str(df["NARRATOR_DESCRIPITION"][0]),
            "plays":int(plays),"since":str(since),"rating":n_rating}

    if practice.empty:
        featuring_in=[]
        Top_mindfultrack_in=[]
        recent_comment=[]
    else:
        df4=practice.groupby(["PROGRAM_NAME"]).sum().reset_index()
        if df4.empty == True:
            featuring_in=[]
            Top_mindfultrack_in=[]
            recent_comment=[]
        else:
            collection4=db.audio_feedback.aggregate([{"$match":{'$and':[
                    {"AUDIO_ID.NARRATOR_ID._id":{
                                "$in":narrator_list

                            }},
                            { 'USER.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                            {'USER.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                            {'USER.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                            {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                                    {"AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
                            {'USER.IS_DISABLED':{"$ne":'Y'}},
                            {'RATING':{"$ne":0}}
                            ]}},
                            {"$group":{"_id":"$AUDIO_ID.PROGRAM_ID.PROGRAM_NAME","RATING":{"$avg":"$RATING"}}}
                            ,
                            {"$project":{"_id":0,"PROGRAM_NAME":"$_id","RATING":1}},
                                                    ])
            df05= list(collection4)
            df5= pd.DataFrame.from_dict(df05).fillna(0)

            if df5.empty == True:
                df5["PROGRAM_NAME"]=""
                df5["RATING"]=0
                featuring=pd.merge(df4,df5,on="PROGRAM_NAME",how="left").fillna(0)
                featuring["RATING"]=0
                featuring1=featuring[["PROGRAM_NAME","Total","RATING"]]


            else:
                df5=df5.round(decimals=1)   
                featuring=pd.merge(df4,df5,on="PROGRAM_NAME",how="left").fillna(0)
                featuring1=featuring[["PROGRAM_NAME","Total","RATING"]]                
            featuring2=featuring1.nlargest(3, "Total")

            if featuring2.empty:

                featuring2=pd.DataFrame(index=[0], columns=['PROGRAM_NAME','Total','RATING'])


            featuring2["PROGRAM_NAME"].fillna("",inplace=True)
            featuring2["Total"].fillna(0,inplace=True)
            featuring2["RATING"].fillna(0,inplace=True)

            featuring_in=featuring2.to_dict("records")


            collection5=db.audio_feedback.aggregate([{"$match":{'$and':[

            {"AUDIO_ID.NARRATOR_ID._id":{
                        "$in":narrator_list

                    }},
                    { 'USER.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                    {'USER.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                    {'USER.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                    {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                                {"AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
                    {'USER.IS_DISABLED':{"$ne":'Y'}},
                    {'RATING':{"$ne":0}}
                    ]}},
                    {"$group":{"_id":{"PROGRAM_NAME":"$AUDIO_ID.PROGRAM_ID.PROGRAM_NAME","AUDIO_TITLE":"$AUDIO_ID.AUDIO_TITLE"}
                            ,"RATING":{"$avg":"$RATING"}}}
                    ,
                    {"$project":{"_id":0,"PROGRAM_NAME":"$_id.PROGRAM_NAME","AUDIO_TITLE":"$_id.AUDIO_TITLE","RATING":1}}

                                            ])
            df07= list(collection5)
            df7= pd.DataFrame.from_dict(df07).fillna(0)


            if df7.empty and practice.empty:
                df7["PROGRAM_NAME"]=""
                df7["AUDIO_TITLE"]=""
                df7["RATING"]="0"
                mindfultrack=df7
                mindfultrack['Total']=0
                mindfultrack1=mindfultrack[["AUDIO_TITLE","PROGRAM_NAME","Total","RATING"]]          
            elif df7.empty==False and practice.empty:
                df7=df7.round(decimals=1)
                mindfultrack=df7
                mindfultrack['Total']=0
                mindfultrack1=mindfultrack[["AUDIO_TITLE","PROGRAM_NAME","Total","RATING"]]
            elif df7.empty and practice.empty==False:
                df6=practice.groupby(["AUDIO_TITLE","PROGRAM_NAME"]).sum().reset_index()
                mindfultrack=df6
                mindfultrack['Total']=0
                mindfultrack['RATING']=0
                mindfultrack1=mindfultrack[["AUDIO_TITLE","PROGRAM_NAME","Total","RATING"]]
            else:
                df6=practice.groupby(["AUDIO_TITLE","PROGRAM_NAME"]).sum().reset_index()
                df7=df7.round(decimals=1)
                mindfultrack=pd.merge(df6,df7,on=["AUDIO_TITLE","PROGRAM_NAME"],how="right")
            #             mindfultrack['RATING']=mindfultrack['RATING'].fillna('NO_Rating')
                mindfultrack1=mindfultrack[["AUDIO_TITLE","PROGRAM_NAME","Total","RATING"]]


            mindfultrack2=mindfultrack1.nlargest(3, "Total")
            mindfultrack2.reset_index(drop=True, inplace=True)
            
            dfimage=pd.DataFrame()
            for i in range(len(mindfultrack2.index)):
                collection = db.programs_audio.aggregate([{"$match":{"AUDIO_TITLE":mindfultrack2["AUDIO_TITLE"][i],
                                                                     "PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]},
                                                                    "PROGRAM_ID.PROGRAM_NAME":mindfultrack2["PROGRAM_NAME"][i]}},
                                                        {"$project":{"AUDIO_ID":"$_id","_id" : 0,"AUDIO_TITLE":"$AUDIO_TITLE",
                                                                    "PROGRAM_NAME":"$PROGRAM_ID.PROGRAM_NAME",
                                                        "CLASSROOM_IMAGE_URL":"$CLASSROOM_IMAGE_URL",
                                                        "IMAGE_URL":"$IMAGE_URL","AUDIO_NAME" : "$AUDIO_NAME"}}
                                                        ])
                dfimage1= DataFrame(list(collection))
                dfimage=dfimage.append(dfimage1)
            dfimage.reset_index(drop=True, inplace=True)
            dfimage["VIDEO_ID"] = dfimage['AUDIO_NAME']
            dfimage["VIDEO_ID"] = dfimage[dfimage['AUDIO_NAME'].str.contains("=")]['AUDIO_NAME'].str.split('=').str[1]
            dfimage["VIDEO_ID"].fillna(dfimage['AUDIO_NAME'], inplace=True)
            conditions  = [dfimage["VIDEO_ID"] != dfimage['AUDIO_NAME'], dfimage["VIDEO_ID"] == dfimage['AUDIO_NAME']]
            choices     = [1, 0]
            dfimage["IS_VIDEO"] = np.select(conditions, choices)
            dfimage = dfimage.drop(['AUDIO_NAME'], axis=1)



            mindfultrack0=pd.merge(mindfultrack2,dfimage,on=["AUDIO_TITLE","PROGRAM_NAME"],how="left").fillna(0)
            if mindfultrack0.empty:
                mindfultrack0=pd.DataFrame(index=[0], columns=['AUDIO_ID','AUDIO_TITLE','PROGRAM_NAME','Total','RATING','IMAGE_URL',"CLASSROOM_IMAGE_URL",'VIDEO_ID','IS_VIDEO'])
            mindfultrack0=mindfultrack0.nlargest(3, "Total") #############
            mindfultrack0["AUDIO_TITLE"].fillna("",inplace=True)
            mindfultrack0["PROGRAM_NAME"].fillna("",inplace=True)
            mindfultrack0["Total"].fillna(0,inplace=True)
            mindfultrack0["RATING"].fillna(0,inplace=True)
            mindfultrack0["IMAGE_URL"].fillna("",inplace=True)
            mindfultrack0["CLASSROOM_IMAGE_URL"].fillna("",inplace=True)
            mindfultrack0["VIDEO_ID"].fillna("",inplace=True)
            mindfultrack0["IS_VIDEO"].fillna(0,inplace=True)

            Top_mindfultrack_in=mindfultrack0.to_dict("records")
            collection3=db.audio_feedback.aggregate([{"$match":{'$and':[
                    {"AUDIO_ID.NARRATOR_ID._id":{
                                "$in":narrator_list

                            }},
                            { 'USER.USER_NAME':{"$not":{"$regex":"test",'$options':'i'}}},
                            {'USER.EMAIL_ID':{"$not":{"$regex":"test",'$options':'i'}}},
                            {'USER.EMAIL_ID':{"$not":{"$regex":"1gen",'$options':'i'}}},
                            {'USER.INCOMPLETE_SIGNUP':{"$ne":'Y'}},
                            {'USER.IS_DISABLED':{"$ne":'Y'}},
                                        {"AUDIO_ID.PROGRAM_ID.PROGRAM_ID" : {'$nin':[1,2,3,4,5,6,7,8]}},
                            {'COMMENT':{'$exists':1}},
                            # {'COMMENT':{"$not":{"$regex":" ",'$options':'i'}}},
                            {'COMMENT':{"$ne":""}},
                            {'RATING':{'$in':[4,5]}}

                            ]}},                            
                            {"$project":{"_id":0,"USER_NAME":"$USER.USER_NAME","USER_PROFILE" : "$USER.IMAGE_URL" ,
                                                                    "PROGRAM_NAME":"$AUDIO_ID.PROGRAM_ID.PROGRAM_NAME",
                                                                    'MODIFIED_DATE':"$MODIFIED_DATE", "RATING":'$RATING',"COMMENT":'$COMMENT',
                                                                    "AUDIO_TITLE":"$AUDIO_ID.AUDIO_TITLE","NARRATOR":"$AUDIO_ID.NARRATEDBY"}},
                                                        {"$sort":{'MODIFIED_DATE':-1}},{"$limit":30},
                                                        {"$project":{"_id":0,"USER_NAME":"$USER_NAME","USER_PROFILE" : "$USER_PROFILE" ,
                                                                    "PROGRAM_NAME":"$PROGRAM_NAME",
                                                                    'MODIFIED_DATE':{ "$dateToString": { "format": "%Y-%m-%d", "date":"$MODIFIED_DATE"}}, 
                                                            "RATING":'$RATING',"COMMENT":'$COMMENT',
                                                                    "AUDIO_TITLE":"$AUDIO_TITLE","NARRATOR":"$NARRATEDBY"}}
                                                                    ])
            df03= list(collection3)
            df3= pd.DataFrame.from_dict(df03).fillna(0)

            if df3.empty==True:
                recent_comment=[]
            else:
                df3['COMMENT_LENGTH']=[len(i) for i in list(df3['COMMENT'])]
                df3=df3[df3['COMMENT_LENGTH']>=30].reset_index(drop=True)
                if 'USER_PROFILE' not in df3.columns:
                    df3['USER_PROFILE']=""
                else:
                    df3

            #####################sentiment_analysis##################

                spec_chars = ["!",'"',"#","%","&","'","(",")",
                            "*","+",",","-",".","/",":",";","<",
                            "=",">","?","@","[","\\","]","^","_",
                            "`","{","|","}","~","–","\n"]
                df3['sentiment'] = df3.COMMENT.apply(lambda x: TextBlob(str(x)).sentiment.polarity)
                df10=df3[df3["sentiment"]>= 0.30]
                # current_Date = (datetime.datetime.today()- timedelta(60)).strftime ('%Y-%m-%d')
                # df10=df10.sort_values(by="MODIFIED_DATE")
                recent_comment=df10[["USER_NAME","MODIFIED_DATE","RATING","COMMENT","USER_PROFILE"]].to_dict("records")

        collection4 = db.narrator_profile.aggregate([
            {"$match":
            {"$and":[{'_id':{"$ne":ObjectId(id)}}]}},
            {"$project":{"_id":0,"NARRATOR_ID":"$_id","NARRATOR_NAME":"$NARRATOR_NAME","NARRATOR_IMAGE":"$NARRATOR_IMAGE"}}

            ])
        df11= DataFrame(list(collection4)).fillna(0)
        # print(df11)

        if df11.empty:
            df11=pd.DataFrame(index=[0], columns=["NARRATOR_ID",'NARRATOR_NAME','NARRATOR_IMAGE'])

        df11["NARRATOR_NAME"].fillna("",inplace=True)
        df11["NARRATOR_IMAGE"].fillna("",inplace=True)
        other_narrator=df11.to_dict("records")

        temp={"info":info,"featuring_in":featuring_in,"Top_mindfultrack_in":Top_mindfultrack_in,

              "recent_comment":recent_comment,"other_narrators":other_narrator}
        return json.dumps(temp, default=str)
# <<<<<<<<<<<<<<<<========================================>>>>>>>>>>>>>>>>>



@app.route('/School_Search')
def Practice_streak():
    return render_template('School_Search.html')

if __name__ == '__main__':
   app.run()







